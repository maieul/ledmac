% \iffalse meta-comment
%
% reledmac.dtx
% Author: Peter Wilson (Herries Press) herries dot press at earthlink dot net 
% Maintainer:Maïeul Rouquette maieul at maieul dot net
% Copyright 2003 -- 2005 Peter R. Wilson / 2011-.. Maïeul Rouquette
%
% This work may be distributed and/or modified under the
% conditions of the LaTeX Project Public License, either
% version 1.3 of this license or (at your option) any 
% later version.
% The latest version of the license is in
%    http://www.latex-project.org/lppl.txt
% and version 1.3 or later is part of all distributions of
% LaTeX version 2003/06/01 or later.
%
% This work has the LPPL maintenance status "maintained".
%
% This work consists of the files listed in the README file.
%
%
%<*driver>
\documentclass[twoside]{ltxdoc}
\usepackage[T1]{fontenc}
\usepackage{xr-hyper}
\usepackage{url}
  \usepackage[draft=false,
              plainpages=false,
              pdfpagelabels,
              bookmarksnumbered,
%            hyperindex=true
              hyperindex=false
             ]{hyperref}
\addtolength\marginparwidth{30pt}
\usepackage[mono=false]{libertine}
\usepackage[series={A,B},noend,noeledsec,nofamiliar]{reledmac}
\usepackage[english]{babel}
\usepackage{xspace}
\usepackage{doctools}
\usepackage{graphicx,metalogo}
% Index and Changelog in one column
\makeatletter
  \renewenvironment{theglossary}{%
      \@restonecoltrue\if@twocolumn\@restonecolfalse\fi
      \columnseprule \z@  \columnsep 35\p@
      \glossary@prologue%
      \GlossaryParms \let\item\@idxitem \ignorespaces}
    {\if@restonecol\onecolumn\else\clearpage\fi}
  \def\theindex{\@restonecoltrue\if@twocolumn\@restonecolfalse\fi
    \columnseprule \z@  \columnsep 35\p@
    \index@prologue%
    \IndexParms \let\item\@idxitem \ignorespaces}
  \def\endtheindex{\if@restonecol\onecolumn\else\clearpage\fi}
  \@mparswitchfalse
\makeatother
\EnableCrossrefs
\RecordChanges
\CodelineIndex
%%\OnlyDescription
\renewcommand{\MakeUppercase}[1]{#1}
\pagestyle{headings}
\setcounter{StandardModuleDepth}{1}
\usepackage{longtable}
\externaldocument[reledpar-]{reledpar}
\begin{document}
  \raggedbottom
  \DocInput{reledmac.dtx}
\end{document}
%</driver>
%
% \fi
%
% \newcommand{\reff}[1]{\ref{#1} p.~\pageref{#1}}
%
% \makeatletter
% \newcommand*{\DescribeIt}{\leavevmode\@bsphack\begingroup\MakePrivateLetters
%  \Describe@It}
% \newcommand*{\Describe@It}[1]{\endgroup
%   \marginpar{\raggedleft\PrintDescribeEnv{#1}}%
%   \SpecialItIndex{#1}\@esphack\ignorespaces}
% \newcommand*{\SpecialItIndex}[1]{\@bsphack
%   \index{#1\actualchar{\protect\ttfamily#1}\encapchar usage}\@esphack}
%    
% \DoNotIndex{\@,\@@par,\@beginparpenalty,\@empty}
% \DoNotIndex{\@flushglue,\@input}
% \DoNotIndex{\@makefnmark,\@makeother,\@maketitle}
% \DoNotIndex{\@namedef,\@ne,\@spaces,\@tempa}
% \DoNotIndex{\@tempb,\@tempswafalse,\@tempswatrue}
% \DoNotIndex{\@thanks,\@thefnmark,\@topnum}
% \DoNotIndex{\@@,\@elt,\@forloop,\@fortmp,\@gtempa,\@totalleftmargin}
% \DoNotIndex{\",\/,\@ifundefined,\@nil,\@verbatim,\@vobeyspaces}
% \DoNotIndex{\|,\~,\ ,\active,\advance,\aftergroup,\begingroup,\bgroup}
% \DoNotIndex{\mathcal,\csname,\def,\documentstyle,\dospecials,\edef}
% \DoNotIndex{\egroup}
% \DoNotIndex{\else,\endcsname,\endgroup,\endinput,\endtrivlist}
% \DoNotIndex{\expandafter,\fi,\fnsymbol,\futurelet,\gdef,\global}
% \DoNotIndex{\hbox,\hss,\if,\if@inlabel,\if@tempswa,\if@twocolumn}
% \DoNotIndex{\ifcase}
% \DoNotIndex{\ifcat,\iffalse,\ifx,\ignorespaces,\index,\input,\item}
% \DoNotIndex{\jobname,\kern,\leavevmode,\leftskip,\let,\llap,\lower}
% \DoNotIndex{\m@ne,\next,\newpage,\nobreak,\noexpand,\nonfrenchspacing}
% \DoNotIndex{\obeylines,\or,\protect,\raggedleft,\rightskip,\rm,\sc}
% \DoNotIndex{\setbox,\setcounter,\small,\space,\string,\strut}
% \DoNotIndex{\strutbox}
% \DoNotIndex{\thefootnote,\thispagestyle,\topmargin,\trivlist,\tt}
% \DoNotIndex{\twocolumn,\typeout,\vss,\vtop,\xdef,\z@}
% \DoNotIndex{\,,\@bsphack,\@esphack,\@noligs,\@vobeyspaces,\@xverbatim}
% \DoNotIndex{\`,\catcode,\end,\escapechar,\frenchspacing,\glossary}
% \DoNotIndex{\hangindent,\hfil,\hfill,\hskip,\hspace,\ht,\it,\langle}
% \DoNotIndex{\leaders,\long,\makelabel,\marginpar,\markboth,\mathcode}
% \DoNotIndex{\mathsurround,\mbox,\newcount,\newdimen,\newskip}
% \DoNotIndex{\nopagebreak}
% \DoNotIndex{\parfillskip,\parindent,\parskip,\penalty,\raise,\rangle}
% \DoNotIndex{\section,\setlength,\TeX,\topsep,\underline,\unskip,\verb}
% \DoNotIndex{\vskip,\vspace,\widetilde,\\,\%,\@date,\@defpar}
% \DoNotIndex{\[,\{,\},\]}
% \DoNotIndex{\count@,\ifnum,\loop,\today,\uppercase,\uccode}
% \DoNotIndex{\baselineskip,\begin,\tw@}
% \DoNotIndex{\a,\b,\c,\d,\e,\f,\g,\h,\i,\j,\k,\l,\m,\n,\o,\p,\q}
% \DoNotIndex{\r,\s,\t,\u,\v,\w,\x,\y,\z,\A,\B,\C,\D,\E,\F,\G,\H}
% \DoNotIndex{\I,\J,\K,\L,\M,\N,\O,\P,\Q,\R,\S,\T,\U,\V,\W,\X,\Y,\Z}
% \DoNotIndex{\1,\2,\3,\4,\5,\6,\7,\8,\9,\0}
% \DoNotIndex{\!,\#,\$,\&,\',\(,\),\+,\.,\:,\;,\<,\=,\>,\?,\_}
% \DoNotIndex{\discretionary,\immediate,\makeatletter,\makeatother}
% \DoNotIndex{\meaning,\newenvironment,\par,\relax,\renewenvironment}
% \DoNotIndex{\repeat,\scriptsize,\selectfont,\the,\undefined}
% \DoNotIndex{\arabic,\do,\makeindex,\null,\number,\show,\write,\@ehc}
% \DoNotIndex{\@author,\@ehc,\@ifstar,\@sanitize,\@title,\everypar}
% \DoNotIndex{\if@minipage,\if@restonecol,\ifeof,\ifmmode}
% \DoNotIndex{\lccode,\newtoks,\onecolumn,\openin,\p@,\SelfDocumenting}
% \DoNotIndex{\settowidth,\@resetonecoltrue,\@resetonecolfalse,\bf}
% \DoNotIndex{\clearpage,\closein,\lowercase,\@inlabelfalse}
% \DoNotIndex{\selectfont,\mathcode,\newmathalphabet,\rmdefault}
% \DoNotIndex{\bfdefault}
% \DoNotIndex{\newcommand,\renewcommand,\providecommand}
% \DoNotIndex{\ ,\to,\hsize,\multiply,\textit}
%
% \newcommand{\dtxfilename}{\texttt{reledmac.dtx}}
% \GetFileInfo{reledmac.sty}
% ^^A To put the changes in the right order : see http://tex.stackexchange.com/a/74113/7712 
%\makeatletter
%  \let\org@changes@\changes@
%    \def\my@changes v#1.#2.#3\@nil{%
%      \org@changes@{v#1.\six@digits{#2}.#3=v#1.#2.#3}%
%    }%
%    \newcommand*{\six@digits}[1]{%
%      \ifnum#1<100000 0\fi
%      \ifnum#1<10000 0\fi
%      \ifnum#1<1000 0\fi
%      \ifnum#1<100 0\fi
%      \two@digits{#1}%
%    }%
%    \renewcommand*{\changes@}[1]{%
%            \my@changes#1.\@nil
%    }%
%\makeatother
% \newcommand{\edmac}{\protect\package{edmac}\xspace}
% \newcommand{\tabmac}{\protect\package{tabmac}\xspace}
% \newcommand{\edstanza}{\protect\package{edstanza}\xspace}

% \newcommand{\ledmac}{\protect\package{ledmac}\xspace}
% \newcommand{\Ledmac}{\protect\package{Ledmac}\xspace}
% \newcommand{\ledpar}{\protect\package{ledpar}\xspace}
% \newcommand{\Ledpar}{\protect\package{Ledpar}\xspace}


% \newcommand{\eledmac}{\protect\package{eledmac}\xspace}
% \newcommand{\Eledmac}{\protect\package{Eledmac}\xspace}
% \newcommand{\eledpar}{\protect\package{eledpar}\xspace}
% \newcommand{\Eledpar}{\protect\package{Eledpar}\xspace}

% \newcommand{\reledmac}{\protect\package{reledmac}\xspace}
% \newcommand{\Reledmac}{\protect\package{Reledmac}\xspace}
% \newcommand{\reledpar}{\protect\package{reledpar}\xspace}
% \newcommand{\Reledpar}{\protect\package{Reledpar}\xspace}

% \let\macpackage\reledmac
% \let\parpackage\reledpar
% \let\Macpackage\reledmac
% \let\Parpackage\reledpar
% \newcommand{\texbook}{\textit{TeXbook}\xspace}
% \newcommand{\thetexbook}{\textit{The TeXbook}\xspace}
%
% \newcommand{\egstart}{%
%    \par
%    \begingroup
%    \centering
%    \begin{minipage}{0.45\textwidth}}
% \newcommand{\egmid}{%
%    \end{minipage}\hfill\begin{minipage}{0.45\textwidth}}
% \newcommand{\egend}{%
%    \end{minipage}\par\endgroup}
% \changes{v0.1.0}{2003/03/25}{First public release}
% \changes{v0.2.0}{2003/08/16}{Added tabmac code, and extended indexing}
% \changes{v0.2.1}{2003/09/13}{Bug fixes and match with mempatch v1.8}
% \changes{v0.2.2}{2003/11/09}{Improved paragraph footnotes}
% \changes{v0.2.2}{2003/11/09}{New Dekker example}
% \changes{v0.3.0}{2004/02/14}{Includes edstanza and more}
% \changes{v0.3.1}{2004/02/18}{Not released. Added remarks about the parallel package}
% \changes{v0.4.0}{2004/02/29}{Added minipage, etc., support}
% \changes{v0.4.1}{2004/03/28}{Not released. Minor editorial improvements and code tweaks}
% \changes{v0.5.0}{2004/04/04}{Added sidenotes, familiar footnotes in numbered text}
% \changes{v0.5.1}{2004/04/10}{Fixed right line numbers killed in v0.5}
% \changes{v0.6.0}{2004/11/16}{Fixed long paragraphs looping}
% \changes{v0.6.0}{2004/11/16}{Prepared for eledpar package}
% \changes{v0.6.0}{2004/12/10}{Fixed minor typos}
% \changes{v0.7.0}{2005/02/18}{Tidying up for eledpar and ledarab packages}
% \changes{v0.7.0}{2005/02/18}{Replaced all \protect\cs{interAfootnotelinepenalty}, etc.,
%                         by just \protect\cs{interfootnotelinepenalty}}
% \changes{v0.7.0}{2005/03/02}{eledmac having been available for 2 years,
%                         deleted the commented out original edmac texts}
% \changes{v0.7.0}{2011/06/17}{Ma\"ieul Rouquette new maintainer}
% \changes{v0.8.0}{2011/17/06}{Bug on endnotes fixed: in a // text, all endnotes will print and be placed at the ends of columns (!)}
% \changes{v0.8.1}{2011/07/14}{Bug on \protect\cs{edtext} ; \protect\cs{critex} ; \protect\cs{lemma} fixed: we can now us non-switching commands}
% \changes{v0.9.0}{2011/08/03}{No more ledpatch. All patches are now in the main file.}
% \changes{v0.9.1}{2011/08/08}{Fix some bugs linked to integrating ledpatch on the main file.}
% \changes{v0.10.0}{2011/08/22}{Corrections to \protect\cs{section} and other titles in numbered sections}
% \changes{v0.11.0}{2011/09/16}{Makes it possible to add a symbol on each verse's hanging, as in French typography. Redefines the command \protect\cs{hangingsymbol} to define the character.}
% \changes{v0.12.0}{2011/10/01}{Possibility to number the pstart with the commands \protect\cs{numberpstarttrue}.}
% \changes{v0.12.0}{2011/10/01}{For compatibility with eledpar, possibility to use \protect\cs{autopar} on the right side.}
% \changes{v0.12.1}{2011/10/02}{The numbering of \protect\cs{pstarts} restarts on each \protect\cs{beginnumbering}.}
% \changes{v0.12.1}{2011/10/02}{Don't number \protect\cs{pstarts} of stanza.}
% \changes{v0.13.0}{2011/11/08}{New stanzaindentsrepetition counter:  to repeat stanza indents every \emph{n} verses.}
% \changes{v0.13.1}{2011/11/18}{\protect\cs{thepstartL} and \protect\cs{thepstartR}  use now \protect\cs{bfseries} and not \protect\cs{bf}, which is deprecated and makes conflicts with memoir class.}
% \changes{v0.14.0}{2012/04/04}{Tweaked \protect\cs{edlabel} to get correct line number if the command is first element of a paragraph.}
% \changes{v1.0.0}{2012/09/15}{Some compatibility break with eledmac. Change of name: eledmac.}
% \changes{v1.1.0}{2012/09/25}{New package option: parapparatus.}
% \changes{v1.4.0}{2012/11/16}{Compatibility with LuaTeX of RTL notes.}
% \changes{v1.4.2}{2012/12/12}{Debug with some special classes.}
% \changes{v1.4.3}{2012/12/18}{Spurious space after familiar footnotes.}
% \changes{v1.4.4}{2013/02/18}{Label inside familiar footnotes.}
% \changes{v1.4.5}{2013/03/02}{Bug with komasscript + eledpar + chapter.}
% \changes{v1.4.6}{2013/04/15}{Bug with memoir class introduced by 1.4.5.}
% \changes{v1.4.8}{2013/07/02}{Corrects a bug with parallel texts introduced by 1.1.}
% \changes{v1.6.1}{2013/10/27}{Corrects a false hanging verse when a verse is exactly the length of a line.}
% \changes{v1.4.0}{2012/11/16}{Compatibility with LuaTeX of RTL notes.}
% \changes{v1.8.0}{2013/12/13}{Compatibility with parledgroup option of eledpar package.}
% \changes{v1.8.2}{2014/01/31}{Debug compatibility problem with hebrew option of babel package.}
% \changes{v1.8.3}{2014/02/03}{Fixes spurious spaces added by v1.7.0.}
% \changes{v1.10.0}{2014/02/27}{Add \protect\cs{pstartref} and \protect\cs{xpstartref} to refer to a pstart number (extension of \protect\cs{edlabel}).}
% \changes{v1.10.1}{2014/02/28}{Compatibility with \textsf{cleveref}.}
% \changes{v1.10.2}{2014/03/17}{Compatibility of stanza with v1.8a of babel-greek.}
% \changes{v1.10.3}{2014/04/07}{Debug of cross-referencing.}
% \changes{v1.10.4}{2014/04/09}{Debug of critical notes in edtabular environnment.}
% \changes{v1.10.5}{2014/04/14}{Debug of \protect\cs{xxref}.}
% \changes{v1.10.5}{2014/04/14}{Debug of \protect\cs{pausenumbering}.}
% \changes{v1.10.6}{2014/05/01}{Debug of interaction between \protect\cs{autopar} and\protect\cs{pausenumbering}.}
% \changes{v1.11.1}{2014/05/29}{Correct a bug when a critical note starts with plus or minus.}
% \changes{v1.12.0}{2014/08/05}{Compatibility with \protect\package{musixtex}.}
% \changes{v1.12.0}{2014/08/05}{Debug eledmac sectioning command after using \protect\cs{resumenumbering}.}
% \changes{v1.12.3}{2014/08/15}{Underline lemma in \protect\cs{eledxxx} when using draft mode.}
% \changes{v1.12.3}{2014/08/15}{Correct bug with side and familiar notes in tabular environments.}
% \changes{v1.12.3}{2014/08/15}{Debug left and right notes (bugs added by 1.12.0)}
% \changes{v1.12.3}{2014/08/15}{Debug \protect\cs{eledxxx} with some paper size}
% \changes{v1.12.4}{2014/08/25}{Debug spurious page breaks before \protect\cs{chapter} (bug added in 1.12.0)}
% \changes{v1.13.1}{2014/09/25}{Debug quotation environment inside of a \protect\cs{pstart} preceded by a sectioning command.}
% \changes{v1.13.1}{2014/09/25}{Coming back of page and line breaking penalties's management, deleted by error in v0.17.}
% \changes{v1.13.2}{2014/09/30}{Fix bug with normal footnotes, added by v1.13.0.}
% \changes{v1.13.3}{2014/10/04}{Fix extra spaces with paragraphed footnotes, added by v1.13.0.}
% \changes{v1.13.4}{2014/10/20}{Fix bug with index when memoir class is used without hyperref}
% \changes{v1.15.0}{2015/01/12}{Fix bug with footnotes layout when using some options of the geometry package (bug add by v1.13.0).}
% \changes{v1.16.0}{2015/01/23}{Compatibility of standard footnotes with some biblatex styles.}
% \changes{v1.16.0}{2015/01/23}{New \protect\cs{stanzaindent} command.}
% \changes{v1.18.0}{2015/02/23}{Compatibility with \LuaLaTeX\ RTL languages.}
% \changes{v1.19.0}{2015/03/06}{\protect\cs{Xmaxhnotes} and \protect\cs{maxhnotesX} work now for both  two-columns and three-columns setting.}
% \changes{v1.19.0}{2015/03/06}{Compatibility with \protect\package{eledpar} v.1.13.0.}
% \changes{v1.19.1}{2015/03/12}{Call \protect\cs{correct@footinsX@box} and \protect\cs{correct@Xfootins@box} directly in \protect\cs{print@notesX@forpages} and \protect\cs{print@Xnotes@forpages}, that is in \protect\package{eledpar}.}
% \changes{v1.20.0}{2015/03/22}{Correct \protect\cs{Xinplaceofnumber} hook.}
% \changes{v1.20.0}{2015/03/22}{Add series option.}
% \changes{v1.20.0}{2015/03/22}{Fix issues with RTL text in notes when using \LuaLaTeX.}
% \changes{v1.20.0}{2015/03/22}{The \protect\cs{newif}s are not followed by boolean values set to false, because it is the \TeX\ default setting.}
% \changes{v1.20.0}{2015/03/22}{Explicit error message when calling \protect\cs{Xfootnote} outside of \protect\cs{edtext}.}
% \changes{v1.20.0}{2015/03/22}{Fix bug with line number typesetting direction when using \protect\cs{eledsection} and similar commands for RTL texts with \LuaLaTeX.}
% \changes{v1.21.0}{2015/04/13}{\protect\cs{AtEveryPstart} and \protect\cs{AtEveryPend} are now compatible with \protect\cs{autopar}}
% \changes{v1.21.0}{2015/04/13}{Fix bug with space between columns with notes in two columns (bug added in v1.13.0).}
% \changes{v1.21.0}{2015/04/13}{Add nocritical, noend, nofamiliar and noledgroup options.}
% \changes{v1.21.0}{2015/04/13}{Fix bug with \protect\cs{maxhnotesX} when using \protect\cs{foottwocolX} or \protect\cs{footthreecolX}.}
% \changes{v1.21.0}{2015/04/13}{Add \protect\cs{Xtwolinesbutnotmore} and \protect\cs{Xtwolinesonlyinsamepage}.}
% \changes{v1.21.0}{2015/04/13}{Fix bug when a \protect\cs{Xfootnote} follows a \protect\cs{Xendnote} in the second argument of \protect\cs{edtext} (bug added in eledmac 1.0.0 !).}
% \changes{v1.21.0}{2015/04/13}{Add noeledsec package option}
% \changes{v1.21.0}{2015/04/13}{parapparatus option works now with familiar footnotes.}
% \changes{v1.21.0}{2015/04/13}{Add \protect\cs{beforenotesX} and \protect\cs{Xbeforenotes} features for notes set in two and three column.}
% \changes{v1.21.0}{2015/04/13}{Debug \protect\cs{beforenotesX} \protect\cs{maxhnotesX} \protect\cs{noteswidthliketwocolumnsX} and \protect\cs{afterruleX} with footnotes set in two and three columns.}
% \changes{v1.21.0}{2015/04/13}{\protect\cs{Xafterrule} and \protect\cs{afterruleX} features no longer create problems of overflowing at the bottom of the page.}
% \changes{v1.21.0}{2015/04/13}{\protect\cs{preXnotes} and \protect\cs{prenotesX} features no longer create problems of overflowing at the bottom of the page.}
% \changes{v1.21.0}{2015/04/13}{Fix spurious space after first page number in \protect\cs{doendnotes}. oldprintnpnumspace option allows to come back to previous setting}
% \changes{v1.21.0}{2015/04/13}{\protect\cs{chapter} inside optional argument of \protect\cs{pstart} works when typesetting parallel pages}
% \changes{v1.22.0}{2015/04/25}{When using hyperref package, internal links in index or with \protect\cs{edlineref} are now targeted to the top and not longer to the bottom of the lines they refer to.}
% \changes{v1.22.0}{2015/04/25}{Provides support for xindy.}
% \changes{v1.22.0}{2015/04/25}{Adds hyperlink for references to notes in indices.}
% \changes{v1.22.0}{2015/04/25}{Fix conflict between noend package option and edtabularx environments}
% \changes{v1.22.1}{2015/04/29}{Fix bug (added on v1.22.0) with \protect\cs{Xinplaceofnumber} hook.}
% \changes{v1.23.0}{2015/05/18}{Compatibility between nofamiliar/nocriticals option and minipage/ledgroup.}
% \changes{v1.23.0}{2015/05/18}{Fix error of \protect\cs{iftrue} not closed.}
% \changes{v1.23.0}{2015/05/18}{Allow use of \protect\cs{sameword} with inputenc managing of UTF-8.}
% \changes{v1.23.0}{2015/05/18}{Error message when using \protect\cs{beginnumbering}…\protect\cs{endnumbering} without \protect\cs{pstart}.}
% \changes{v1.23.0}{2015/05/18}{New tools to ensure the line-list file uses the right version of commands when upgrading the eledmac version.}
% \changes{v1.23.0}{2015/05/18}{Fix bug with \protect\cs{skipnumbering} called immediately after a \protect\cs{pstart}.}
% \changes{v1.23.0}{2015/05/18}{Fix spurious space with \protect\cs{skipnumbering} (bug added on v1.21.0).}
% \changes{v1.23.1}{2015/05/20}{Fix bug with \protect\cs{lemma} command in the right side.}
% \changes{v1.23.2}{2015/05/29}{Compatibility with \LaTeX's release 2015.}
% \changes{v1.24.0}{2015/06/02}{We can reinitialize \protect\cs{AtEveryPstart} and \protect\cs{AtEveryPend} providing to it an empty argument.}
% \changes{v1.24.1}{2015/06/21}{\protect\cs{lemma} is disabled when using `nocritical` option.}
% \changes{v1.24.2}{2015/06/26}{Fix incompatibility between `nofamiliar` option and `memoir` package.}
% \changes{v1.24.3}{2015/07/07}{Restore marginal numbers and notes with sectioning command (bug introduced in v1.21.0)}
% \changes{v1.24.4}{2015/07/19}{Fix spurious space with \protect\cs{edindex} when using xindy+hyperref option.}
% \changes{v1.24.5}{2015/07/16}{Fix bug of indent, when a  added in 1.1.0, when a \protect\cs{beginnumbering} immediately follow a sectioning command.}
% \changes{v2.0.0}{2015/07/19}{Package's name becomes \reledmac.} 
% \changes{v2.0.0}{2015/07/19}{In order to have a more consistent name's convention, many names has been changed.}
% \changes{v2.0.0}{2015/07/19}{Many \LaTeX's output macros are now patched and not override.}
% \changes{v2.0.0}{2015/07/19}{Add nonum option for endnotes.}
% \changes{v2.0.0}{2015/07/19}{Add \protect\cs{Xendinplaceofnumber} hook.}
% \changes{v2.0.0}{2015/07/19}{Add \protect\cs{Xendnonumber} hook.}
% \changes{v2.0.0}{2015/07/19}{Fix bug when printing only one series of endnotes, but wanted to keep endnotes for other series.}
% \changes{v2.0.1}{2015/07/27}{Fix incompatibility between optional argument of \protect\cs{pstart} and \protect\cs{numberpstarttrue}}
% \changes{v2.0.1}{2015/07/27}{Fix bug in eledmac-compat option}
% \changes{v2.1.0}{2015/08/08}{New tools to number stanzas}
% \changes{v2.1.0}{2015/08/02}{Fix bug with \protect\cs{chapter} in optional argument of \protect\cs{pstart} in parallel typesetting with \protect\ltxclass{scrbook}.}
% \changes{v2.1.0}{2015/08/02}{Fix bug with \protect\cs{eledchapter} in parallel typesetting with \protect\ltxclass{scrbook}.}
% \changes{v2.1.0}{2015/08/02}{Fix bug with \protect\cs{setline} at the beginning of a \protect\cs{pstart}.}
% \changes{v2.1.0}{2015/08/02}{Fix bug with \protect\cs{advanceline} at the beginning of a \protect\cs{pstart}.}
% \changes{v2.1.0}{2015/08/08}{Fix spacing bug with \protect\cs{Xbhooknote} and \protect\cs{bhooknoteX} when using them to insert text and not to execute code.}
% \changes{v2.1.0}{2015/08/08}{Fix spacing bug with \protect\cs{Xbhooknote} and \protect\cs{bhooknoteX} when using them to insert text and not to execute code.}
% \changes{v2.1.1}{2015/08/13}{Fix bug with \protect\cs{ledpbsetting}\protect\arg{before}.}
% \changes{v2.1.2}{2015/08/26}{Fix bug with lineation by pstart and tabular environments (added in 2.1.0).}
% \changes{v2.1.3}{2015/09/05}{Fix bug with \protect\cs{edindex} when using not-Latin characters without UTF-8 engines}
% \changes{v2.1.3}{2015/09/05}{\protect\cs{Xhangindent} and \protect\cs{hangindentX} work now with all the paragraphs in the note.}
% \changes{v2.1.3}{2015/09/05}{\protect\cs{Xnoindent} and \protect\cs{noindentX} work now again (broken in 2.0.0).}
% \changes{v2.1.3}{2015/09/05}{Change some internal code in order to provide compatibility with \LaTeX\ release of october~2015}
% \changes{v2.1.3}{2015/09/05}{Fix bug which inserted double space before paragraphed familiar notes.}
% \changes{v2.2.0}{2015/09/29}{Fix bug with combination of \protect\cs{onehalfspacing} and two columns and three columns notes typeset.}
% \changes{v2.2.0}{2015/09/29}{Fix bug with some setting command and optimization option.}
% \changes{v2.2.0}{2015/09/29}{New setting tools for endnotes: \protect\cs{Xendnumberonlyfirstinline}, \protect\cs{Xendnumberonlyfirstintwolines}, \protect\cs{Xendsymlinenum}, \protect\cs{Xendbeforenumber}, \protect\cs{Xendafterenumber}, \protect\cs{Xendbeforesymlinenum}, \protect\cs{Xendaftersymlinenum}, \protect\cs{Xendboxsymlinenum}, \protect\cs{Xendhangindent}, \protect\cs{Xendbhooklinenumber}, \protect\cs{Xendahooklinenumber}, \protect\cs{Xendbhookinplaceofnumber}, \protect\cs{Xendahookinplaceofnumber}.}
% \changes{v2.2.0}{2015/09/29}{Fix spurious space with paragraphed critical notes when using \LuaLaTeX.}
% \changes{v2.2.0}{2015/09/29}{Increase line list version number to ensure compatibility with new options of \reledpar package.}
% \changes{v2.2.1}{2015/10/05}{Compatibility with \LaTeX format 2015/10/01.}
% \changes{v2.2.2}{2015/10/09}{Fix bug in \protect\cs{sethangingsymbol}.}
% \changes{v2.2.2}{2015/10/09}{Fix bug with old version of \protect\package{etex}.}
% \hyphenation{man-u-script man-u-scripts}
% \changes{v2.3.0}{2015/10/14}{Warning message when using some setting commands inside rightside environment (deprecated behavior)}
% \changes{v2.3.0}{2015/10/14}{Disable empty lines as paragraph in stanza.}
% \changes{v2.3.0}{2015/10/14}{Fix compatibility of paragraphed footnotes with \protect\package{bidi} v17.9 and following.}
% \changes{v2.3.1}{2015/10/19}{Fix spurious space when using optional argument of \protect\cs{stanza} (introduced in v2.3.0).}
% \changes{v2.4.0}{2015/10/19}{\protect\cs{Xbhooknote} and \protect\cs{bhooknoteX} work with notes in columns.}
% \changes{v2.4.0}{2015/10/19}{Fix bug with \protect\cs{sameword} in right side.}
% \changes{v2.4.0}{2015/10/19}{Fix spurious space in two columns and three columns notes.}
% \changes{v2.4.0}{2015/10/19}{Fix bug of \protect\cs{parindentX} and \protect\cs{Xparindent} with two columns and three columns notes.}
% \changes{v2.4.0}{2015/10/19}{Fix spurious space when using optional argument of \protect{stanza} (introduced in v2.3.0).}
% \changes{v2.4.1}{2015/10/26}{Fix bug with \protect\cs{appref} and \protect\cs{apprefwithpage} (introduced in v2.4.0).}
% \changes{v2.4.1}{2015/10/26}{Fix bug with tabular environments when using \protect\package{babel} or \protect\package{polyglossia} languages that override \LaTeX\ \protect\cs{roman} command, like Greek.}
% \changes{v2.4.1}{2015/10/26}{Fix bug with tabular environments when using \protect\package{babel} or \protect\package{polyglossia} languages that override \LaTeX\ \protect\cs{roman} command, like Greek language.}
% \changes{v2.5.0}{2015/11/13}{Compatibility with new hook and tools of \protect\reledpar~2.6.0.}
% \changes{v2.5.0}{2015/11/13}{\protect\cs{lemma} can be used even when the \protect\option{nocritical} is enabled.}
% \changes{v2.5.0}{2015/11/13}{New hooks to customize page and line number appearance in endnotes.}
% \changes{v2.5.0}{2015/11/13}{New hooks: \protect\cs{Xbhookgroup} and \protect\cs{bhookgroupX}.}
% \changes{v2.5.0}{2015/11/13}{\protect\cs{appref} and \protect\cs{apprefwithpage} can take linerangesep optional argument.}
% \changes{v2.5.0}{2015/11/13}{\protect\cs{apprefwithpage} works also when \protect\option{noend} option is enabled.}
% \changes{v2.5.0}{2015/11/13}{\protect\cs{apprefwithpage} and \protect\cs{appref} print double quotation mark when the label was not defined.}
% \changes{v2.5.0}{2015/11/13}{\protect\cs{apprefwithpage} and \protect\cs{appref} work with right side crossref.}
% \changes{v2.5.0}{2015/11/13}{\protect\cs{edlabel} works now in \protect\cs{Xfootnote}.}
% \changes{v2.5.0}{2015/11/13}{Log now states `There were undefined references` when using wrong references in \protect\cs{edlineref} or \protect{edpageref}.}
% \changes{v2.5.0}{2015/11/13}{Fix spurious vertical space in \protect\env{astanza} environment (\reledpar)}
% \changes{v2.6.0}{2015/11/20}{Adds compatibility with \protect\option{innnote} and \protect\option{notenumber} options of \protect\package{indextools} package.}
% \changes{v2.6.0}{2015/11/20}{Fix bug with footnote counter in \protect\env{ledgroup} (added in v2.5.0).}
% \changes{v2.6.0}{2015/11/20}{Fix bug, introduced in v2.5.0, with footnote numbering in parallel typesetting when using \protect\package{perpage} package.}
% \changes{v2.7.0}{2015/11/29}{Warning for duplicate and undefined labels are parsable by latexmk}
% \changes{v2.7.0}{2015/11/29}{Warning for duplicate labels does not send any more a false line and page number}
% \changes{v2.7.0}{2015/11/29}{Fix bug with \protect\cs{SErefwithpage}.}
% \changes{v2.7.0}{2015/11/29}{Fix (again) bugs with footnote numbering in parallel typesetting while using \protect\env{ledgroup} environments (bug added in v2.5.0).}
% \changes{v2.7.0}{2015/11/29}{When using \protect\package{hyperref} package, add links for \protect\cs{SEref} and related, \protect\cs{appref} and related.}
% \changes{v2.7.0}{2015/11/29}{When using \protect\package{hyperref} package, add links from critical footnotes and critical endnotes to the line of text they refers}
% \changes{v2.7.0}{2015/11/29}{When using \protect\package{hyperref} package, add link in familiar footnotes between the footnote marks in the text and the footnote marks in the footnote}
% \changes{v2.7.0}{2015/11/29}{Fix bugs in compatibility with \protect\option{innote} and \protect\option{notenumber} options of \protect\package{indextools} package, when indexing outside of a \protect\env{ledgroup}.}
% \changes{v2.7.0}{2015/11/29}{New commands to make glossaries related to page and linenumber with the \protect\package{glossaries} package}
% \changes{v2.7.0}{2015/11/29}{Add dash as default page range separator for \protect\cs{SEonlypage}}
% \changes{v2.7.0}{2015/11/29}{Delete parenthesis after \protect\cs{SErefonlypage}.}
% \changes{v2.7.0}{2015/11/29}{New setting commands: \protect\cs{setSErefonlypageprefixsingle} and \protect\cs{setSErefonlypageprefixmore}}
% \changes{v2.7.0}{2015/11/29}{Debug \protect\cs{SErefonlypage} when referring to only one page.}
% \changes{v2.7.1}{2015/12/06}{Debug \protect\cs{Xbhookgroup} hooks executed on column footnote (moved to a larger group, to have indeed effect).}
% \changes{v2.7.2}{2015/12/13}{Fix problem of hyphenation when using \protect\package{hyperref} package (added in v2.7.0).}
% \title{\Macpackage \\
%      Typeset scholarly editions with \LaTeX\thanks{This file (\dtxfilename)
% has version number \fileversion, last revised \filedate.}}
%
% \author{%
% Ma\"ieul Rouquette\thanks{\texttt{maieul at maieul dot net}} \\
% {\small based on the original \protect\package{ledmac} by} \\
% Peter Wilson \\
% Herries Press \\
% {\small which was based on the original \edmac, \tabmac{} and \edstanza{} by} \\
% John Lavagnino, Dominik Wujastyk, Herbert Breger and Wayne Sullivan.
% }
%
% \date{}
%
%
% \maketitle
%
%
% \begin{abstract}
%
%  The \macpackage provides many tools in order to typeset scholarly editions.
% It is based on the \eledmac package, which was based on the \ledmac package, which was based on the \edmac \TeX\ package.
%
% It can be used in combination with \parpackage in order to typeset two texts in parallel,
% like an original text and its translation in a modern language.
%
% 
% \Macpackage provides many tools and options. Normally, they are all documented in this file.
% Also provided is a help folder, ``\href{examples/.}{examples}''. The folder contains additional examples (although not for every possible case).
% Examples starting with ``1-'' are for basic uses, those starting with ``2-'' are for advanced uses.
% 
% To report bugs or request a new feature, please go to ledmac GitHub page and click on ``New Issue'': \url{https://github.com/maieul/ledmac/issues/}.
% You must create an account on github.com to access my page (maieul/ledmac). 
% GitHub accounts are free for open-source users. You can post messages in English or in French (preferred).
%
% You can subscribe to the \macpackage mail list at:\\ \url{http://geekographie.maieul.net/146}
% \end{abstract}
%
% \renewcommand{\numberline}[1]{#1~}
% \tableofcontents
%
%
% \section{Introduction}
%
% \subsection{Aim of the package}
%
% The \macpackage\ package, together with \LaTeX, provides several
% important facilities for formatting critical editions of texts in
% a traditional manner. Major features include:
% \begin{itemize}
% \item automatic stepped line numbering, by page, section or paragraph;
% \item sub-lineation within the main series of line numbers;
% \item variant readings automatically keyed to line numbers;
% \item caters to both prose and verse;
% \item multiple series of footnotes and endnotes;
% \item block or columnar formatting of the footnotes;
% \item simple tabular material may be line numbered;
% \item indexing keyed to page and line numbers.
% \end{itemize}
%
% \Macpackage allows the scholar engaged in preparing a critical
% edition to focus attention wholly on the task of creating the
% critical text and evaluating the variant readings, text-critical
% notes and testimonia. \LaTeX{} and \Eledmac{} will take care of
% the formatting and visual correlation of all the disparate types
% of information.
%
% Apart from \macpackage there are other \LaTeX\ packages for typesetting critical editions. 
% However, the aim of \macpackage is to provide an ``all in one'' and flexible tool in the field of critical editions. 
% 
% Any suggestions for new features are welcome.
%
% This manual contains a general description of how to use \macpackage followed by 
% the complete source code and its extensive documentation (in sections~\ref{overview} and following, enumerated with Roman numerals).
% It ends with a list of actions to do when migrating from one version to other, a change history and an index to the
% source code.
% 
% You do not need to read the source code for this package in order to use it; we
% provide this code primarily for reference, and many of our 
% comments on it repeat material that is also found in earlier sections. But no documentation, 
% however thorough, can cover every question that comes up and many can be
% answered quickly by consulting the code. On a first reading,
% we suggest that you read only the general documentation in
% sections~\ref{howto}, unless you are particularly interested in the innards of \macpackage.
%
% \subsection{History}
%
% \subsubsection{\edmac}
%
% The original version of \edmac{} was \texttt{TEXTED.TEX}, written
% by John Lavagnino\index{Lavagnino, John} 
% in late 1987 and early 1988 for formatting
% critical editions of English plays.
%
% John passed these macros on to Dominik Wujastyk\index{Wujastyk, Dominik}
% who, in
% September--October 1988, added the footnote paragraphing mechanism,
% margin swapping and other changes to suit his own purposes, making the
% style more like that traditionally used for classical texts in Latin and
% Greek (e.g., the Oxford Classical Texts series). He also wrote some
% extra documentation and sent the files out to several people. This
% version of the macros was the first to be called \edmac.
%
% The present version was developed in the summer of 1990, with the
% intent of adding necessary features, streamlining and documenting
% the code, and further generalizing it to make it easily adaptable
% to the needs of editors in different disciplines.  John did most
% of the general reworking and documentation, with the financial
% assistance of the Division of the Humanities and Social Sciences,
% California Institute of Technology.  Dominik adapted the code to
% the conventions of Frank Mittelbach's\index{Mittelbach, Frank}
% \verb"doc" option, and added some documentation, multiple-column
% footnotes, cross-references, and crop marks.\footnote{This version of
% the macros was used to format the Sanskrit text in volume I of {\em
% Metarules of P\=a\d ninian Grammar\/} by Dominik Wujastyk (Groningen:
% Forsten, 1993).} A description by John and Dominik of this version of
% \edmac{} was published as `An overview of \edmac: a \PlainTeX\
% format for critical editions', \emph{TUGboat} \textit{11} (1990),
% pp.\,623--643.
%
% From 1991 through 1994, the macros continued to evolve, and were tested at a
% number of sites.  We are very grateful to all the members of the (now defunct)
% \verb"edmac@mailbase.ac.uk" discussion group who helped us with
% smoothing out the bugs and infelicities in the macros.
% Ron Whitney\index{Whitney, Ron} and our anonymous reviewer at
% the TUG were both of great help in ironing out last-minute
% wrinkles, while Ron made some important suggestions which may help
% to make future versions of \edmac{} even more efficient.
% Wayne
% Sullivan,\index{Sullivan, Wayne} in particular, provided several
% important fixes and contributions, including adapting the
% Mittelbach\slash
% Sch\"opf\index{Sch\"opf, Rainer}\index{Mittelbach, Frank} `New
% Font Selection Scheme' for use with \PlainTeX\ and \edmac.
% Another project Wayne has worked
% on is a \verb"DVI" post-processor which works with an \edmac{}
% that has been slightly modified to output \protect\cs{special}s.  This
% combination enables you to recover to some extent the text of
% each line as {\sc ascii} code, facilitating the creation of
% concordances, an {\em index verborum}, etc.
%
% As of 1994, we were pleased to be able to say that \edmac{} was
% being used for the real-life book production of several interesting
% editions, such as the Latin texts of Euclid's {\sl
% Elements},\footnote{Gerhard Brey\index{Brey, Gerhard} used \edmac{} in
% the production of Hubert L.~L.\ Busard\index{Busard, Hubert L.~L.} and
% Menso Folkerts,\index{Folkerts, Menso} {\em Robert of Chester's
% (?)\index{Chester, Robert of} Redaction of Euclid's\index{Euclid} {\em
% Elements}, the so-called Adelard II\index{Adelard II} Version}, 2 vols.,
% (Basel, Boston, Berlin: Birkh\"auser, 1992).} an edition of the letters
% of Nicolaus Copernicus,\footnote{Being prepared at the German Copernicus
% Research Institute, Munich.}\index{Copernicus, Nicolaus} Simon
% Bredon's\index{Bredon, Simon} {\em Arithmetica},\footnote{Being prepared
% by Menso Folkerts {\em et al.}, at the Institut f\"ur Geschichte der
% Naturwissenschaften in Munich.} a Latin translation by Plato of
% Tivoli\index{Plato of Tivoli} of an Arabic astrolabe
% text,\footnote{Richard Lorch,\index{Lorch, Richard} Gerhard
% Brey\index{Brey, Gerhard} {\em et al.}, at the same Institute.} a Latin
% translation of part II of the Arabic {\em Algebra\/} by Ab\=u K\=amil
% Shuj\=a' b.~Aslam,\index{Abu Kamil Shuja' b.~Aslam}\footnote{Richard
% Lorch, `Ab\=u K\=amil on the Pentagon and Decagon' in {\em Vestigia
% Mathematica}, ed.\ M. Folkerts and J. P. Hogendijk (Amsterdam, Atlanta:
% Rodopi, 1993).} the Latin {\em Rithmachia\/} of Werinher von
% Tegernsee,\footnote{Menso Folkerts, `Die {\em Rithmachia\/} des Werinher
% von Tegernsee', ibid.} a middle-Dutch romance epic on the
% Crusades,\footnote{Geert H. M. Claassens,\index{Claassens, Geert H. M.}
% {\em De Middelnederlandse Kruisvaartromans}, (Amsterdam: Schiphower en
% Brinkman, 1993).} a seventeenth-century Hungarian politico-philosophical
% tract,\footnote{Emil Hargittay, {\em Cs\'aky Istv\'an: Politica
% philosophiai Okoskod\'as-szerint val\'o rendes \'eletnek p\'eld\'aja
% (1664--1674)\/} (Budapest: Argumentum Kiad\'o, 1992).} an anonymous
% Latin compilation from Hungary entitled {\em Sermones Compilati in
% Studio Gererali Quinqeecclesiensi in Regno Ungarie},\footnote{Being
% produced, as was the previous book, by Gyula Mayer\index{Mayer, Gyula}
% in Budapest.} the collected letters and papers of
% Leibniz,\index{Leibniz}\footnote{Leibniz, {\em S\"amtliche Schriften und
% Briefe}, series {\sc I, III, VII,} being edited by Dr.\ H.\ 
% Breger\index{Breger, Herbert}, Dr.~N. G\"adeke\index{G\"adeke, Nora} and
% others at the Leibniz-Archiv, Nieders\"achsische Landesbibliothek, Hannover.
% (see \url{http://www.nlb-hannover.de/Leibniz})}
% Theodosius's\index{Theodosius} {\em Spherics}, the German {\em
% Algorismus} of Sacrobosco,\index{Sacrobosco} the Sanskrit text of the
% {\em K\={a}\'{s}ik\={a}\-v\d{r}tti\/} of V\={a}mana\index{Vamana} and
% Jay\={a}ditya\index{Jayaditya},\footnote{Being prepared at Poona and
% Lausanne Universities.} and the English texts of Thomas
% Middleton's\index{Middleton, Thomas} collected works.
%
% \subsubsection{\ledmac}
%
%
%
%    Version 1.0 of \tabmac{} was released by 
% Herbert Breger\index{Breger, Herbert} in October
% 1996. This added the capability for typesetting tabular material.
%
%    Version 0.01 of \edstanza{} was released by 
% Wayne Sullivan~\index{Sullivan, Wayne}
% in June 1992, to help a colleague with typesetting Irish verse.
%
%    In March 2003 Peter Wilson started an attempt to port \edmac{}
% from TeX to LaTeX. The starting point was \edmac{} version 3.16 
% as documented on 19 July 1994 (available from CTAN). In August 2003
% the \tabmac{} functions were added; the starting point for these
% being version 1.0 of Ocober 1996. The \edstanza{} (v0.01) functions were
% added in February 2004. Sidenotes and regular footnotes in numbered
% text were added in April 2004. This port was called \ledmac (\LaTeX\ \edmac).
% 
% Since July~2011, ledmac is maintained by Ma\"ieul Rouquette. It is increasingly
% powerful and flexible, but it also has become increasingly divergent from the original TeX macro.
%
% \subsubsection{\eledmac}
% Important changes were put in version 1.0, to make \ledmac more easily extensible (see \reff{displayoptions}).
% These changes can trigger small problems with the old customization. That is why a new name was selected: \eledmac (extended \ledmac). 
%
% To migrate from \ledmac to \eledmac, please read \reff{migration}.
%
% \subsubsection{\reledmac}
% 
% \eledmac has facilitated the creation of customized critical editions.
% However, the changes made to allow such customization were made in a non-systematic way.
% Many deprecated commands were kept and many technical `debts' were accumulated, 
% hindering the future evolution of the package.
%
% For these reasons, Maïeul Rouquette decided on a spring cleaning of the code.
% As some commands name were changed, the resulting compatibility was broken (a little).
% 
% A new name was selected: \reledmac (extended renewed \eledmac). 
% To migrate from \eledmac to \reledmac, please read \reff{migratereledmac}.
% 
% \subsection{List of works edited with (r)(e)ledmac}
% A collaborative list of works edited with (r)(e)ledmac is available at
% \url{https://www.zotero.org/groups/critical_editions_typeset_with_edmac_ledmac_and_eledmac/items}.
% Please add your own edition made with (r)(e)ledmac.
%
% \section{How the package works}\label{howto}
% The \macpackage package is a three-pass package like \LaTeX\ itself. 
% Although your textual apparatus and line
% numbers will be printed on the first run, it takes two more
% passes through \LaTeX\ to be sure that everything is correctly
% placed. If you make any subsequent changes altering the number
% of lines or notes, the input file may similarly
% require three passes to get everything to the right place.
% \Macpackage will tell you that you need to make more runs when it detects changes,
% but it does not expend the labor to check this thoroughly. If you have
% problems with a line or two misnumbered at the top of a page, try
% running \LaTeX\ once or twice more.
%
% A file may mix \emph{numbered} and \emph{unnumbered} text.
%
% Numbered text is printed with marginal line numbers and can include
% footnotes and endnotes that are referenced to those line numbers:
% this is how you will want to print the text that you are editing.
%
% Unnumbered text is not printed with line numbers, and you can't
% use \macpackage's note commands with it: this is appropriate for
% introductions and other material added by the editor around the
% edited text.
%
%
% \section{Options}
% The package can be loaded with a number of global options which are listed here. There are two types of options:
% 1) options which provide specific features, and, 2) options which optimize the package's performance.
% It is advisable for you to read the relevant parts of the handbook, before reading about the first type of option 
% (specific features), but you can look at the second type (package optimization) in your first reading of the manual.
% 
% \subsection{Specific features}
% \begin{description}
% \item[draft] underlines lemmas in the main text.
% \item[eledmac-compat] help to migrate from \eledmac to \reledmac (see \reff{eledmac-compat}).
% \item[nopbinverse] prevents page breaks inside verses.
% \item[noquotation] by default, the quotation environment is redefined inside numbered text. You can disable this redefinition with \verb|noquotation| (see \reff{noquotation}).
% \item[parapparatus] by default, the apparatus cannot contain paragraph breaks; this option enables paragraphing inside the apparatus.
% \item[xindy] and \verb|xindy+hyperref| are for selecting \verb+xindy+ as the index processor (\reff{xindy}).
% \item[widthliketwocolumns] set the width of the text printed in a single column to be the same as the width of the text printed in two parallel columns with \parpackage. This is useful when alternating between normal and parallel typesetting.
% \end{description}
% 
% \subsection{Optimizing package performance}\label{option:performance}
% \begin{description}
% \item[nocritical] disables tools for critical footnotes (\protect\cs{Afootnote}, \protect\cs{Bfootnote} etc.). If you do not need critical footnotes, this option lets \eledmac\ run faster. 
% It will also preserve room for other packages.
% \item[noeledsec] disables tools for \protect\cs{eledsection} and related commands (\reff{eledsection}).
% \item[noend] disables tools for endnotes (\protect\cs{Aendnote}, \protect\cs{Bendnote} etc.). If you do not need endnotes, this option lets \macpackage\ run faster. 
% It will also preserve room for other packages.
% \item[nofamiliar] disables tools for familiar footnotes (\protect\cs{footnoteA}, \protect\cs{footnoteB} etc.). If you do not need familiar footnotes, this option lets \eledmac\ run faster.
% It will also preserve room for other packages.
% \item[noledgroup] \macpackage allows use of a series of critical notes and a new series of normal notes inside minipage and ledgroup environments (see \reff{ledgroup}). However, such features use up computer memory, at the expense of other processing needs. So if you do not need this feature, use \verb+noledgroup+ option. This should make \macpackage faster.
% \item[series] \Macpackage defines five levels of notes: A, B, C, D, E.
% Using all these levels consumes memory space and processing speed.
% This is why, if your work does not require the entire A--E series, you can narrow down the available number of series.
% For example, if you only need A and B series, call the package with \verb+series={A,B}+ option.
% \end{description}
% 
% \section{Text lines and paragraphs numbering}
% 
% \subsection{Text lines numbering}
% \DescribeMacro{\beginnumbering}
% \DescribeMacro{\endnumbering}
% Each section of numbered text must be preceded by \protect\cs{beginnumbering} 
% and followed by \protect\cs{endnumbering}, as in the following example. \\
% \egstart
% \begin{verbatim}
% \beginnumbering
% Text
% \endnumbering
% \end{verbatim}
% \egend
%
% The \protect\cs{beginnumbering} macro resets the line number to zero,
% reads an auxiliary file called \meta{jobname}.\file{nn} (where
% \meta{jobname} is the name of the main input file for this job,
% and \file{nn} is 1 for the first numbered section, 2 for
% the second section, and so on), and then creates a new version of
% this auxiliary file to collect information during this run. The
% first instance of \protect\cs{beginnumbering} also opens a file called
% \meta{jobname}\file{.<series>end} to receive the text of the endnotes.
% \protect\cs{endnumbering} closes the \meta{jobname}.\file{nn} file.
%
% If the line numbering of a text is to be continuous from start to end,
% then the whole text will be typed between one pair of
% \protect\cs{beginnumbering} and \protect\cs{endnumbering} commands. But your text
% will most often contain chapter or other divisions marking sections
% that should be independently numbered, and these will be appropriate
% places to begin new numbered sections. 
%
% \Macpackage has to read and store in memory
% a certain amount of information about the entire section when it
% encounters a \protect\cs{beginnumbering} command, so it speeds up the
% processing and reduces memory use when a text is divided into a larger
% number of sections (at the expense of multiplying the number of
% external files that are generated).
%
% \subsection{Paragraphs}
% \subsubsection{Basics}
% \DescribeMacro{\pstart}
% \DescribeMacro{\pend}
% Within a numbered section, each paragraph of numbered text must
% be marked using the \protect\cs{pstart} and \protect\cs{pend} commands like this: \\
% \egstart
% \begin{verbatim} 
% \pstart
% Paragraph of text. 
% \pend
% \end{verbatim}
% \egend
%
% Text that appears within a numbered section but is not marked with
% \protect\cs{pstart} and \protect\cs{pend} will not be numbered.
%
% The following example shows the proper section and paragraph
% markup and the kind of output that would typically be generated:
% \egstart
% \begin{verbatim}
% \beginnumbering
% \pstart
% This is a sample paragraph, with
% lines numbered automatically.
% \pend
%
% \pstart
% This paragraph too has its
% lines automatically numbered.
% \pend
%
% The lines of this paragraph are
% not numbered.
%
% \pstart
% And here the numbering begins
% again.
% \pend
% \endnumbering
% \end{verbatim}
% \egend
%
% \subsubsection{Automatically producing  \protect\cs{pstart} \ldots{} \protect\cs{pend}}
% \DescribeMacro{\autopar}\label{autopar}
% You can use \protect\cs{autopar} to avoid the nuisance of this paragraph markup
% and still have every paragraph automatically numbered.  The scope of the
% \protect\cs{autopar} command needs to be limited by keeping it within a group, as
% follows:
% \egstart
% \begin{verbatim}
% \begingroup
%   \beginnumbering
%   \autopar
%
%   A paragraph of numbered text.
%
%   Another paragraph of numbered
%   text.
%
%   \endnumbering
% \endgroup
% \end{verbatim}
% \egend
%
% \protect\cs{autopar} fails, however, on paragraphs that start with a
% \verb"{" or with any other command that starts a new group before it
% generates any text. Such paragraphs need to be started explicitly,
% before the new group is opened,
% using \protect\cs{indent}, \protect\cs{noindent}, or \protect\cs{leavevmode}, or using
% \protect\cs{pstart} itself.\footnote{For a detailed study of the
% reasons for this restriction, see Barbara Beeton, `Initiation
% rites', \textit{TUGboat} \textbf{12} (1991),
% pp.\,257--258.\protect\index{Beeton, Barbara Ann Neuhaus Friend}}
%
% \subsubsection{Content before specific \protect\cs{pstart} and after specific \protect\cs{pend}}\label{pstart:optionalarg}
% \changes{v1.12.0}{2014/08/05}{Optional arguments for \protect\cs{pstart} and \protect\cs{pend}.}
% Both \protect\cs{pstart} and \protect\cs{pend} can take a optional argument in brackets. 
% Its content will be printed before the beginning of \protect\cs{pstart} / after the end of  \protect\cs{pend} instead of the argument of \protect\cs{AtEveryPstart} / \protect\cs{AtEveryPend}.
% If you need to start a \protect\cs{pstart} with brackets, or to add brackets after a \protect\cs{pend}, just add a \protect\cs{relax} between \protect\cs{pstart}\,\ldots\,\protect\cs{pend} and the brackets.
%
% This feature is also useful when typesetting verses (see \reff{verse}) or \parpackage\ (see \reff{eledpar}).
%
% A \protect\cs{noindent} is automatically added before this argument.
%
% \subsubsection{Content before every \protect\cs{pstart} and after every \protect\cs{pend}}
% \changes{v1.15.0}{2015/01/12}{New commands \protect\cs{AtEveryPstart} and \protect\cs{AtEveryPend}.}
% \label{AtEveryPstart} \DescribeMacro{\AtEveryPstart}\DescribeMacro{\AtEveryPend}
% You can use both \protect\cs{AtEveryPstart} and \protect\cs{AtEveryPend}.
% Their arguments will be printed before every \protect\cs{pstart} begins / after  every \protect\cs{pend} ends.
%
% \subsubsection{Numbering paragraphs (\protect\cs{pstart})}
% \changes{v0.12.0}{2011/10/01}{Possibility to number \protect\cs{pstart}.}
% It is possible to insert a number at every \protect\cs{pstart} command; you must use the \DescribeMacro{\numberpstarttrue}\protect\cs{numberpstarttrue} command to have it. You can stop the numbering with \DescribeMacro{\numberpstartfalse}\protect\cs{numberpstartfalse}. 
% You can redefine the command \DescribeMacro{\thepstart}\protect\cs{thepstart} to change style. 
% You can change the value of the pstart number by using \emph{after} \protect\cs{beginnumbering}:
% \begin{verbatim}
% \setcounter{numberpstart}{value}
% \end{verbatim}
% On each \protect\cs{beginnumbering} the numbering restarts.
% \changes{v0.15.0}{2012/06/11}{Possibility to print \protect\cs{pstart} number inside.}
%
% \DescribeMacro{\sidepstartnumtrue}
% With the \protect\cs{sidepstartnumtrue} command, the number of \protect\cs{pstart} will be printed inside.
% In this case, the line number will be not printed.
%
% \changes{v1.1.0}{2012/09/25}{Add \protect\cs{labelpstarttrue}.}
% \DescribeMacro{\labelpstarttrue}
% With the \protect\cs{labelpstarttrue} command, a \protect\cs{label} added just after a \protect\cs{pstart} will refer to the number of this pstart.
% 
% \subsubsection{Languages written in Right to Left}
% If you use languages written right to left with \LuaLaTeX\ or \XeLaTeX,
% you must switch text direction \emph{before} the \protect\cs{pstart} command. 
% 
% \subsubsection{Memory limits}
% \textbf{This paragraph is kept for history, but the problems described below should not appear with the most recent version of \LaTeX.}
%
% \label{pause}
% \DescribeMacro{\pausenumbering}
% \DescribeMacro{\resumenumbering}
% \Macpackage stores a lot of information about line numbers and
% footnotes in memory as it goes through a numbered section.  But
% at the end of such a section, it empties its memory out, so to
% speak.  If your text has a very long numbered section it is
% possible that your \LaTeX\ may reach its memory limit.  There are
% two solutions to this.
% 
% The first solution is to get a larger \LaTeX\ with increased memory.  
% 
% The second solution is to
% split your long section into several smaller ones.  The trouble
% with this is that your line numbering will start again at zero
% with each new section.  To avoid this problem, we provide
% \protect\cs{pausenumbering} and \protect\cs{resumenumbering} which are just
% like \protect\cs{endnumbering} \ldots\ \protect\cs{beginnumbering}, except that
% they arrange for your line numbering to continue across the break.
% Use \protect\cs{pausenumbering} only between numbered paragraphs:
% \egstart
% \begin{verbatim}
% \beginnumbering
% \pstart
% Paragraph of text.
% \pend
% \pausenumbering
%
% \resumenumbering
% \pstart
% Another paragraph.
% \pend
% \endnumbering
% \end{verbatim}
% \egend
% 
% We have defined these commands as two macros, in case you find it necessary
% to insert text between numbered sections without disturbing the
% line numbering.  But if you are really just using these macros to
% save memory, you might as well type,
% \egstart
% \begin{verbatim}
% \newcommand{\memorybreak}{\pausenumbering\resumenumbering}
% \end{verbatim}
% and type \protect\cs{memorybreak} between the relevant \protect\cs{pend} and
% \protect\cs{pstart}.
% \egend
%
% \subsection{Lineation commands}
% 
% \subsubsection{Disabling lineation}
% \DescribeMacro{\numberlinefalse} \DescribeMacro{\numberlinetrue}
% Line numbering can be disabled with  \protect\cs{numberlinefalse}. It can be enabled again with \protect\cs{numberlinetrue}.
% 
% \subsubsection{Setting lineation start and step}
% \DescribeMacro{\firstlinenum}
% \DescribeMacro{\linenumincrement}
%  By default, \macpackage numbers every 5th line. There are two counters that control this behaviour:
% \verb?firstlinenum? and \verb?linenumincrement?. They can be changed using \protect\cs{firstlinenum}\marg{num} and
% \protect\cs{linenumincrement}\marg{num}. \protect\cs{firstlinenum} specifies the first 
% line that will have a printed number, and \protect\cs{linenumincrement} is 
% the difference between succesive numbered lines. For example, to start printing numbers at the first line
% and to have every other line numbered: \\
% \verb?\firstlinenum{1} \linenumincrement{2}?
%
% \DescribeMacro{\firstsublinenum}
% \DescribeMacro{\sublinenumincrement}
% There are similar commands, \protect\cs{firstsublinenum}\marg{num} and 
% \protect\cs{sublinenumincrement}\marg{num} for controlling sub-line numbering.
%
% \DescribeMacro{\linenumberlist}
% You can define \protect\cs{linenumberlist} to specify a non-uniform distribution
% of printed line numbers. For example: \\
% \verb?\def\linenumberlist{1,2,3,5,7,11,13,17,19,23,29}? \\
% to have numbers printed on prime-numbered lines only. There must be
% no spaces within the definition which consists of comma-separated integer
% numbers. The numbers can be in any order but it is easier to read if you
% put them in numerical order. Either omitting the definition of
% \protect\cs{linenumberlist} or following the empty definition \\
% \verb?\def\linenumberlist{}? \\
% the standard numbering sequence is applied. The standard sequence
% is that specified by the combination of the \verb+firstlinenum+,
% \verb+linenumincrement+, \verb+firstsublinenum+ and
% \verb+linenumincrement+ counter values.
%
% \subsubsection{Setting lineation reset}
% \DescribeMacro{\lineation}
% \changes{v1.0.0}{2012/09/15}{Debug in lineation command}
% Lines can be numbered either by page, by pstart or by section; you specify
% this using the \protect\cs{lineation}\marg{arg}
% macro, where \meta{arg} is either
% \texttt{page}, \texttt{pstart} or \texttt{section}. 

% You may only use this command at places
% where numbering is not in effect; you can't change the lineation system
% within a section. You can change it between sections: they don't all
% have to use the same lineation system. 
% The package's standard setting is \verb"\lineation{section}". If the lineation is by pstart, the pstart number will be printed before the line number in the notes.
%
% \subsubsection{Setting line number margin}
% \DescribeMacro{\linenummargin}
% The command \protect\cs{linenummargin}\marg{location} specifies the margin
% where the line (or pstart) numbers will be printed. The permissable values
% for \meta{location} are \texttt{left}, \texttt{right}, \texttt{inner}, or \texttt{outer}: 
% for example, \verb"\linenummargin{inner}".
% The package's default setting is \\
% \verb"\linenummargin{left}" \\
% to typeset the numbers in the left hand margin. 
% You can change this whenever you're not in the  middle of 
% making a paragraph. 
%
% More precisely, the value of 
% \protect\cs{linenummargin} used is the value in effect at the \protect\cs{pend}
% of a numbered paragraph. Apart from an initial setting for
% \protect\cs{linenummargin}, only change \protect\cs{linenummargin} after a \protect\cs{pend},
% whereupon it will apply to all following numbered paragraphs, until
% changed again (changing it between a \protect\cs{pstart} and \protect\cs{pend}
% pair will apply the change to all of the current paragraph).
%
% \subsubsection{Other settings}
%
% \DescribeMacro{\leftlinenum}
% \DescribeMacro{\rightlinenum}
% \DescribeMacro{\linenumsep}
% When a marginal line number is to be printed, there are many ways to display it.
% You can redefine \protect\cs{leftlinenum} and \protect\cs{rightlinenum} to
% change the way marginal line numbers are printed in the
% left and right margins respectively; the initial
% versions print the number in font \protect\cs{numlabfont} (described
% below) at a distance \protect\cs{linenumsep} (initially set to one pica)
% from the text.
%
% \subsection{Changing the line numbers}
%
% Normally, line numbering starts at 1 for the first line of
% a section and increments by one for each line thereafter. There
% are various common modifications of this system and the
% commands described here allow you to put such modifications
% into effect.
%
% \subsubsection{Sublineation}
% \DescribeMacro{\startsub}
% \DescribeMacro{\endsub}
% You insert the \protect\cs{startsub} and \protect\cs{endsub} commands in your text
% to turn sub-lineation on and off. For example, stage directions in plays are often numbered with sub-line
% numbers: as line $10.1$, $10.2$, $10.3$, rather than as $11$, $12$, and $13$.
% Titles and headings are sometimes numbered with sub-line numbers as well.
%
% When sub-lineation is in effect, the line number counter is
% frozen and the sub-line counter advances instead. If one of these
% commands appears in the middle of a line, it doesn't take effect
% until the next line; in other words, a line is counted as a line
% or sub-line depending on what it started out as, even if it 
% changes in the middle.
%
% You can change the separator between line number and subline number or using \cs{Xsublinesep} without any option argument (\reff{Xsublinesep} or using \cs{Xsublinesepside}. But in the second case, it will change the separator only for line number in side, not for the footnotes. 
% \subsubsection{Locking lineation}
% \DescribeMacro{\startlock}
% \DescribeMacro{\endlock}
% The \protect\cs{startlock} command, used in running text, locks the
% line number at its current value, until you insert \protect\cs{endlock}.
% It can tell for itself whether you are in a patch of line or
% sub-line numbering. One use for line-number locking is in printing
% poetry: there the line numbers should be those of verse lines
% rather than of printed lines, even when a verse line requires several
% printed lines. But in this case you may use the \cs{stanza} mechanism, see \reff{verse}.
%
% \DescribeMacro{\lockdisp}
% When line-number locking is used,
% several printed lines may have the same line number, and you have to
% specify whether you want the number attached to the first printed
% line or the last, or whether you just want the number printed by
% them all, assuming that the settings of the previous parameters
% requires the display of a line number for this line.
% You specify your preference using \protect\cs{lockdisp}\marg{arg}; its
% argument is a word, either \verb+first+, \verb+last+, or \verb+all+.
% The package initially sets this as \protect\cs{lockdisp}\verb+{first}+.
%
% \subsubsection{Setting and changing line number}
% \DescribeMacro{\setline}
% \DescribeMacro{\advanceline}
% In some cases you may want to modify the line numbers that are
% automatically calculated: if you are printing only fragments
% of a work but want to print line numbers appropriate to a complete
% version, for example. The \protect\cs{setline}\marg{num} and 
% \protect\cs{advanceline}\marg{num} commands
% may be used to change the current line's number (or the sub-line
% number, if sub-lineation is currently on). They change both the
% marginal line numbers and the line numbers passed to the notes.
% \protect\cs{setline} takes one argument, the value to which you want
% the line number set; it must be $0$ or greater. \protect\cs{advanceline}
% takes one argument, an amount that should be added to the current
% line number; it may be positive or negative.
%
% \DescribeMacro{\setlinenum}
% The \protect\cs{setline} and \protect\cs{advanceline} macros should only be used
% within a \protect\cs{pstart}\ldots\protect\cs{pend} group. The \protect\cs{setlinenum}\marg{num}
% command can be used outside such a group, for example between
% a \protect\cs{pend} and a \protect\cs{pstart}. It sets the line number 
% to \meta{num}. 
% It has no effect if used within a \protect\cs{pstart}\ldots\protect\cs{pend} group.
%
% \subsubsection{Line number style}
% \DescribeMacro{\linenumberstyle}
% \DescribeMacro{\sublinenumberstyle}
%  Line numbers are normally printed as arabic numbers. You can
% use \protect\cs{linenumberstyle}\marg{style} to change the numbering style.
% \meta{style} must be one of:
% \begin{description}
% \item[\texttt{Alph}] Uppercase letters (A \ldots\ Z).
% \item[\texttt{alph}] Lowercase letters (a \ldots\ z).
% \item[\texttt{arabic}] Arabic numerals (1, 2, \ldots)
% \item[\texttt{Roman}] Uppercase Roman numerals (I, II, \ldots)
% \item[\texttt{roman}] Lowercase Roman numerals (i, ii, \ldots)
% \end{description}
% Note that with the \texttt{Alph} or \texttt{alph} styles, `numbers'
% must be between 1 and 26 inclusive.
%
% Similarly \protect\cs{sublinenumberstyle}\marg{style} can be used to change
% the numbering style of sub-line numbers, which is normally arabic numerals.
%
% \subsubsection{Skipping and hidding number}
% \DescribeMacro{\skipnumbering}
% When inserted into a numbered line the macro \protect\cs{skipnumbering} causes
% the numbering of that particular line to be skipped; that is, the line 
% number is unchanged and no line number will be printed.
% Note that if you use it in \protect\cs{stanza}, you must call it at the beginning of the verse.
%
% \DescribeMacro{\hidenumbering}
% \changes{v1.21.0}{2015/04/13}{Add \protect\cs{hidenumbering}}
% When inserted into a numbered line, the macro \protect\cs{hidenumbering} causes
% the number for that particular line to be hidden; namely, no line number will print.
% Note that if you use it in \protect\cs{stanza}, you must call it at the beginning of the verse.
% 
% \subsubsection{Execute code at each line}
% \Macpackage provides an advanced feature for users.
% \DescribeMacro{\dolinehook}\DescribeMacro{\doinsidelinehook}
% The argument passed to \protect\cs{dolinehook}\marg{arg} will be executed 
% before slicing a new line in the paragraph.
% The argument passed to \protect\cs{doinsidelinehook}\marg{arg} will be executed before printing a new line.
% In many cases, the latter is more useful than the former.
% The file \href{examples/2-line_numbers_in_header.tex}{examples/2-line\_numbers\_in\_header.tex} provides
% an example for printing the first and last line numbers of a page in the header.
%
% \section{Apparatus commands}
%
% \subsection{Terminology}
% We call ``critical notes'' notes which refer to both a lemma, that is a part of text and a line number. 
% Critical notes are subdivided in critical footnotes and critical endnotes.
%
% We call ``familiar notes'' notes which refer to a footnote mark in the main text.
%
% \Macpackage manages many series of notes of each category.
% A series of notes is identified by an uppercase letter.
% When the series letter is at the \emph{beginning} of a command name, it refers to a critical footnote.
% When the series letter is at the \emph{end} of a command name, it refers to a familiar footnote.
% 
% So :
% \begin{itemize}
%  \item \protect\cs{Afootnote} is a critical footnote of the series A.
%  \item \protect\cs{Bendnote} is a critical endnote of the series B.
%  \item \protect\cs{footnoteC} is a familiar footnote of the series C.
% \end{itemize}
% \subsection{Critical notes}
% \subsubsection{The lemma}
% \DescribeMacro{\edtext}
% Within numbered paragraphs, all footnotes and endnotes are generated
% by the \protect\cs{edtext} macro:
% \begin{verse}
% \protect\cs{edtext}\marg{lemma}\marg{commands}
% \end{verse}
%
%
% The \meta{lemma} argument is the lemma in the main text: \protect\cs{edtext}
% both prints this as part of the text, and makes it available to the
% \meta{commands} you specify to generate notes. 
%
% For example:
% \egstart
% \begin{verbatim}
% I am happy : 
% I saw my friend \edtext{Smith}{
% \Afootnote{Jones C, D.}}
% on Tuesday.
% \end{verbatim}
% \egmid
% \beginnumbering
% \firstlinenum{1}
% \linenumincrement{1}
% \pstart
% I am happy : I saw my friend \edtext{Smith}{
% \Afootnote{Jones C, D.}}
% on Tuesday.
% \pend
% \endnumbering
% \egend
%
% The lemma \verb?Smith? is printed as part of this sentence in
% the text, and is also made available to the footnote
% that specifies a variant, \verb?Jones C, D?. The footnote macro
% is supplied with the line number at which the lemma appears
% in the main text.
%
% The \meta{lemma} may contain further \protect\cs{edtext} commands.
%  Nesting makes
% it possible to print an explanatory note on a long passage together with
% notes on variants for individual words within the passage. For
% example:
% \egstart
% \begin{verbatim}
% I am happy : \edtext{I saw my friend
%   \edtext{Smith}{\Afootnote{Jones
%   C, D.}} on Tuesday.}{
%   \Bfootnote{The date was
%   July 16, 1954.}
% }
% \end{verbatim}
% \egmid
% \beginnumbering
% \firstlinenum{1}
% \linenumincrement{1}
% \pstart
% I am happy : \edtext{I saw my friend
%   \edtext{Smith}{\Afootnote{Jones
%   C, D.}} on Tuesday.}{
%   \Bfootnote{The date was
%   July 16, 1954.}
% }
% \pend
% \endnumbering
% \egend
%
% However, \protect\cs{edtext} cannot handle overlapping but unnested
% notes---for example, one note covering lines 10--15, and another
% covering 12--18; an \protect\cs{edtext} that starts in the \meta{lemma}
% argument of another \protect\cs{edtext} must end there, too. (The
% \protect\cs{lemma} and \protect\cs{linenum} commands may be used to
% generate overlapping notes if necessary.)
%
% \subsubsection{Footnotes}
%
% The second argument of the \protect\cs{edtext} macro, \meta{commands},
% may contain a series of subsidiary commands that generate
% various kinds of notes.
%
% \DescribeMacro{\Afootnote}
% \DescribeMacro{\Bfootnote}
% \DescribeMacro{\Cfootnote}
% \DescribeMacro{\Dfootnote}
% \DescribeMacro{\Efootnote}
% Five separate series of the footnotes are maintained; each macro
% takes one argument like \protect\cs{Afootnote}\marg{text}. 
% When all of the six
% are used, the \texttt{A} notes appear in a layer just below the main
% text, followed by the rest in turn, down to the \texttt{E} notes at
% the bottom.  
% These are the main macros that you will use to construct
% the critical apparatus of your text. 
%
% If you need more series of critical notes, please look at \reff{newseries}.
%
%\changes{v1.0.0}{2012/09/15}{Options nonum and nosep in \protect\cs{Xfootnote}.}
%\changes{v1.20.0}{2015/03/22}{Options fulllines in \protect\cs{Xfootnote}.}\label{Xfootnoteopt}
% An optional argument can be added before the text of the footnote. Its value is a comma-separated list of options. 
% \label{fulllines}The available options are:
% \begin{itemize}
% \item \verb|fulllines| to disable \protect\cs{Xtwolines} and \protect\cs{Xmorethantwolines} features for this note (cf. \reff{Xtwolines}).
% \item \verb|nonum| to disable line numbering for this note.
% \item \verb|nosep| to disable the lemma separator for this note. 
% \item \verb|linerangesep=|\meta{c} to change to \meta{c} the separator between start line and end line for this particular note.
% \end{itemize}
%
% Example: \protect\cs{Afootnote}\verb|[nonum]|\marg{text}.
%
% \subsubsection{Endnotes}
% \DescribeMacro{\Aendnote}
% \DescribeMacro{\Bendnote}
% \DescribeMacro{\Cendnote}
% \DescribeMacro{\Dendnote}
% \DescribeMacro{\Eendnote}
% The package also maintains five separate series of endnotes.
%
% If you do not need the endnotes facility, you should use \verb+noend+ option when loading \macpackage.
%
% The mechanism is similar to the one for footnotes: each macro takes one or more optional arguments and one single argument, like:\\
% \protect\cs{Aendnote}\oarg{option}\marg{text}.
% 
% \label{Xendnoteopt}\meta{option} can contain a comma-separated list of values. Allowed values are: 
% \begin{itemize}
% \item \verb|fulllines| to disable \protect\cs{Xendtwolines} and \protect\cs{Xendmorethantwolines} features for this particular note (cf. \reff{Xtwolines}).
% \item \verb+nonum+ to disable line number for this particular note.
% \item \verb|nosep| to disable the lemma separator for this particular note. 
% \item \verb|linerangesep=|\meta{c} to change to \meta{c} the separator between start line and end line for this particular note.
% \end{itemize}
%
% \DescribeMacro{\doendnotes}\label{doendnotes} Normally, endnotes are not printed: you must use the
% \protect\cs{doendnotes}\marg{s}, where \meta{s} is the letter of the series to be printed. Put this command where you want the corresponding set of endnotes printed.
% In this case, all the endnotes of the \meta{s} series are printed, for all numbered sections.
% \changes{v1.22.0}{2015/04/25}{Add \protect\cs{doendnotesbysection} command.}
% \changes{v1.22.0}{2015/04/25}{Standardize endnotes handbook.}
% 
% \DescribeMacro{\doendnotesbysection} However, you may want to print the endnotes of one given series covering the first numbered section, then the endnotes of another given series covering the first numbered section, then the endnotes of the first given series covering the second numbered section, then the endnotes of the second given series covering the second numbered section, and so forth.
% In this case, use \protect\cs{doendnotesbysection}\marg{s}.
% For each value of \meta{s}, the first call of the command will print the notes for the first series, the second call will print the notes for the second series etc.
% For example, do:
% \begin{verbatim}
% \section{Endnotes}
% \subsection{First text}
% \doendnotesbysection{A}
% \doendnotesbysection{B}
% \subsection{Second text}
% \doendnotesbysection{A}
% \doendnotesbysection{B}
% \end{verbatim}
% 
% Note that by default inside endnotes no separator is used between the lemma and the content. 
% However you can use the \protect\cs{Xendlemmaseparator} macro to define one (\reff{Xendlemmaseparator}).
%
% As endnotes may be printed at any point in the document they always
% start with the page number where they are called. 
%
% \subsubsection{Paragraph in critical apparatus}
% By default, no paragraph can be made in the notes of critical apparatus. 
% You can allow it by adding the options \verb+parapparatus+ when loading the package :
% \begin{verbatim}
% \usepackage[parapparatus]{eledmac}
% \end{verbatim}
%
% Note that you \emph{cannot} use paragraphs (e.g. blank lines or \cs{par}) inside of notes, when they are set to \texttt{paragraph} arrangement!
%
% \subsubsection{Change lemma and line number}
% \DescribeMacro{\lemma}
% \changes{v1.0.0}{2012/09/15}{\protect\cs{lemma} can contain commands.}
% If you want to change the lemma that gets passed to the notes, you
% can do this by using \protect\cs{lemma}\marg{alternative} within the 
% second argument to \protect\cs{edtext} and before the note commands.
% The most common use of this command is to abbreviate the lemma that's
% printed in the notes. For example:
% \egstart
% \begin{verbatim}
% I am happy :
% \edtext{I saw my friend
%   \edtext{Smith}{\Afootnote{Jones
%   C, D.}} on Tuesday.}
%   {\lemma{I \dots\ Tuesday.}
%   \Bfootnote{The date was
%   July 16, 1954.}
% }
% \end{verbatim}
% \egmid
% \beginnumbering
% \pstart
% I am happy :
% \edtext{I saw my friend
%   \edtext{Smith}{\Afootnote{Jones
%   C, D.}} on Tuesday.}
%   {\lemma{I \dots\ Tuesday.}
%   \Bfootnote{The date was
%   July 16, 1954.}
% }
% \pend
% \endnumbering
% \egend
%
% \DescribeMacro{\linenum}
% \label{linenum}
% You can use \protect\cs{linenum}\marg{arg} to change the line numbers passed to
% the notes. \meta{arg} actually consist of seven parameters: the page,
% line, and sub-line number for the start of the lemma; the same
% three numbers for the end of the lemma; and the font specifier
% for the lemma. As the argument to \protect\cs{linenum}, you specify
% those seven parameters in that order, separated by vertical bars
% (the \verb"|" character). I.e.\\
% .\verb+\linenum{+\meta{start page}\verb+|+\meta{s. line}\verb+|+\meta{s. sub-l.}\verb+|+\meta{end p.}\verb+|+\meta{e. l.}\verb+|+\meta{e. sub-l.}\verb+|+\meta{font}\verb+|+\verb+}+\\
% However, you can retain the value
% computed by \macpackage for any number by simply omitting it; and
% you can omit a sequence of vertical bars at the end of the
% argument.  For example, \verb"\linenum{|||23}" changes only the ending page number of the current lemma.
%
% This command does not change the marginal line numbers in any way;
% it just changes the numbers passed to the notes. Its use comes in
% situations that \protect\cs{edtext} has trouble dealing with for
% whatever reason. If you need notes for overlapping passages that
% aren't nested, for instance, you can use \protect\cs{lemma} and
% \protect\cs{linenum} to generate such notes despite the limitations of
% \protect\cs{edtext}.  If the \meta{lemma} argument to \protect\cs{edtext} is
% extremely long, you may run out of memory; here again you can
% specify a note with an abbreviated lemma using \protect\cs{lemma} and
% \protect\cs{linenum}. The numbers used in \protect\cs{linenum} need not be
% entered manually; you can use the `\texttt{x-}' symbolic cross-referencing
% commands below (\reff{crossref}) to compute them
% automatically.
%
% Similarly, being able to manually change the lemma's font specifier
% in the notes might be important if you were using multiple scripts or
% languages. The form of the font specifier is three
% separate codes separated by \verb"/" characters, giving the family,
% series, and shape codes as defined within NFSS.
%
% \subsubsection{Changing the names of  commands for critical apparatus}
%
% The commands for generating the apparatus have been given
% rather bland names, because editors in different fields have
% widely divergent notions of what sort of notes are required, where
% they should be printed, and what they should be called. But this
% does not mean you have to type \protect\cs{Afootnote} when you would rather
% type something you find more meaningful, like \protect\cs{variant}. 
%
% We recommend that you create a series of such aliases and use them
% instead of the names chosen here; all you have to do is put commands
% of this form at the start of your file:\footnote{We use \protect\cs{newcommand} and \protect\cs{newcommandx} instead of classical \protect\cs{let} command because the edtabular environments have to modify the notes definition, and we need to use the newest definition of notes. Read the handbook of \protect\package{xargs} to know more about \protect\cs{newcommandx}.}
% \begin{verbatim}
% \newcommandx{\variant}[2][1,usedefault]{\Afootnote[#1]{#2}}
% \newcommandx{\explanatory}[2][1,usedefault]{\Bfootnote[#1]{#2}}
% \newcommand{\trivial}[1]{\Aendnote{#1}}
% \newcommandx{\testimonia}[2][1,usedefault]{\Cfootnote[#1]{#2}}
% \end{verbatim}
%
%
% \subsection{Disambiguation of identical words in the apparatus}
% \changes{v1.15.0}{2015/01/12}{New tools to prevent ambiguous references in lemma}
% \changes{v1.23.0}{2015/05/18}{Fix bug with \protect\cs{sameword} when the same lemma is used for multiple notes or for nested \protect\cs{edtext}s.}
% \changes{v1.23.0}{2015/05/18}{Optional argument of \protect\cs{sameword} can be a comma-separated list of \protect\cs{edtext} depth.}
% \changes{v1.23.0}{2015/05/18}{Fix bug with \protect\cs{sameword} when the lemma overlaps multiple line.}
% Sometimes, the same word occurs twice (or more) in the same line.
% \Macpackage provides  tools to disambiguate references in the critical notes.
% The lemma will be followed by a reference number if a given word occurs more that once in the same line.
% 
% \subsubsection{Basic use}
% \DescribeMacro{\sameword} To use this tool, you have to mark every occurrence of the potentially ambiguous term with the \protect\cs{sameword} command:
%   \begin{verbatim}
%   Lupus \sameword{aut} canis \edtext{\sameword{aut}}{\Afootnote{et}} felix
%   \end{verbatim} 
% In this example, \verb+aut+ will be followed, in the critical note, by the exponent \verb+2+ if it is printed in the same line as the first \verb+aut+, but it will not if it is printed in a different line. The number is printed only after the second run.
%
% \subsubsection{Notes about input encoding with UTF-8 processor}
%
% If you use UTF-8 processor, like \XeLaTeX\ or \LuaLaTeX, there should not be any glitches. 
% However, pay attention to how characters are encoded. Similar-looking characters may be represented differently in unicode numbering.
%
% For instance, in Greek, ``ᾳ'' has two possible unicode numbers:
% \begin{itemize}
%  \item GREEK SMALL LETTER ALPHA (U+03B1) + COMBINING GREEK YPOGEGRAMMENI (U+0345)
%  \item GREEK SMALL LETTER ALPHA WITH YPOGEGRAMMENI (U+1FB3)
% \end{itemize}
%
% Which unicode number you use depends, many times, on your keyboard configuration (the computer-input system).
%
%  Inside \macpackage, the \protect\cs{sameword} command considers these two unicodes (code positions) as different characters. If you use only one unicode number consistently, the distinction will probably make no difference to how your text looks, but \protect\cs{sameword} will process the text inaccurately, based on the unicode numbers. To prevent this, do the following:
% \begin{itemize}
%   \item If you use \XeLaTeX, add this line in your preamble:\verb+ \XeTeXinputnormalization 1+.
%   \item If you use \LuaLaTeX, use the \protect\package{uninormalize} package of Michal Hoftich\footnote{\url{https://github.com/michal-h21/uninormalize}.} with the \verb+buffer+ option set to true.
% \end{itemize} 
%
% With these tools, \XeTeX\ / \LuaTeX\ will dynamicaly normalize unicode input when reading the file. 
% Consequently, you will have no problems with the \protect\cs{sameword} command.
% \subsubsection{Use with \protect\cs{lemma} command}
% If you use the \protect\cs{lemma} command, \macpackage\ cannot know to which occurence of \cs{sameword} in the first argument of \cs{edtext} a word marked with \cs{sameword} in \cs{lemma} should refer.
% 
% For example in the following example:
% \begin{verbatim}
%    some thing
%       \edtext{\sameword{sw}
%               and other \sameword{sw}
%               and again \sameword{sw}
%               it is all}%
%       {\lemma{\sameword{sw} \ldots all}\Afootnote{critical note}}.%
% \end{verbatim}
% \Macpackage\ cannot know if the ``sw'' in \protect\cs{lemma} refers to the word after ``thing'', after ``other'', or after ``again''.
% 
% Consequently, you must tell \macpackage to which instance of \protect\cs{sameword} you are referring in the first argument of \protect\cs{edtext}:
% \begin{itemize}
%   \item In the content of \protect\cs{lemma}, use \protect\cs{sameword} with no optional argument.
%   \item In the first argument of \protect\cs{edtext}, use \protect\cs{sameword} with the optional argument \oarg{X}. \meta{X} is the depth of the \protect\cs{edtext} where the \protect\cs{lemma} is used.
% So if the \protect\cs{lemma} is called in a \protect\cs{edtext} inside another \protect\cs{edtext}, \meta{X} is equal to \verb+2+.
% If the \protect\cs{lemma} is called in a \protect\cs{edtext} ``of first level'', \meta{X} is equal to \verb|1|. If the lemma is called in both 1 and 2 \protect\cs{edtext} depth, \meta{X} is \verb+1,2+. If that word is referenced in the lemma of every \protect\cs{edtext} depth, \meta{X} can also be set to \verb+inlemma+.
% \end{itemize} 
% Note that only words that are actually referenced in a \protect\cs{lemma} need the optional argument. Therefore, the first \protect\cs{sameword} in the example above should have ``1'' as its optional argument, to be referenced correctly in the lemma.
%
% Note also that the \meta{X} does not refer to the level where the \protect\cs{sameword} occurs, but to the level of the \protect\cs{lemma} that refers to that \protect\cs{sameword}. For example: 
% \begin{verbatim}
%    \edtext{some \edtext{\sameword[1]{word}}{\Afootnote{om. M}}
%            and other \sameword{word}
%            and again a \sameword{word}
%            it is all}%
%    }{\lemma{some \sameword{word} \ldots all}\Afootnote{critical note}}.%
% \end{verbatim}
% Here the \protect\cs{sameword} occurs in an \protect\cs{edtext} of level 2,
% but since it is referenced by \protect\cs{lemma} on level 1, it has ``1'' in the optional argument.
%
% In the following example figure, each framed box represents an \protect\cs{edtext} level.
% Each number is an occurrence of \protect\cs{sameword}. After a framed box,
% the text in superscript represents the content of \protect\cs{lemma} for that \protect\cs{edtext} level.
% The text in subscript at the right of a number represents the content of the optional argument of \protect\cs{sameword}.
% 
%\fbox{%
%  \fbox{%
%	 $1_{\mathrm{inlemma}}$ 
%	 \fbox{$2$}
%	 $3_2$%
%       }\textsuperscript{$1$\ldots$3$}%
%     4
%     $5_1$ 
%   }\textsuperscript{1\ldots5}
%
% The \protect\cs{sameword} number~3 is called in a \protect\cs{lemma} related to an \protect\cs{edtext} of level~2.
% It must be marked by ``2''.
%
% The \protect\cs{sameword} number~5 is called in a \protect\cs{lemma} related to \protect\cs{edtext} of level~1. It must be marked by ``1''.
%
% The \protect\cs{sameword} number is called in two \protect\cs{lemma}s: one related to a \protect\cs{edtext} of level~1, the other related to \protect\cs{edtext} of level~2.
% It must be marked by ``1,2''.
% However, as \protect\cs{lemma} is called only in level~1 and~2, ``1,2'' could replaced by ``inlemma''.
%
% The \protect\cs{sameword} number ``2'' is in the first argument of a \protect\cs{edtext} of level~3, but it has no \protect\cs{lemma}-command, so there is no need to mark it.
% 
%
% 
% \subsubsection{Customizing}
% \DescribeMacro{\showwordrank}You can redefine the \protect\cs{showwordrank} macro to change the way the number is printed. The default value is
% \begin{verbatim}
%\newcommand{\showwordrank}[2]{%
%  #1\textsuperscript{#2}%
%}
% \end{verbatim}
%
% \subsection{Familiar notes} \label{sec:desc:familiar}
% 
%
% \subsubsection{Basic use}
% \DescribeMacro{\footnoteA}
% \DescribeMacro{\footnoteB}
% \DescribeMacro{\footnoteC}
% \DescribeMacro{\footnoteD}
% \DescribeMacro{\footnoteE}
%    As well as the standard \LaTeX\ footnotes generated via \protect\cs{footnote},
% the package also provides
% five series of additional footnotes called \protect\cs{footnoteA} through
% \protect\cs{footnoteE}. These have the familiar marker in the text, and 
% the marked text at the foot of the page can be formated using
% any of the styles described for the critical footnotes. Note that
% the `regular' footnotes have the series letter at the end of the macro
% name whereas the critical footnotes have the series letter at the start
% of the name.
%
% 
% \subsubsection{Customizing mark}
% \DescribeMacro{\thefootnoteA}
% \DescribeMacro{\bodyfootmarkA}
% \DescribeMacro{\footfootmarkA}
% Each series uses a set of macros for
% styling the marks. The mark numbering scheme of series A is defined by the
% \protect\cs{thefootnoteA} macro; the default is: \\
% \verb?\renewcommand*{\thefootnoteA}{\arabic{footnoteA}}?\\
% The appearance of the mark in the text is controlled by \protect\cs{bodyfootmarkA}
% which is defined as: \\
% \verb?\newcommand*{\bodyfootmarkA}{%? \\
% \verb?  \hbox{\textsuperscript{\normalfont\@nameuse{@thefnmarkA}}}}? \\
% The command \protect\cs{footfootmarkA} controls the appearance of the mark at the
% start of the footnote text. It is defined as: \\
% \verb?\newcommand*{\footfootmarkA}{\textsuperscript{\@nameuse{@thefnmarkA}}}?
%
%    There are similar command triples for the other series.
% \subsubsection{Separator for multiple footnotes}
%   The \protect\package{footmisc} package~\cite{FOOTMISC} by Robin 
% Fairbairns\index{Fairbairns, Robin} has an option whereby 
% sequential footnote
% marks in the text can be separated by 
% commas\textsuperscript{3,4} like so.
% As a convenience \reledmac\ provides this automatically.
%
% \DescribeMacro{\multfootsep}
% \protect\cs{multfootsep} is used as the separator between footnote markers.
% Its default definition is: \\
% \verb?\providecommand*{\multfootsep}{\textsuperscript{\normalfont,}}? \\
% and can be changed if necessary.
%
% \subsection{Changing series}
% \subsubsection{Create a new series}\label{newseries}
%
% If you need more than five series of critical footnotes, you can
% create extra series, using \protect\cs{newseries} command. For example, to create F and G series \protect\cs{newseries}\verb+{G,H}+.
% 
% \subsubsection{Delete series}
% As the number of series which are defined increases, \macpackage gets slower.
% If you do not need all of the six standard series (A--E),
% you can load the package with the \verb+series+ option. 
% For example if you need only series~A and~B, use:
% \begin{verbatim}
% \usepackage[series={A,B}]{eledmac}
% \end{verbatim}
% \subsubsection{Series order}
% The default series order is the one called with the \verb+series+ option of the package, or, if this option is not used, A, B, C, D, E. 
% Series order determines footnotes order.
%
% \DescribeMacro{\seriesatbegin}\DescribeMacro{\seriesatend} However in some specific cases, you need to change the series order at some point inside the document.
% You can use \protect\cs{seriesatbegin}\marg{s} to pull up a given series \meta{s} to the beginning, or \protect\cs{seriesatend}\marg{s} to push it down to the end.
% \subsection{Position of critical and familiar footnotes}
% \DescribeMacro{\fnpos}\DescribeMacro{\mpfnpos}
% There is a historical incoherence in \protect\package{(r)(e)ledmac}. The familiar footnotes are
% before the critical footnotes in a normal page, but after in a minipage or in a ledgroup.
% However, it is possible to change the relative position of both types of footnotes.
% If you want to have familiar footnotes after critical footnotes in a normal page, use:
% \begin{verbatim}
% \fnpos{critical-familiar}
% \end{verbatim}
% Or, if you want a minipage or ledgroup to have critical footnotes after familiar footnotes, use:
% \begin{verbatim}
% \mpfnpos{familiar-critical}
% \end{verbatim}
% \section{Critical apparatus appearance}
% \label{displayoptions}
% \changes{v1.0.0}{2012/09/15}{New generic commands to customize footnote display.}
% Some commands can be used to change the display of the footnotes.
% All can have an optional argument \oarg{s}, which is the letter of the series\,---\,or
% a list of letters separated by comma\,---\,depending on which option is applied.
% If the optional argument is omitted or empty, the setting will apply to the entire series.
%

% When a length, noted \meta{l}, is used, it can be stretchable: \verb|a plus b minus c|. The final length |m| is calculated by \LaTeX{} to have: $a-c \leq m \leq a+b$. If you use some relative unit\footnote{Like \verb|em| which is the width of an `m' in a given font.}, it will be relative to font size of the footnote, except for commands concerning the place kept by the notes --- including blank space. 
%
% There is also name convention:
% \begin{itemize}
%  \item Names prefixed by \verb+X+ are for setting of critical footnotes.
%  \item Names prefixed by \verb+Xend+ are for setting of critical endnotes.
%  \item  Names suffixed by \verb+X+ are for setting of familiar footnotes.
% \end{itemize}
%
% \subsection{Notes arrangement in a  series}\label{arrangement}
%
% \DescribeMacro{\Xarrangement}
% \DescribeMacro{\arrangementX}
% By default, all footnotes are formatted as a series of separate
% paragraphs in one column. Three other formats are also
% available for notes.
% 
% Use \protect\cs{Xarrangement}\oarg{s}\marg{a} to change the arrangement of the \meta{s} series of critical footnotes and \protect\cs{arrangementX}\oarg{s}\marg{a} to change the arrangement of  the \meta{s} series of familiar footnotes.
% 
% The value of \meta{a} can be one of the following
% \begin{itemize}
% \item \verb+paragraph+ formats
% all the footnotes of a series as a single paragraph. If you use this arrangement, you are strongly encouraged to read \reff{paragraphednotes:advanced}.
 
% \item \verb+twocol+ formats them as separate paragraphs,
% but in two columns;
% \item \verb+threecol+, in three columns. 
% \item \verb+normal+, restore normal arrangement.
% \end{itemize}
%
%    You should set up the page layout parameters, and in particular the
% \protect\cs{baselineskip} of the footnotes, before you call this  
% macro because its action depends on these; 
% too much or too little space will be allotted for the notes on
% the page if these macros use the wrong
% values.
%
% \label{nobreaks}Note that you \emph{cannot} use paragraphs (e.g. blank lines or
% \cs{par}) or line breaks (\cs{break} or \cs{linebreak} or \cs{newline} etc.)
% inside of notes, when they are
% set to \texttt{paragraph} arrangement!
%
% The notes arrangement must be called after having defined the document geometry setting.
% If you must change geometry setting inside your document, do not forget to call note arrangement again.
% 
% \protect\cs{hsize} has been set for the pages that use
% this series of notes; otherwise \TeX\ will try to put too
% many or too few of these notes on each page. If you need to
% change the \protect\cs{hsize} within the document, call
% the arrangement macro again afterwards to take account of the new
% value.  
% \subsection{Control line number printing}
% \subsubsection{Print line number only at first time}
% \DescribeMacro{\Xnumberonlyfirstinline}
% \changes{v1.0.1}{2012/09/16}{Correction on \protect\cs{Xnumberonlyfirstinline} with lineation by pstart or by page.}
% By default, the line number is printed in every note. If you want to print it only the first time for a given line number
% (i.e., one time for line 1, one time for line 2, etc.), you can use \protect\cs{Xnumberonlyfirstinline}\oarg{s}. 
%
% Use \protect\cs{Xnumberonlyfirstinline}\oarg{s}\verb+[false]+ to disable this. \meta{s} can be empty if you want to disable it for every series.
%
% \changes{v1.1.0}{2012/09/25}{Add \protect\cs{Xnumberonlyfirstintwolines}}
% \DescribeMacro{\Xnumberonlyfirstintwolines}
% Suppose you have a lemma on line~2 and a lemma between line~2 and line~3. 
% With \protect\cs{Xnumberonlyfirstinline}, the second lemma is considered to be on the same line as the first lemma.
% But if  you use both \protect\cs{Xnumberonlyfirstinline}\oarg{s} and \protect\cs{Xnumberonlyfirstintwolines}\oarg{s}, a distinction is made.
% Use the command \linebreak\protect\cs{Xnumberonlyfirstintwolines}\oarg{s}\verb+[false]+
% to disable this. \meta{s} can be empty if you want to disable it for every series.
% 
% 
% \DescribeMacro{\Xsymlinenum}
% For setting a particular symbol in place of the line number, you can use \protect\cs{Xsymlinenum}\oarg{s}\marg{symbol} in combination with \protect\cs{Xnumberonlyfirstinline}\oarg{s}. From the second lemma of the same line, the symbol will be used instead of the line number. Note that any command called in \meta{symbol} must be robust. Use \protect\cs{robustify} to robustify a non-robust command.
%
% \DescribeMacro{\Xendnumberonlyfirstinline}
% \DescribeMacro{\Xendnumberonlyfirstintwolines}
% \DescribeMacro{\Xendsymlinenum}
% For endnotes, \cs{Xendnumberonlyfirstinline}; \cs{Xendnumberonlyfirstintwolines} and \cs{Xendsymlinenum} are the equivalents of
% \\ \cs{Xnumberonlyfirstinline}; \cs{Xnumberonlyfirstintwolines} and \cs{Xsymlinenum}.
% \subsubsection{Arbitrary text before line number}
% \DescribeMacro{\Xbeforenumber}
% \cs{Xbeforenumber}\oarg{s}\marg{txt} allow to insert \meta{txt} before the line number, only when the line number is printed, so taking into accout \cs{Xnumberonlyfirstinline} and similar.
% \subsubsection{Separator for line range}\label{linerangeseparator}
% \changes{v2.4.0}{2015/10/19}{New hooks:  \protect\cs{Xlinerangeseparator} and \protect\cs{Xendlinerangeseparator}.}
% \changes{v2.4.0}{2015/10/19}{Option linerangesep for critical footnotes and endnotes.}
% \DescribeMacro{\Xlinerangeseparator}
% \DescribeMacro{\Xendlinerangeseparator}
% By default, the separator between the begin line and the end line in a lines' range is an endash in a normal font (\verb+\textnormal{--}+).
% You can change it for critical footnotes with \cs{Xlinerangeseparator}\oarg{s}\marg{text}, and with \cs{Xendlinerangeseparator}\oarg{s}\marg{text} for critical endnotes.
%
% \subsubsection{Abbreviate line range} 
% \changes{v1.20.0}{2015/03/22}{Add \protect\cs{Xtwolines} and \protect\cs{Xmorethantwolines} hooks}
% \label{Xtwolines}
% \DescribeMacro{\Xtwolines}\DescribeMacro{\Xmorethantwolines}
% If a lemma is printed on two subsequent lines, \macpackage\ will print the first and the last line numbers. 
% Instead of this, it is also possible to print an abbreviation which stands for ``line 1 and subsequent line(s)''.
%
% To achieve this, use \protect\cs{Xtwolines}\oarg{s}\marg{text} and \protect\cs{Xmorethantwolines}\oarg{s}\marg{text}. 
% The \meta{text} argument of \protect\cs{Xtwolines} will be printed if the lemma is on two lines, and the \meta{text} argument of \protect\cs{Xmorethantwolines} will be printed if the lemma is on three or more lines. 
% For example:
% \begin{verbatim}
% \Xtwolines{sq.}
% \Xmorethantwolines{sqq.}
% \end{verbatim}
% will print ``1sq.'' for a lemma which falls on lines 1--2 and ``1sqq.'' for a lemma which falls on lines 1--4.
%
% If you use \protect\cs{Xtwolines} without setting \protect\cs{Xmorethantwolines}, the \meta{text} argument
% of \protect\cs{Xtwolines} will be used for lemmas which fall on three or more lines.
%
% However, if you want to use a short form (when the lemma overlaps two lines, but not more than two), use \protect\cs{Xtwolinesbutnotmore}\oarg{series}.
%
% It is possible to disable this again with \protect\cs{Xtwolinesbutnotmore}\oarg{series}\verb+[false]+.
%
% When you use lineation by page, the final page number, if different from the initial page number,  
% will not be printed, because the final page number is included in the \protect\cs{Xendtwolines} symbol.
% 
% \DescribeMacro{\Xtwolinesonlyinsamepage}
% However, you can force print the final page number with\\ 
% \protect\cs{Xtwolinesonlyinsamepage}\oarg{series}.
% 
% Use \protect\cs{Xtwolinesonlyinsamepage}\oarg{series}\verb+[false]+ to disable this.
%
% You can disable \protect\cs{Xtwolines} and related for a specific note by using the `[fulllines]` argument in the note macro cf.~\reff{fulllines}. 
%
% \label{Xendtwolines}\changes{v1.21.0}{2015/04/13}{Add \protect\cs{Xendtwolines}, \protect\cs{Xendmorethantwolines}, \protect\cs{Xendtwolinesbutnotmore} and \protect\cs{Xendtwolinesonlyinsamepage}.}
% \DescribeMacro{\Xendtwolines}\DescribeMacro{\Xendmorethantwolines}\DescribeMacro{\Xendtwolinesbutnotmore}
% For endnotes, use these macros: 
% \protect\cs{Xendtwolines}; \protect\cs{Xendmorethantwolines}; \linebreak \protect\cs{Xendtwolinesbutnotmore};\\
% \protect\cs{Xendtwolinesonlyinsamepage}  instead of \protect\cs{Xtwolines}; \protect\cs{Xmorethantwolines};\\
% \protect\cs{Xtwolinesbutnotmore}; \protect\cs{Xtwolinesonlyinsamepage}.
%
% \subsubsection{Disable line number}
% \DescribeMacro{\Xnonumber}
% You can use \protect\cs{Xnonumber}\oarg{s} if you do not want to have the line number in a footnote. To cancel it, use \protect\cs{Xnonumber}\oarg{s}\verb+[false]+.
% \DescribeMacro{\Xendnonumber} \protect\cs{Xendnonumber}\oarg{s} is the same for endnote. 
%
% \subsubsection{Printing pstart number}
% \changes{v1.1.0}{2012/09/25}{Add \protect\cs{Xpstart} and \protect\cs{Xonlypstart}}
% \changes{v1.18.0}{2015/02/23}{Add \protect\cs{Xpstarteverytime}}
% \changes{v1.18.0}{2015/02/23}{Debug \protect\cs{Xonlypstart} when using \protect\cs{Xnumberonlyfirstinline} and the current line number differs from the previous.}
% \DescribeMacro{\Xpstart}
% You can use \protect\cs{Xpstart}\oarg{s} if you want to print the pstart number in the footnote, before the line and subline number. 
% Use \protect\cs{Xpstart}\oarg{s}\verb+[false]+ to disable this. \meta{s} can be empty if you want to disable it for every series.
% Note that when you change the lineation system, the option is automatically switched :
% \begin{itemize}
%    \item If you use lineation by pstart, the option is enabled.
%    \item If you use lineation by section or by page, the option is disabled.
% \end{itemize}
%
% \DescribeMacro{\Xpstarteverytime}
% By default, the pstart number is printed only in the part of text where you have called \protect\cs{numberpstarttrue}.
% We don't know why you would like to print the pstart number in the notes and not in the main text. 
% However, if you want to do it, you can call  \protect\cs{Xpstarteverytime}\oarg{s}. 
% In this case, the pstart number will be printed every time in footnote.
%
% \DescribeMacro{\Xonlypstart}
% In combination with \protect\cs{Xpstart}, you can use \protect\cs{Xonlypstart}\oarg{s} if you want to print only the pstart number in the footnote, and not the line and subline number.
% Use \protect\cs{Xonlypstart}\oarg{s}\verb+[false]+ disable this. \meta{s} can be empty, if you want to disable it for every series.
%
% \subsubsection{Printing stanza number}
% 
% \DescribeMacro{\Xstanza}\label{Xstanza}
% You can use \cs{Xstanza}\oarg{s} if you want to print the stanza number in the footnote, before the line and subline number. 
% Use \cs{Xstanza}\oarg{s}\verb+[false]+ to disable this. \meta{s} can be empty if you want to disable it for every series.
% 
% Of course the stanza number is printed only when you use \cs{numberstanza}
%
% \DescribeMacro{\Xstanzaseparator}
%
% When using \cs{Xstanza}, you can use \cs{Xstanzaseparator}\oarg{s}\marg{text} to print \meta{text} after the stanza number.
% Default value is empty.
%
% \subsubsection{Separator between line and subline numbers}\label{Xsublinesep}
% \DescribeMacro{\Xsublinesep}
% \cs{Xsublinesep}\oarg{s}\marg{txt} changes the separator between line and subline in footnotes. 
%
% \textbf{Employed without optional argument, it also change separator in side number}.
% 
% \DescribeMacro{\Xendsublinesep}
% \cs{Xendsublinesep}\oarg{s}\marg{txt} does the same thing for endnotes. 
%
% \textbf{However, it does not change anything for the separator in side number. Use \cs{Xsublinesep} without optional argument or \cs{Xsublinesepside}\marg{txt} to do it.}
%
% The default value is \verb+\textnormal{.}+.
% \subsubsection{Space around number}
% \DescribeMacro{\Xbeforenumber}
% With \protect\cs{Xbeforenumber}\oarg{s}\marg{l}, you can add some space before the line number in a footnote. If the line number is not printed, the space is not either. The default value is 0~pt.
%
% \DescribeMacro{\Xafternumber}
% With \protect\cs{Xafternumber}\oarg{s}\marg{l} you can add some space after the line number in a footnote. If the line number is not printed, the space is not either. The default value is 0.5~em.
%
% \DescribeMacro{\Xendbeforenumber}\DescribeMacro{Xendafterenumber}
% \cs{Xendbeforenumber} and \cs{Xendafterenumber} are the equivalents of \cs{Xbeforenumber} and \cs{afterenumber} for endnotes.
%
%\changes{v1.4.3}{2012/12/18}{Add \protect\cs{Xnonbreakableafternumber}.}
%\DescribeMacro{\Xnonbreakableafternumber}
% By default, the space defined by \protect\cs{Xafternumber} is breakable.
% With \protect\cs{Xnonbreakableafternumber}\oarg{s} it becomes nonbreakable.
% Use \protect\cs{Xnonbreakableafternumber}\oarg{s}\verb+[false]+ to disable this. \meta{s} can be empty if you want to disable it for every series.
%
% \subsubsection{Space around line symbol}
% \DescribeMacro{\Xbeforesymlinenum} 
% With \protect\cs{Xbeforesymlinenum}\oarg{s}\marg{l} you can add some space before the line symbol in a footnote. The default value is value set by \protect\cs{Xbeforenumber}.
% 
% \DescribeMacro{\Xaftersymlinenum} 
% With \protect\cs{Xaftersymlinenum}\oarg{s}\marg{l} you can add some space after the line symbol in a footnote. The default value is value set by \protect\cs{Xafternumber}.
%
% \DescribeMacro{\Xendbeforesymlinenum}
% \DescribeMacro{\Xendaftersymlinenum}
% \cs{Xendbeforesymlinenum} and \cs{Xendaftersymlinenum} are the equivalents of \cs{Xbeforesymlinenum} and \cs{Xaftersymlinenum} for the endnotes.
%
% \subsubsection{Space in place of number}
% \DescribeMacro{\Xinplaceofnumber}
% If no number or symbolic line number is printed, you can add a space, with \cs{Xinplaceofnumber}\oarg{s}\marg{l}. The default value is 1~em. 
%
% \DescribeMacro{\Xendinplaceofnumber} \cs{Xendinplaceofnumber}\oarg{s}\marg{l} is the same, for critical endnotes. 
% \subsubsection{Boxing line number and line symbol}
% \DescribeMacro{\Xboxlinenum}
% It could be useful to put the line number inside a fixed box: the content of the note will be printed after this box. 
% You can use \protect\cs{Xboxlinenum}\oarg{s}\marg{l} to do that.
% To subsequently disable this feature, use \protect\cs{Xboxlinenum} with length equal to 0~pt.
% One use of this feature is to print line number in a column, and the note in an other column:
% \begin{verbatim}
%\Xhangindent{1em}
%\Xafternumber{0em}
%\Xboxlinenum{1em}
% \end{verbatim}
%
% \DescribeMacro{\Xboxsymlinenum}
% \protect\cs{Xboxsymlinenum}\oarg{s}\marg{l} is the same as \protect\cs{Xboxlinenum} but for the line number symbol.
%
% \DescribeMacro{\Xendboxsymlinenum}
% \protect\cs{Xendboxsymlinenum}\oarg{s}\marg{l} is the same as \protect\cs{Xboxsymlinenum} but for endnotes.
% 
% \changes{v1.23.0}{2015/05/18}{Add \protect\cs{Xboxlinenumalign} and \protect\cs{Xendboxlinenumalign}.}
% \DescribeMacro{\Xboxlinenumalign}
% If you put line number in box, it will be aligned left inside the box.
% However, you can change it using  \protect\cs{Xboxlinenumalign}\oarg{s}\marg{text} where \meta{text} can be the following:
% \begin{description}
%  \item[L] to align left (default value);
%  \item[R] to align right;
%  \item[C] to center.
% \end{description}
% 
% \changes{v1.23.0}{2015/05/18}{Add \protect\cs{Xboxstartlinenum}, \protect\cs{Xendboxstartlinenum}, \protect\cs{Xboxendlinenum}, \protect\cs{Xendboxendlinenum}.}
% When using \protect\cs{Xboxlinenum}, \macpackage put all the line number description in the same box. That is, the same box will contain: the start line number, the dash, and either the end line number or the range symbol (like \verb+ff.+).
% However, it is possible to box them in two different boxes.
% \begin{itemize}
%  \item \protect\cs{Xboxstartlinenum}\oarg{s}\marg{l} will box the start line number in a box of length \meta{l}. The content will be put at the right of the box.
%  \item \protect\cs{Xboxendlinenum}\oarg{s}\marg{l} will box the dash plus the end line number  or the range symbol in a box  of length \meta{l}. The content will be put at the left of the box.
% \end{itemize}
% 
% With these two commands, it is possible to horizontaly align the dash of line number when using critical notes, to obtain something like:
% \begin{verbatim}
%   1 
%  12-23
%  24ff.
% \end{verbatim}
% \DescribeMacro{\Xendboxlinenum}
% \DescribeMacro{\Xendboxlinenumalign}
% \DescribeMacro{\Xendboxstartlinenumalign}
% \DescribeMacro{\Xendboxendlinenumalign}
% \changes{v1.20.0}{2015/03/22}{Add \protect\cs{Xendboxlinenum}}
% \protect\cs{Xendboxlinenum}\oarg{s}\marg{l}, \protect\cs{Xendboxlinenumalign}\oarg{s}\marg{text},  \protect\cs{Xendboxstartlinenum}\oarg{s}\marg{l},  \protect\cs{Xendboxendlinenum}\oarg{s}\marg{l} are the same as, respectively, \protect\cs{Xboxlinenum} and \protect\cs{Xboxlinenumalign}, \protect\cs{Xboxstartlinenum}, \protect\cs{Xboxendlinenum} except in endnotes.
%
%
% \subsection{For endnotes}\label{pagelineendnotes}
% \DescribeMacro{\Xendbeforepagenumber}
% \cs{Xendbeforepagenumber}\oarg{s}\marg{text} defines the text before the page number in endnotes. Default value is \verb+p.+ (``p'' followed by a dot).
%
% \DescribeMacro{\Xendafterpagenumber}
% \cs{Xendafterpagenumber}\oarg{s}\marg{text} defines the text after the page number in endnotes. Default value is \verb+) + (open parenthesis followed by a single space). 
% \DescribeMacro{\Xendlineprefixsingle}
% \cs{Xendlineprefixsingle}\oarg{s}\marg{text} defines the text before the line number in endnotes, when there is only one line. Default value is empty.
% \DescribeMacro{\Xendlineprefixmore}
% \cs{Xendlineprefixmore}\oarg{s}\marg{text} defines the text before the line number in endnotes, when there is more than one line. Default value is empty. If you don't define it, use the value defined by \cs{Xendlineprefixsingle}.
% \subsection{Arbitrary code around line number}
% \DescribeMacro{\Xendbhooklinenumber}
% \cs{Xendbhooklinenumber}\oarg{s}\marg{code} is used to execute code before line number in endnotes. The code is executed before the \cs{Xendbeforelinenumber} space  and before the \cs{Xendnotenumfont} font setting.
%
% \DescribeMacro{\Xendahooklinenumber}
% \cs{Xendahooklinenumber}\oarg{s}\marg{code} is used to execute code after line number in endnotes. 
% The code is executed after the \cs{Xendafternumber} space.
% 
% 
%
% \DescribeMacro{\Xendbhookinplaceofnumber}
% \cs{Xendbhookinplaceofnumber}\oarg{s}\marg{code} is used to execute code before space or symbol which replace line number in endnotes. The code is executed before the \cs{Xendbeforesymlinenum} space  and before the \cs{Xendnotenumfont} font setting.
%
% \DescribeMacro{\Xendahookinplaceofnumber}
% \cs{Xendahookinplaceofnumber}\oarg{s}\marg{code} is used to execute code after space or symbol which replace line number in endnotes.
% The code is executed after the \cs{Xendaftersymlinenum} space.
%\subsection{Separator between the lemma and the note}
% \subsubsection{For footnotes}
% \DescribeMacro{\Xlemmaseparator}
% By default, in a footnote, the separator between the  lemma and the note is a right bracket (\protect\cs{rbracket})\footnote{For \protect\package{polyglossia}, when the lemma is RTL, the bracket automatically switches to a left bracket.}. You can use \protect\cs{Xlemmaseparator}\oarg{s}\marg{Xlemmaseparator} to change it. The optional argument can be used to specify the series in which it is used. Note that there is a non-breakable space between the lemma and the separator, but a \textbf{breakable} space between the separator and the following text.
%
% \DescribeMacro{\Xbeforelemmaseparator}
% Using \protect\cs{Xbeforelemmaseparator}\oarg{s}\marg{l} you can add some space between lemma and separator. If your lemma separator is empty, this space won't be printed. The default value is 0~em.
%
% \DescribeMacro{\Xafterlemmaseparator}
%  Using \protect\cs{Xafterlemmaseparator}\oarg{s}\marg{l} you can add some space between separator and note. If your lemma separator is empty, this space will not be printed. The default value is 0.5~em.
%
% \DescribeMacro{\Xnolemmaseparator}
% You can suppress the lemma separator, using \protect\cs{Xnolemmaseparator}\oarg{s}, which is simply a alias of \protect\cs{Xlemmaseparator}\oarg{s}\verb|{}|.
%
% \DescribeMacro{\Xinplaceoflemmaseparator}
% With \protect\cs{Xinplaceoflemmaseparator}\oarg{s}\marg{l} you can add a space if no lemma separator is printed. The default value is 1~em. 
%
% 
% \subsubsection{For endnotes}\label{Xendlemmaseparator}
% \changes{v1.22.0}{2015/04/25}{Add option for lemma separator inside endnotes}
% \DescribeMacro{\Xendlemmaseparator}
% By default, there is no separator inside endnotes between the lemma and the content of the note. You can use \protect\cs{Xendlemmaseparator}\oarg{s}\marg{Xendlemmaseparator} to change this. The optional argument can be used to specify the series in which it is used. 
% A common value of \meta{Xendlemmaseparator} is \cs{rbracket}.
%
% Note that there is a non-breakable space between the lemma and the separator, but a \textbf{breakable} space between the separator and the following text.
%
% \DescribeMacro{\Xendbeforelemmaseparator}
% Using \protect\cs{Xendbeforelemmaseparator}\oarg{s}\marg{l} you can add some space between the lemma and the separator. If your lemma separator is empty, this space won't be printed. The default value is 0~em.
%
% \DescribeMacro{\Xendafterlemmaseparator}
%  Using \protect\cs{Xendafterlemmaseparator}\oarg{s}\marg{l} you can add some space between the separator and the content of the note. If your lemma separator is empty, this space won't be printed. The default value is 0.5~em.
%
%
% \DescribeMacro{\Xendinplaceoflemmaseparator}
% With \protect\cs{Xendinplaceoflemmaseparator}\oarg{s}\marg{l} you can add some space if you chose to remove the lemma separator. The default value is 0.5~em. 
%
%
% \subsection{Font style}
% \subsubsection{For line number}
% \DescribeMacro{\Xnotenumfont}
% \protect\cs{Xnotenumfont}\oarg{s}\marg{command} is used to change the font style for line numbers in critical footnotes ;  
% \meta{command} must be one (or more) switching command, like \protect\cs{bfseries}.
%
% \DescribeMacro{\Xendnotenumfont}
% \protect\cs{Xendnotenumfont}\oarg{s}\marg{command} is used to change the font style for line numbers in critical footnotes. 
% \meta{command} must be one (or more) switching command, like \protect\cs{bfseries}.
%
% \DescribeMacro{\notenumfontX}
% \protect\cs{notenumfontX}\oarg{s}\marg{command} is used to change the font style for note numbers in familiar footnotes.  
% \meta{command} must be one (or more) switching command, like \protect\cs{bfseries}.
%

% \subsubsection{For the lemma}
% \changes{v1.11.0}{2014/05/09}{Add hooks to disable the font selection for lemma in footnote.}
% \DescribeMacro{\Xlemmadisablefontselection}
% By default, font of the lemma in footnote is the same as font of the lemma in the main text. For example, if the lemma is in italic in the main text, it is also in italic in note. The \protect\cs{Xlemmadisablefontselection}\oarg{s} command allows to disable it for a specific series.
%
% \DescribeMacro{\Xendlemmadisablefontselection}
% By default, font of the lemma in endnote is the same as font of the lemma in the main text. For example, if the lemma is in italic in the main text, it is also in italic in note. The command allows  \protect\cs{Xendlemmadisablefontselection}\oarg{s} to disable it for a specific series.
%

% \changes{v2.7.0}{2015/11/29}{New hooks: \protect\cs{Xlemmafont} and \protect\cs{Xendlemmafont}}
% \DescribeMacro{\Xlemmafont}\DescribeMacro{\Xendlemmafont}
% Use \cs{Xlemmafont}\oarg{s}\meta{cmd} to apply a \TeX\ font command to the lemma.
%For example, to have boldface lemma:
% \begin{verbatim}
%\Xlemmafont{\bfseries}
% \end{verbatim}
% \cs{Xendlemmafont}\meta{arg}\meta{cmd} is the same for endnotes.
% \subsubsection{For all notes}
% \DescribeMacro{\Xnotefontsize}
% \protect\cs{Xnotefontsize}\oarg{s}\marg{command} is used to define the font size of critical footnotes of the series. The default value is \protect\cs{footnotesize}.
% The \meta{command} must not be a size in pt, but a standard \LaTeX\ size, like \protect\cs{small}.
%
% \DescribeMacro{\notefontsizeX}
% \protect\cs{notefontsizeX}\oarg{s}\marg{command} is used to define the font size of familiar footnotes of the series. The default value is \protect\cs{footnotesize}.
% The \meta{command} must not be a size in pt, but a standard \LaTeX\ size, like \protect\cs{small}.
%
% \DescribeMacro{\Xendnotefontsize}
% \protect\cs{Xendnotefontsize}\oarg{s}\marg{l} is used to define the font size of end critical footnotes of the series. The default value is \protect\cs{footnotesize}.
% The \meta{command} must not be a size in pt, but a standard \LaTeX\ size, like \protect\cs{small}.
% \subsection{Indent of notes content}
% \changes{v1.21.0}{2015/04/13}{Add \protect\cs{Xparindent} and \protect\cs{hangindentX}}
% \DescribeMacro{\Xparindent}
% By default, \macpackage does not add indentation before the paragraphs inside critical footnotes. 
% Use \protect\cs{Xparindent}\oarg{s} to enable indentation.
%
% \DescribeMacro{\parindentX}
% By default, \macpackage does not add indentation before the paragraphs inside familiar footnotes. 
% Use \protect\cs{parindentX}\oarg{s} to enable indentation. 
%
% \DescribeMacro{\Xhangindent}
% For critical notes NOT paragraphed you can define an indent with \protect\cs{Xhangindent}\oarg{s}\marg{l}, which will be applied in the second line of notes. It can help to make distinction between a new note and a break in a note. The default value is 0~pt.
%
% \DescribeMacro{\hangindentX}
% For  familiar notes NOT paragraphed you can define an indentation with \protect\cs{hangindentX}\oarg{s}\marg{l}, which will be applied in the second line of notes. It can help to make a distinction between a new note and a break in a note.

% \DescribeMacro{\Xendhangindent}
% For  critical endnotes NOT paragraphed you can define an indentation with \protect\cs{Xendhangindent}\oarg{s}\marg{l}, which will be applied in the second line of notes. It can help to make a distinction between a new note and a break in a note.
%
%
% \subsection{Arbitrary code at the beginning of notes}
% \changes{v1.1.0}{2012/09/25}{New hook to add arbitrary code at the beginning of the notes}
% The three next commands add arbitrary code at the beginning of notes.
% As the name's space is local to the notes, you can use it to redefine some style inside the notes.
% For example, if you don't want the pstart number to be in bold, use :
% \begin{verbatim}
% \Xbhooknote{\renewcommand{\thepstart}{\arabic{pstart}.}}
% \end{verbatim}
% 
% \DescribeMacro{\Xbhooknote}
% \protect\cs{Xbhooknote}\oarg{s}\marg{code} is to be used at the beginning of the critical footnotes.
%
%
% \DescribeMacro{\bhooknoteX}
% \protect\cs{bhooknoteX}\oarg{s}\marg{code} is to be used at the beginning of the familiar footnotes.
%
%
% \DescribeMacro{\Xendbhooknote}
% \protect\cs{Xendbhooknote}\oarg{s}\marg{code} is to be used at the beginning of the endnotes.
%
% \subsection{Options for footnotes in columns}
%
% \subsubsection{Alignment}
% \DescribeMacro{\Xcolalign}
% \DescribeMacro{\colalignX}
% \changes{v1.21.0}{2015/04/13}{Add \protect\cs{Xcolalign} and \protect\cs{colalignX} hooks}
% By default, text in footnotes of two or three columns are flush left and without hyphenation.
% However, you can change this with \protect\cs{Xcolalign}\oarg{s}\marg{code} for critical footnotes,
% and \protect\cs{colalignX}\oarg{s}\marg{code} for familiar footnotes.
%
% \verb+<code>+ must be one of the following command:
% \begin{description}
%  \item[\protect\cs{justifying}] to have text justified, as usual with \LaTeX. You can also let \verb+<code>+ empty.
%  \item[\protect\cs{raggedright}] to have text left aligned, but \emph{without hyphenation}. That is the default \macpackage\ setting. 
%  \item[\protect\cs{RaggedRight}] to have text left aligned \emph{with hyphenation} (requires \package{ragged2e}).
%  \item[\protect\cs{raggedleft}] to have text right aligned, but \emph{without hyphenation}.
%  \item[\protect\cs{RaggedLeft}] to have text right aligned \emph{with hyphenation} (requires \package{ragged2e}).
%  \item[\protect\cs{centering}] to have text centered, but \emph{without hyphenation}.
%  \item[\protect\cs{Centering}] to have text centered \emph{with hyphenation} (requires \package{ragged2e}).
% \end{description}
%
% \subsubsection{Size of the columns}\label{hsizecols}
% For the following four macros, be careful that the columns are made from right to left.
%
% \DescribeMacro{\Xhsizetwocol}
% \protect\cs{Xhsizetwocol}\oarg{s}\marg{l} is used to change width of a column when critical notes are displaying in two columns. Default value is \verb+.45 \hsize+.
%
% \DescribeMacro{\Xhsizethreecol}
% \protect\cs{Xhsizethreecol}\oarg{s}\marg{l} is used to change width of a column when critical notes are displaying in three columns. Default value is \verb+.3 \hsize+.
%
% \DescribeMacro{\hsizetwocolX}
% \protect\cs{hsizetwocolX}\oarg{s}\marg{l} is used to change width of a column when familiar notes are displaying in two columns. Default value is \verb+.45 \hsize+.
%
% \DescribeMacro{\hsizethreecolX}
% \protect\cs{hsizethreecolX}\oarg{s}\marg{l} is used to change width of a column when familiar notes are displaying in three columns. Default value is \verb+.3 \hsize+.
%
% \subsection{Options for paragraphed footnotes}
% \subsubsection{Mark separation of notes}
% \DescribeMacro{\Xafternote} \DescribeMacro{\afternoteX}
% You can add some horizontal space after a note by using \protect\cs{Xafternote}\oarg{s}\marg{l}  (for critical footnotes) or \protect\cs{afternoteX}\oarg{s}\marg{l} (for familiar footnotes). The default value is \verb|1em plus.4em minus.4em|.
%
% \DescribeMacro{\Xparafootsep}\DescribeMacro{\parafootsepX}
% For paragraphed footnotes (see below), you can choose the separator between each note by using \protect\cs{Xparafootsep}\oarg{s}\marg{text} for critical notes and \protect\cs{parafootsepX} for familiar notes.
% A common separator is the double pipe ($\parallel$), which you can set by using \protect\cs{Xparafootsep}\verb+{$\parallel$}+. 
%
% Note that if the symbol defined by \protect\cs{Xsymlinenum} must be used at the beginning of a note, the \protect\cs{Xparafootsep} / \protect\cs{parafootsepX} is not used before this note.
%
% \subsubsection{Ragged text}
% \changes{v1.12.0}{2014/08/05}{New options for ragged-paragraph notes}
% \DescribeMacro{\Xragged}
% Text in paragraphed critical notes is justified, but you can use \protect\cs{Xragged}\oarg{s}\arg{L} if you want it to be ragged left (i.e., right justified),
% or \protect\cs{Xragged}\oarg{s}\arg{R} if you want it to be ragged right (i.e., left justified).
% 
% \DescribeMacro{\raggedX}
% Text in paragraphed footnotes is justified, but you can use \protect\cs{raggedX}\oarg{s}\arg{L} if you want it to be ragged left, or \protect\cs{raggedX}\oarg{s}\arg{R} if you want it to be ragged right.
%
% \subsection{Options for block of notes}
%
% \subsubsection{Text before notes}
% \changes{v1.1.0}{2012/09/12}{New options for block of notes.}
% \DescribeMacro{\Xtxtbeforenotes}
% You can add text before critical notes with \protect\cs{Xtxtbeforenotes}\oarg{s}\marg{text}.
%
% \subsubsection{Code before notes}
%\DescribeMacro{\Xbhookgroup}
%\DescribeMacro{\bhookgroupX}
% While \cs{Xtxtbeforenotes} is for typesetting code before notes, \cs{Xbhookgroup} and \cs{bhookgroupX} (respectively for critical and familiar) are for executing code before a groups of notes, between the rules and the printing of the notes. 
% 
% 
% \subsubsection{Spacing}
% \DescribeMacro{\Xbeforenotes}
% You can change the vertical space before the rule of the critical notes with \protect\cs{Xbeforenotes}\oarg{s}\marg{l}.
% The default value is \verb|1.2em plus .6em minus .6em|.
%
% \textbf{Be careful, the standard \LaTeX\ footnote rule used by \macpackage decreases by 3pt. This 3pt decrease is not changed by this command.}
%
% \DescribeMacro{\beforenotesX}
% You can change the vertical space printed before the rule of the familiar notes with \protect\cs{beforenotesX}\oarg{s}\marg{l}.
% The default value is \verb|1.2em plus .6em minus .6em|.
%
% \textbf{Be careful, the standard \LaTeX\ footnote rule, which is used by \macpackage, decreases 3pt. These 3pt are not changed by this command.}
%
% \DescribeMacro{\preXnotes}
% You can set the space before the first series of critical notes printed on each page
% and set a different amount of space for each subsequent series on the page.
% You can do it with \protect\cs{preXnotes}\marg{l}. The default value is \verb+0pt+.
% You can disable this feature by setting the length to 0pt.
%
% \DescribeMacro{\prenotesX}
% You can set the space before the first printed (in a page) series of familiar notes to be different from the space before other series.
% The default value is \verb+0pt+.
% You can do this with \protect\cs{prenotesX}\marg{l}. You can disable this feature by setting the length to 0pt.
% 
% \subsubsection{Rule}
% \changes{v1.12.0}{2014/08/05}{New hooks: \protect\cs{Xafterrule} and \protect\cs{afterruleX}}
% \DescribeMacro{\Xafterrule}
% You can change the vertical space printed after the rule of the critical notes with \protect\cs{Xafterrule}\oarg{s}\marg{l}.
% The default value is \verb|0pt|.
%
% \textbf{Be careful, the standard \LaTeX\ footnote rule, which is used by \macpackage, adds 2.6pt. These 2.6pt are not changed by this command.}
%
%
% \DescribeMacro{\afterruleX}
% You can change the vertical space printed after the rule of the familiar notes with \protect\cs{afterruleX}\oarg{s}\marg{l}.
% % The default value is \verb|0pt|.
%
% \textbf{Be careful, the standard \LaTeX\ footnote rule, which is used by \macpackage, adds 2.6pt. These 2.6pt are not changed by this command.}
%
%
% \subsubsection{Maximum height} 
% \DescribeMacro{\Xmaxhnotes}\label{Xmaxhnotes}
% By default, one series of critical notes can take up to 80\% of \cs{vsize}, before being broken to the next page. 
% If you want to change the size use \protect\cs{Xmaxhnotes}\oarg{s}\marg{l}. 
% Be careful : the length can't be flexible, and is relative to the the current font.
% For example, if you want the note to take, at most, 33\% of the text height, do \verb|\Xmaxhnotes{.33\textheight}|.
%
% \DescribeMacro{\maxhnotesX}
% \protect\cs{maxhnotesX}\oarg{s}\marg{l} is the same as previous, but for familiar footnotes.
%
% Note that in many cases, you should call these commands in the begin of the document, because the \cs{vsize} in the preamble is not the same as \cs{vsize} after the preamble.
% That why we recommend to you to add in your preamble
% \begin{verbatim}
% \AtBeginDocument{
%   \maxhnotesX{0.8\textheight}
%   \Xmaxhnotes{0.8\textheight}
% }
% \end{verbatim}
%
% Be careful with the two previous commands. 
% Actually, for technical purposes, one paragraphed note is considered as one block. 
% Consequently, it cannot be broken between two pages, even if you used these commands. 
% The debug is in the todolist.
% \subsubsection{Width}
% \changes{v2.7.0}{2015/11/29}{New hooks: \protect\cs{Xhsize} and \protect\cs{hsizeX}}
% \changes{v2.7.2}{2015/12/13}{\protect\cs{Xhsize} and \protect\cs{hsizeX} become \protect\cs{Xwidth} and \protect\cs{widthX}}
% \DescribeMacro{\Xwidth}
% \DescribeMacro{\widthX}
% \cs{Xwidth}\oarg{s}\marg{l} sets the total width of critical footnote.
% \cs{widthX}\oarg{s}\marg{l} does the same for familiar footnotes.
%
% \meta{l} can be a length expression, parsable with \cs{dimexpr}.
% For example:
% \begin{verbatim}
%\Xwidth{\columnwidth+\marginparsep+\ledrsnotewidth}
%\widthX{\columnwidth+\marginparsep+\ledrsnotewidth}
% \end{verbatim}
%
% Note that changes the with of the block of notes.
% If you want to change the width of each column when typesetting notes in columns, use \cs{Xhsizetwocol}, \cs{Xhsizethreecol}, \cs{hsizetwocolX}, \cs{hsizethreecolX}, see \reff{hsizecols}.
%
% \subsection{Footnotes and the \parpackage columns} 
% \changes{v1.13.0}{2014/09/16}{Add \protect\cs{Xnoteswidthliketwocolumns} and \protect\cs{noteswidthliketwocolumnsX}}
% \DescribeMacro{\Xnoteswidthliketwocolumns}\DescribeMacro{\noteswidthliketwocolumnsX}
% If you use \parpackage\ \protect\cs{columns} macro, you can call :
% \begin{itemize}
%   \item \protect\cs{Xnoteswidthliketwocolumns}\oarg{s} to create critical notes with a two-column size width. Use \protect\cs{Xnoteswidthliketwocolumns}\oarg{s}\verb+[false]+ to disable it.
%   \item \protect\cs{noteswidthliketwocolumnsX}\oarg{s} to create familiar notes with a two-column size width. Use \protect\cs{noteswidthliketwocolumnsX}\oarg{s}\verb+[false]+ to disable it.
% \end{itemize}
% \subsection{Endnotes in one paragraph}
% \changes{v1.12.0}{2015/04/25}{Add \protect\cs{Xendparagraph} and related settings.}
% \DescribeMacro{\Xendparagraph}
% By default, any new endnote starts a new paragraph.
% Use \protect\cs{Xendparagraph}\oarg{s} to have all end notes of one given series set in one paragraph.
%
% \DescribeMacro{\Xendafternote}
% You can add some space after a endnote series by using \protect\cs{Xendafternote}\oarg{s}\marg{l}. The default value is \verb|1em plus.4em minus.4em|.
%
% \DescribeMacro{\Xendsep}
%  You can choose the separator between each note by \protect\cs{Xendsep}\oarg{s}\marg{text}. A common separator is the double pipe ($\parallel$), which you can set by using \protect\cs{Xendsep}\verb+{$\parallel$}+.
%
% \section{Fonts}\label{fonts}
% One of the most important features of the appearance of the notes,
% and indeed of your whole document, will be the fonts used. We will
% first describe the commands that give you control over the
% use of fonts in the different structural elements of the document,
% especially within the notes, and then in
% subsequent sections specify how these commands are used.
%
% For those who are setting up for a large job, here is
% a list of the complete set of \macpackage macros relating to fonts that
% are intended for manipulation by the user: 
% \protect\cs{endashchar}, 
% \protect\cs{fullstop},
% \protect\cs{numlabfont}, and 
% \protect\cs{rbracket}. 
%
%
% \DescribeMacro{\numlabfont}
% Line numbers for the main text
% are usually printed in a smaller font in the margin.
% The \protect\cs{numlabfont} macro is provided as a standard name for
% that font: it is initially defined as \\
% \verb"\newcommand{\numlabfont}{\normalfont\scriptsize}" \\
% You might wish to use a different font if, for example,
% you preferred to have these line numbers printed using
% old-style numerals.
%
%
%
%
% \DescribeMacro{\select@lemmafont}
% We will briefly discuss \protect\cs{select@lemmafont}
% here because it is important to know about
% it now, although it is not one of the macros you would expect to
% change in the course of a simple job. Hence it is `protected'
% by having the @-sign in its name.
%
% When you use the \protect\cs{edtext} macro to mark a word in your text
% as a lemma, that word will normally be printed again in your
% apparatus.  If the word in the text happens to be in a font such
% as italic or bold you would probably expect it to appear in the
% apparatus in the same font.  This becomes an absolute necessity
% if the font is actually a different script, such as Arabic or
% Cyrillic.  \protect\cs{select@lemmafont} does the work of
% decoding \macpackage's data about the fonts used to print the lemma in
% the main text and calling up those fonts for printing the lemma in
% the note.
%
% \protect\cs{select@lemmafont} is a macro that takes one long
% argument---the cluster of line numbers passed to the note
% commands. This cluster ends with a code indicating what
% fonts were in use at the start of the lemma.
% \protect\cs{select@lemmafont} selects the appropriate font for the
% note using that font specifier.
%
% \Macpackage uses \protect\cs{select@lemmafont} in a standard footnote
% format macro called \protect\cs{normalfootfmt}.  The footnote formats
% for each of the layers \texttt{A} to \texttt{E} are \protect\cs{let} equal
% to \protect\cs{normalfootfmt}.  So all the layers of the footnotes are
% formatted in the same way.
%
%
% \section{Verse}\label{verse}
%
% \subsection{Basic}
%
% \DescribeMacro{\stanza}
% \DescribeMacro{\&}
% Use \verb?\stanza? at the start of a stanza. Each line in a stanza
% is ended by an ampersand (\verb+&+), and the stanza itself is ended
% by putting \verb?\&? at the end of the last line.
%
% 
% \subsection{Define stanza indents}
% \DescribeMacro{\stanzaindentbase}
% Lines within a stanza may be indented. The indents are integer multiples
% of the length \verb?\stanzaindentbase?, whose default value is 20pt.
%
% \DescribeMacro{\setstanzaindents}
% In order to use the stanza macros, \textbf{one must set the indentation values}.
% First the value of \verb+\stanzaindentbase+ should be set,
% unless the default value 20pt is desired.
% Every stanza line indentation is a multiple of this.
%
% To specify these
% multiples one invokes, for example \\
% \verb+\setstanzaindents{3,1,2,1,2}+. \\
%
% The numerical entries must be whole numbers, 0 or greater, separated by
% commas without embedded spaces. The first entry
% gives the hanging indentation to be used if the stanza line requires more
% than one print line.
%  
%  If it is known that each stanza line will fit in one print line,
% then this first entry should be 0; \TeX\ does less
% work in this case, but no harm ensues if the hanging indentation is not
% 0 but is never used. 
% 
% If you want the hanging verse to be flush right, 
% you can use \protect\cs{sethanginsymbol}: see p.~\reff{hfillhanging}.
%
% Enumeration is by stanza lines, not by print lines.
% In the above example the lines are indented one unit, two units, one unit,
% two units, with 3 units of hanging indentation in case a stanza line is too
% long to fit on one print line. 
%
% \subsection{Repeating stanza indents}
%\changes{v0.13.0}{2011/11/08}{New stanzaindentsrepetition counter to repeat stanza indents every \emph{n} verses.}
% \label{stanzaindentsrepetition}Since version 0.13, if the indentation is repeated every \emph{n} verses of the stanza, you can define only the \emph{n} first indentations, and indicate that they are repeated, defining the value of  the \verb+stanzaindentsrepetition+ counter  at \emph{n}. For example:
%\begin{verbatim}
%\setstanzaindents{5,1,0}
%\setcounter{stanzaindentsrepetition}{2}
% \end{verbatim}
%
% is like
%\begin{verbatim}
%\setstanzaindents{5,1,0,1,0,1,0,1,0,1,0}
% \end{verbatim}
%
% \textbf{Be careful: the feature is changed in eledmac 1.5.1. See \reff{change151}.}
%
%If you don't use the  \verb+stanzaindentsrepetition+ counter, make sure you have at least one more numerical
% entry in \verb+\setstanzavalues+ than the number of lines in the stanza.
%
% If you want to disable this feature again, just put the counter to 0: 
% \begin{verbatim}
% \setcounter{stanzaindentsrepetition}{0}
% \end{verbatim}
% The macros make no restriction on the number of lines in a stanza.
% Stanza indentation values (and penalty values) obey \TeX's grouping
% conventions, so if one stanza among several has a different structure,
% its indentations (penalties) may be set within a group; the prior values
% will be restored when the group ends.
%
% \subsection{Manual stanza indent}
% \DescribeMacro{\stanzaindent}
% \DescribeMacro{\stanzaindent*}
% You can set the indent of some specific verse by calling \protect\cs{stanzaindent}\marg{value} at the beginning of the verse, before any other character. In this case, the indent defined by \protect\cs{setstanzaindents} for this verse is skipped, and \marg{value} is used instead.
%
% If you use the mechanism of indent repetition, the next verse will be printed as it should be even if the current verse would have its normal indent value.
% In other words, using \protect\cs{stanzaindent} in a verse does not shift the indent repetition.
%
% However, if you want to shift the indent repetition, so the next verse has the indent normally used for the current verse, use \protect\cs{stanzaindent*} instead of \protect\cs{stanzaindent}.
% \subsection{Stanza breaking}
% \DescribeMacro{\setstanzapenalties}
% When the stanzas run over several pages, it is often
% desirable that page breaks should arise between certain lines in the
% stanza, so a facility for including penalties after stanza lines is
% provided. If you are satisfied with the page breaks, you need not set the
% penalty values. 
%
% The command \\
% \verb+\setstanzapenalties{1,5000,10100,5000,0}+ \\
%  results in a penalty of
% 5000  being placed after the first and third lines of the stanza, and a
% penalty of ${-100}$ after the second. 
%
% The first entry ``1'' is a control
% value. If it is zero, then no penalties are passed on to \TeX,
% which is the default. Values between 0 and 10000 are penalty
% values; values between 10001 and 20000 have 10000 subtracted and the result
% is given as a negative penalty. The mechanism used for indentations and
% penalties requires unsigned values less than 32768. No penalty is placed
% after the last line, so the final \verb+,0+ in then example above could
% be omitted.  A penalty of 10000 will prevent a page break; such a
% penalty is included automatically where there is stanza hanging indentation.
% A penalty of ${-10000}$ (corresponding to the entry value 20000 in this
% context) forces a page break. Values in between act as suggestions as to the
% desirability of a page break at a given line. There is a subtle interaction
% between penalties and \emph{glue}, so it may take some adjustment of skips
% and penalties to achieve the best results.
% \subsection{Hanging symbol}
% It is possible to insert a symbol in each line of hanging verse, as in French typography; for example, the opening bracket `['. To insert it in \macpackage, use macro \DescribeMacro{\sethangingsymbol}\protect\cs{sethangingsymbol}\marg{h} with this code.
% In the example of French typography, do
% \begin{verbatim}
% \sethangingsymbol{[\,}
% \end{verbatim}
% \label{hfillhanging} You can also use it to force hanging verse to be flush right:
% \begin{verbatim}
% \sethangingsymbol{\protect\hfill}
% \end{verbatim}
% \subsection{Long verse and page break}
% If you want to prevent page breaks inside long verses, use the option \verb+nopbinverse+ when loading package, or use \protect\cs{lednopbinversetrue}. 
% Read \reff{lednopbinversetrue} for further details.
% \subsection{Content before/after verses}\label{contentverse}
% It is possible to add content, like a subtitle or a spacing, before or after verse:
% \begin{itemize}
%   \item \protect\cs{stanza} command can take a optional argument (in brackets). Its content will be printed before the stanza.
%   \item \verb+&+ can be replaced by \protect\cs{newverse} with two optional arguments (in brackets). The first will be printed after the current verse, the second before the next verse.
%   \item \verb+\&+ can take a optional argument (in brackets). Its content will be printed after the stanza.
% \end{itemize}
% \subsection{Numbering stanza}\label{numbering-stanza}
% \DescribeMacro{\numberstanzatrue}
% \DescribeMacro{\numberstanzafalse}
% If you want to automatically number stanzas, use \cs{numberstanzatrue}.
% In this case, the line number will restart at each \cs{stanza}.
% 
%
% If you want to disable this feature again, use \cs{numberstanzafalse}.
%
% You can use this feature in combination with \cs{Xstanza} (\reff{Xstanza}).
% 
% \DescribeMacro{thestanza}.
% You can redefine \cs{thestanza} to change the aspect of stanza number.
% Default value is:
% \begin{verbatim}
% \renewcommand{\thestanza}{%
%   \textbf{\arabic{stanza}}%
% }
% 
% \end{verbatim}
% 
% You can change the value of the \verb+stanza+ counter with the usual commands of \LaTeX.
%
% \DescribeMacro{\stanzanumwrapper}
% You can redefine \cs{stanzanumwrapper} in order to modify the way the stanza number is inserted in the flow of text.
% Default value is:
% \begin{verbatim}
% \newcommand{\stanzanumwrapper}[1]{%
%    \flagstanza{#1}%
%}
% \end{verbatim}
% \subsection{Various tools}
% \DescribeMacro{\ampersand}
% If you need to print an \& symbol in a stanza, use the \verb?\ampersand? 
% macro, not \verb?\&? which will end the stanza.
%
%
% \DescribeMacro{\flagstanza}
% Putting \protect\cs{flagstanza}\oarg{len}\marg{text} at the start of a  line
% in a stanza (or elsewhere) will typeset \meta{text} at a 
% distance \meta{len} before
% the line. The default \meta{len} is \verb?\stanzaindentbase?.
%
% \subsection{Notes on empty lines}
% Since v2.3.0 of \reledmac, empty lines when typesetting verses no longer produce new paragraphs, and consequently, do not insert vertical spaces.
% Use optional argument of \cs{stanza} or \cs{newverse} to insert vertical space (\reff{contentverse}).
% \section{Grouping}
%    In a \verb?minipage? environment \LaTeX\ changes \verb?\footnote? numbering from
% arabic to alphabetic and puts the footnotes at the end of the minipage.
%
% \DescribeEnv{minipage}
% You can put numbered text with critical footnotes in a minipage and
% the footnotes are set at the end of the minipage. 
% 
% You can also put familiar footnotes (see section~\ref{sec:desc:familiar})  
% in a minipage but unlike with \verb?\footnote? the numbering scheme is
% unaltered.
%
% \DescribeEnv{ledgroup}\label{ledgroup}
% Minipages, of course, are not broken across pages. Footnotes in a \verb?ledgroup?
% environment are typeset at the end of the environment, as with minipages,
% but the environment includes normal page breaks. The environment makes no
% change to the textwidth so it appears as normal text; it just might be that
% footnotes appear in the middle of a page, with text above and below.
%
% \DescribeEnv{ledgroupsized}
% The \verb?ledgroupsized? environment is similar to \verb?ledroup? except that
% you must specify a width for the environment, as with a minipage. \\
% \verb?\begin{ledgroupsized}?\oarg{pos}\marg{width}.
%
%    The required \meta{width} argument is the text width for the environment. The
% optional \meta{pos} argument is for positioning numbered text within
% the normal textwidth. It may be one of the characters:
% \begin{itemize}
% \item[l] (left) numbered text is flush left with respect to the normal
%        textwidth. This is the default.
% \item[c] (center) numbered text is in the center of the textwidth.
% \item[r] (right) numbered text is flush right with respect to the
%        normal textwidth.
% \end{itemize}
% Note that normal text, footnotes, and so forth are all flush left.
% 
% \verb?\begin{ledgroupsized}{\textwidth}? is effectively the same as 
% \verb?\begin{ledgroup}?
% 
% 
%
%
%
% \section{Cross referencing}
% \changes{v1.12.0}{2014/08/05}{Add hyperlink to crossref (needs \protect\package{hyperref} package).}
% \label{crossref}\relax
% The package provides a simple cross-referencing facility that allows
% you to mark places in the text with labels, and generate page and
% line number references to those places elsewhere 
% using those labels.
%
% \subsection{Basic use}
% 
% \DescribeMacro{\edlabel}
% First you place a label in the text using the command
% \protect\cs{edlabel}\marg{lab}. \meta{lab} can be almost anything you like, including
% letters, numbers, punctuation, or a combination---anything but spaces;
% you might type \protect\cs{edlabel}\verb+{toves-3}+, for example.\footnote{More precisely,
% you should stick to characters in the \TeX\ categories of ``letter'' 
% and ``other''.}
%
% \DescribeMacro{\edpageref}
% \DescribeMacro{\edlineref}
% \DescribeMacro{\sublineref}
% \DescribeMacro{\pstartref}
% Elsewhere in the text, either before or after the \protect\cs{edlabel},
% you can refer to its location via \protect\cs{edpageref}\marg{lab}, or
% \protect\cs{edlineref}\marg{lab}%
% will produce, respectively, the page, line, sub-line and pstart on which
% the \protect\cs{edlabel}\marg{lab} command occurred.
%
% Note that the \cs{edlineref} command insert the side flag after the line number. 
%
% 
% An \protect\cs{edlabel} command may appear in the main text, or in the
% first argument of \protect\cs{edtext}, but not in the apparatus itself.  But
% \protect\cs{edpageref}, \protect\cs{edlineref}, \protect\cs{sublineref}, \protect\cs{pstartref} commands can also be used in
% the apparatus to refer to \protect\cs{edlabel}s in the text.
%
% The \protect\cs{edlabel} command works by writing macros to \LaTeX
% \file{.aux} file. You will need to process
% your document through \LaTeX\ twice in order for the references to
% be resolved.
%
% You will be warned if you use \verb"\edlabel{foo}" and \verb"foo"
% has been used as a label before. The \verb"ref" commands will
% return references to the last place in the file marked with this
% label. You will also be warned if a reference is made to an
% undefined label. (This will also happen the first time you
% process a document after adding a new \protect\cs{edlabel} command: the
% auxiliary file will not have been updated yet.)
%
% \subsection{Cross-referencing to a critical note}
% If you want to refer to a word which is a lemma word, the \cs{edlabel} command should be in the first argument of \cs{edtext} command.
%
% If you want to refer to the content of a a \cs{Xfootnote}, the line and subline number printed will be the start line.
%
% If you want to refer to starting and ending lines, you should use \cs{appref} and related tools (\reff{appref}).
% \subsection{Cross-referencing which return a number in any case}
% Where \verb+#1+ stands for the reference.
% \DescribeMacro{\xpageref}
% \DescribeMacro{\xlineref}
% \DescribeMacro{\xsublineref}
% \DescribeMacro{\xpstartref}
%
% However, there are situations in which you will want \macpackage to
% return a number without displaying any
% warning messages about undefined labels or the like: if you want to
% use the reference in a context where \LaTeX{} is looking for a
% number, such a warning will lead to a complaint that the number
% is missing. 
% This is the case for references used within the
% argument to \protect\cs{linenum}, for example (see \reff{linenum}). 
%
%For this situation,
% four variants of the reference commands, with the \verb"x"
% prefix, are supplied: \protect\cs{xpageref}, \protect\cs{xlineref}, \protect\cs{xsublineref} and \protect\cs{xpstartref}.
% They have these limitations:
% \begin{itemize}
%     \item They will not tell you if the label is undefined.
%     \item They must
% be preceded in the file by at least one of the four other
% cross-reference commands---e.g., a \verb"\edlabel{foo}" command,
% even if you never refer to that label---since those commands can all
% do the necessary processing of the \file{.aux} file, and the \protect\cs{x...}
% ones cannot.
%     \item When \protect\package{hyperref} is loaded, the hyperref link will not be added. (Indeed,
%  it is not a limitation, but a feature.)
%     \item With \parpackage, the \cs{xlineref} does not insert the right side flag, in order to obtain a line number. Use \cs{xflagref} to obtain the side flag, depending of your flag.
% \end{itemize}
%
% \subsubsection{Cross-referencing in order to define line number of a critical note}
% \DescribeMacro{\xxref}
% The macros \protect\cs{xxref} and 
% \protect\cs{edmakelabel} let you manipulate numbers
% and labels in ways which you may find helpful in tricky
% situations.
%
% The \protect\cs{xxref}\marg{lab1}\marg{lab2} command generates a reference to a sequence of
% lines, for use in the second argument of \protect\cs{edtext}.
% It takes two arguments, both of which are
% labels: e.g., \verb"\xxref{mouse}{elephant}". It calls \protect\cs{linenum}
% (q.v., \reff{linenum} above) and sets the beginning page,
% line and  subline numbers to those of the place where
% \verb"\edlabel{mouse}" was placed, and the ending numbers to those where
% \verb"\edlabel{elephant}" occurs.
%
% \subsection{Not automatic cross-referencing}
% \DescribeMacro{\edmakelabel}
% Sometimes the \protect\cs{edlabel} command cannot be used to specify exactly
% the page and line desired---for example, if you want to refer to a
% page and line number in another volume of your edition.  In such
% cases, you can use the \protect\cs{edmakelabel}\marg{lab}\marg{numbers} 
% macro so that you can `roll your own' label. 
%
% For example, if you type `\verb"\edmakelabel{elephant}{10|25|0}"' 
% you will create a new label, and a later call to \verb"\edpageref{elephant}" would print
% `10' and \verb"\lineref{elephant}" would print `25'. The sub-line
% number here is zero.  It is usually best to collect your
% \protect\cs{edmakelabel} statements near the top of your document, so that
% you can see them at a glance.
% \subsection{Normal \LaTeX\ cross-referencing}
% \DescribeMacro{\label}
% \DescribeMacro{\ref}
% \DescribeMacro{\pageref}
% \changes{v0.2.1}{2003/08/25}{Added text about normal labeling}
%    The normal \protect\cs{label}, \protect\cs{ref} and \protect\cs{pageref} macros may be used
% within numbered text, and operate in the familiar fashion. 
% \subsection{References to start and end lines}
% \subsubsection{Reference to main text lines}
% \changes{v2.5.0}{2015/11/13}{New tools to easily make cross-reference to a passage defined by a start and an end line}
% Many times, you may want to make a cross-reference to a passage that is defined by a start line and an end line.
% \Macpackage provides specific tools for this scenario.

% \DescribeMacro{\edlabelS}
% Use \cs{edlabelS}\marg{label} to mark the start line of the passage.
%
% \DescribeMacro{\edlabelE}
% Use \cs{edlabelE}\marg{label} to mark the end the end line of the passage.
% These two commands just create to label which are named \meta{label}\verb+:start+ and \meta{label}\verb+:end+. 
%
% \DescribeMacro{\edlabelSE}
% Use \cs{edlabelSE}\marg{label} to mark just one location in the text. Contrary to a classical \cs{edlabel}, the \meta{label} could be use with \cs{SEref} and \cs{SErefwithpage}.
%
% 
% The main utility is to use them with three other commands.
% \DescribeMacro{\SEref}
% \cs{SEref}\marg{label} will make a cross-reference printed as a reference in critical footnotes.
% 
% \DescribeMacro{\SErefwithpage}
% \cs{SErefwithpage} will make a cross-reference printed as a reference in critical endnotes.
%
% \DescribeMacro{\SErefonlypage}
% \cs{SErefonlypage} will make a cross-reference printed only with page number.
% 
% \subsubsection{References to lines that are commented on in the apparatus}\label{appref}
% \changes{v1.21.0}{2015/03/09}{Add \protect\cs{applabel} and related}
% You may want to make a cross-reference to a passage that is referred to by \protect\cs{edtext}.
% \Macpackage provides specific tools for this scenario.
%
% \DescribeMacro{\applabel}
% If you use \protect\cs{applabel}\marg{label} inside the second argument of a \protect\cs{edtext},
% \Macpackage will add a \protect\cs{edlabel} at the beginning and end of the marked passage.
% The label at the beginning of the passage will have the title \meta{label}\verb+:start+, while the label at the end will have the title \meta{label}\verb+:end+.
% 
% If you use \protect\cs{linenum} (\reff{linenum}) to
% refer to these labels, \macpackage will use your line settings to refer
% to the passage.
%
% \DescribeMacro{\appref}\DescribeMacro{\apprefwithpage}  
% You can also use \protect\cs{appref}\marg{label} and
% \protect\cs{apprefwithpage}\marg{label} to refer to these lines.
% The first one will print the lines as they are printed in the critical footnotes, 
% while the second will print the lines as they are printed in endnotes.
%
% \subsubsection{Settings}
% \paragraph{Specific to these tools}
% \DescribeMacro{\setapprefprefixsingle}\DescribeMacro{\setapprefprefixmore}
% If you use \protect\cs{apprefprefixsingle}\marg{prefix}, \meta{prefix} will be printed
% before the line numbers of a \protect\cs{appref}-reference.
% If you use \protect\cs{apprefprefixmore}\marg{prefix}, \meta{prefix} will be printed
% before the line numbers, if you refer to more than one line.
% 
% For example, you may use:
% \begin{verbatim}
%  \setapprefprefixsingle{line~}
%  \setapprefprefixmore{lines~}
% \end{verbatim}
%
% Note that if you have not used \protect\cs{setapprefprefixmore} is empty, argument of \protect\cs{setapprefprefixsingle} will used in any case.
%
%
% \DescribeMacro{\setSErefprefixsingle}\DescribeMacro{setSErefprefixmore} 
% \cs{setSErefprefixsingle} and \cs{setSErefprefixmore} are similar for \cs{SEref} command.
%
% \DescribeMacro{\setSErefonlypageprefixsingle}
% \DescribeMacro{\setSErefonlypageprefixmore}
% Use \cs{setSErefonlypageprefixsingle}\marg{prefix} to set the page prefix for \cs{SErefonlypage} when there is only one page.
% Use \cs{setSErefonlypageprefixmore}\marg{prefix} to set it when there is more than one page.
% For example:
% \begin{verbatim}
% \setSErefonlypageprefixsingle{p.~}
% \setSErefonlypageprefixmore{pp.~}
% \end{verbatim}
% Note that if you do not use  \cs{setSErefonlypageprefixmore}, the value of \cs{setSErefonlypageprefixsingle} is used instead.
%
%
% \textbf{Also note that \cs{setSErefonlypageprefixsingle} is only a shortcut for \cs{XendbeforepagenumberSErefonlypage} (see \reff{crossrefsetting:linked}).
% So if you use \cs{Xendbeforepagenumber} without any optional argument, it will override this setting.}
% \paragraph{Linked to setting of critical endnotes and footnotes}\label{crossrefsetting:linked}
% Some commands who set the appearance of line numbers in critical footnotes also set the appearance of line numbers in \cs{appref} and \cs{SEref} if you call them \emph{without the optional series argument}.
% 
% These commandes are the following:
% \begin{itemize}
%   \item \cs{Xlineflag} (for \parpackage), enabled by default.
%   \item \cs{Xlinerangeseparator}
%   \item \cs{Xmorethantwolines}
%   \item \cs{Xsublinesep}
%   \item \cs{Xtwolines}
%   \item \cs{Xtwolinesbutnotmore}
%   \item \cs{Xtwolinesonlyinsamepage}
% \end{itemize}
%
% If you want to make settings specific  to \cs{appref} or \cs{SEref}, just call them with an optional argument containing a comma-separated list of command names (for example \verb+appref,SEref+) or with a suffix equal to the command name (for example \verb+appref+).
%
%
% The same principle is available for \cs{apprefwithpage}, \cs{SErefwithpage} and \cs{SErefonlypage} with the following commands:
% \begin{itemize}
%   \item\cs{Xendafterpagenumber} (not for \cs{SErefonlypage})
%   \item\cs{Xendbeforepagenumber}
%   \item\cs{Xendlineflag} (for \parpackage), enabled by default.
%   \item\cs{Xendlineprefixmore}
%   \item\cs{Xendlineprefixsingle}
%   \item\cs{Xendlinerangeseparator}
%   \item\cs{Xendmorethantwolines}
%   \item\cs{Xendsublinesep} 
%   \item\cs{Xendtwolines}
%   \item\cs{Xendtwolinesbutnotmore}
%   \item\cs{Xendtwolinesonlyinsamepage}
% \end{itemize}
% \paragraph{For one specific command}
%
% When calling \cs{appref} and \cs{SEref}, you can use as a first optional argument, in brackets (\verb+[]+), any optional argument which can be used for critical footnotes (\reff{Xfootnoteopt}).  
%
% When calling \cs{apprefwithpage}, \cs{SErefwithpage} or \cs{SErefonlypage} you can use as a first optional argument, in brackets (\verb+[]+), any optional argument which can be used for critical endnotes (\reff{Xendnoteopt}). 
% \section{Side notes}
%
% \subsection{Basics}
%   The \protect\cs{marginpar} command does not work in numbered text. Instead, 
% the package provides for non-floating sidenotes in either margin.
%
% \DescribeMacro{\ledinnernote}
% \DescribeMacro{\ledouternote}
% \protect\cs{ledinnernote}\marg{text} will put \meta{text} into the inner margin level
% with where the command was issued. Similarly, \protect\cs{ledouternote}\marg{text}
% puts \meta{text} in the outer margin.
%
% \changes{v1.12.0}{2014/08/05}{Add \protect\cs{ledinnernote} and \protect\cs{ledouternote} commands.}
% \changes{v1.12.3}{2014/08/15}{Debug \protect\cs{ledinnernote} and \protect\cs{ledouternote} commands in the top of pages.}
% \DescribeMacro{\ledleftnote}
% \DescribeMacro{\ledrightnote}
% \changes{v1.0.0}{2012/09/15}{Possibility to have commands in sidenotes.}
% \DescribeMacro{\ledsidenote}
% \DescribeMacro{\sidenotemargin}
% \protect\cs{ledsidenote}\marg{text} will put \meta{text} into the margin specified
% by the current setting of \protect\cs{sidenotemargin}\marg{location}. The
% permissible value for \meta{location} is one out of the list
% \texttt{left}, \texttt{right}, \texttt{inner}, or \texttt{outer}, for
% example \verb?\sidenotemargin{outer}?. The package's default setting
% is \\
% \verb?\sidenotemargin{right}? \\
% to typeset \protect\cs{ledsidenote}s in the right hand margin.
% This is the opposite of the default margin for line numbers. The style for a \protect\cs{ledsidenote}
% follows that for a \protect\cs{ledleftnote} or a \protect\cs{ledrightnote} depending
% on the margin it is put in.
%
%    If two note commands for the same side are called in the same line, they will
% be appended and separated by a comma.
%
% \subsection{Setting}
%
% \subsubsection{Width}
% \DescribeMacro{\ledlsnotewidth}
% \DescribeMacro{\ledrsnotewidth}
% The left sidenote text is put into a box of width \protect\cs{ledlsnotewidth} 
% and the right text into a box of width \protect\cs{ledrsnotewidth}. These
% are initially set to the value of \protect\cs{marginparwidth}.
%
% \subsubsection{Vertical position}
% \DescribeMacro{\rightnoteupfalse}
% \DescribeMacro{\leftnoteupfalse}
% By default, sidenotes are placed to align with the last line of the note to which it refers. 
% If you want they to be placed to align with the first line of the note to which it refers, use \protect\cs{leftnoteupfalse} (for left note) and/or \protect\cs{rightnoteupfalse} (for right note).
% 
% \subsubsection{Distance to the main text }
% \DescribeMacro{\ledlsnotesep}
% \DescribeMacro{\ledrsnotesep}
% The texts are put a distance \protect\cs{ledlsnotesep} (or \protect\cs{ledrsnotesep})
% into the left (or right) margin. These lengths are initially set to
% the value of \protect\cs{linenumsep}.
%
% \DescribeMacro{\ledlsnotefontsetup}
% \DescribeMacro{\ledrsnotefontsetup}
% These macros  specify how the sidenote texts are to be typeset. The
% initial definitions are:
% \begin{verbatim}
% \newcommand*{\ledlsnotefontsetup}{\raggedleft\footnotesize}% left
% \newcommand*{\ledrsnotefontsetup}{\raggedright\footnotesize}% right
% \end{verbatim}
% These can of course be changed to suit.
%
% \subsubsection{Separator between notes}
% \DescribeMacro{\setsidenotesep}
% If you have two or more sidenotes for the same line, they are separated by a comma.
% But if you want to change this separator, you can use \protect\cs{setsidenotesep}\marg{sep}.
% 
% \section{Indexing}
% 
% \subsection{Basics}
% \DescribeMacro{\edindex}
% \LaTeX\ provides the |\index|\marg{item} command for specifying that \meta{item}
% and the current page number should be added to the raw index (\file{idx}) file.
% The |\edindex|\marg{item} macro can be used in numbered text to specify
% that \meta{item} and the current page \& linenumber should be added to
% the raw index file.
%
% Note that the file \verb+.idx+ will contain the right reference only after the third run, because of the internal indexing mechanism of \protect\macpackage.
% That means you must first run (Xe/Lua)\LaTeX three times, then run \verb+makeindex+, and then finally run (Xe/Lua)\LaTeX\ again, in order to get an index with the right page numbers.
%
% If  the \protect\package{imakeidx} or \protect\package{indextools} package is used then the macro takes an optional
% argument, which is the name of a raw index file. For example
% |\edindex[line]{item}| will use |line.idx| as the raw file instead of
% |\jobname.idx|.
%
% The minimal version of \protect\package{imakeidx} package to be used is the version 1.3a uploaded on CTAN on 2013/07/11.
%
% Be careful with the order of package loading and index declaration. You must use this order:
% \begin{enumerate}
%     \item Load \package{imakeidx} or \package{indextools} .
%     \item Load \macpackage.
%   \item Declare the index with the macro \cs{makeindex} of \package{imakeidx} and \package{indextools}.
% \end{enumerate}
% \subsection{Referring to critical notes}
% If you want to refer to a word inside an
% \protect\cs{edtext}\marg{lemma}\marg{app} command, \protect\cs{edindex} should be defined inside
% the first argument, e.g.,
% \begin{verbatim}
%   The \edtext{creature\edlabel{elephant} was quite
%    unafraid}{\Afootnote{Of the mouse, that is.}}
% \end{verbatim}
%
% If you add \protect\cs{edindex} inside some \protect\cs{Xfootnote} command, 
% it will refer to that note, and a suffix \emph{n} will be appended to the reference.
% You can redefine this suffix by redefining the command \protect\cs{ledinnotemark}. 
% Its actual definition is:
% \begin{verbatim}
% \newcommand{\ledinnotemark}[1]{#1\emph{n}}
% \end{verbatim}
%
% \subsection{Separator between page and line numbers}
% \DescribeMacro{\pagelinesep}\label{pagelinesep}
% The page \& linenumber combination is written as |page\pagelinesep line|,
% where the default definition is |\newcommand{\pagelinesep}{-}| so that
% an item on page 3, line 5 will be noted as being at |3-5|. You can
% renew |\pagelinesep| to get a different separator.
% 
% |-| is the default
% separator used by the \textsc{MakeIndex} program.
% 
% Consequently, if you want to use an other \protect\cs{pagelinesep}, you have to configure your \verb+.ist+ index style file. For example if you use \verb+:+ as separator\footnote{For further detail, you can read \url{http://tex.stackexchange.com/a/32783/7712}.}.
% \begin{verbatim}
% page_compositor ":"
% delim_r ":"
% \end{verbatim}
%
% Read the \textsc{MakeIndex} program's handbook about the \verb+.ist+ file. 
% \subsection{Using xindy}\label{xindy}
% Should you decide to use \verb+xindy+ instead of \verb+makeindex+ 
% to transform your \verb+.idx+ files into \verb+.ind+ files,
% you must use some specific configuration file (\verb+.xdy+) so that
% \verb+xindy+ can understand \protect\package{eledmac} reference syntax of which the scheme is:\\
% \verb+pagenumber-linenumber+
%
% An example of such a file is provided in the ``\href{examples/.}{examples}'' folder.
% Read the xindy handbook to learn how to use it.\footnote{Or, for people 
% who read French, read \url{http://geekographie.maieul.net/174}.}
%
% This file also provides, with an explanation, the settings that are needed to put
% \macpackage lines numbers in parenthesis, in order
% to make a better distinction between line numbers and page ranges.
%
% In any case, you must load \macpackage  with the \verb+xindy+ option,
% in order to generate a \verb|.xdy| file which is specific to your document.
% This file is needed by the \verb+.xdy+ example file which is in the ``\href{examples/.}{examples}'' folder.
% Its default name is \verb+reledmac-markup-attr.xdy+,
% but you can change it by using your own as an argument of the \verb|xindy+hyperref| option.
%
% If you chose to use both \verb+xindy+ and the \verb+hyperref+ package,
% you must do three more things:
% \begin{enumerate}
%   \item Use \verb|xindy+hyperref| option when loading the \macpackage  package.
% When you run (Xe/Lua)\LaTeX with this option, a \verb+.xdy+ configuration file will be generated with all the settings needed to allow internal hyperlinking in each index entry which is created by \protect\cs{edindex}. 
%   \item Use \verb+hyperindex=false+ option when loading hyperref.
%   \item Uncomment\,---\,by removing the semicolons at the beginning of the relevant lines\,---\,some lines in the <code>.xdy</code> file provided in the ``\href{examples/.}{examples}'' folder in order to restore internal links in the index to be used by the standard \verb+index+ command.\footnote{These are the recommended lines to provide the best possible compatibility between hyperref and xindy, even without using \macpackage.}.
% \end{enumerate}
% \subsection{Advanced setting}
% \DescribeMacro{\edindexlab}
% The \protect\cs{edindex} process uses a \protect\cs{label} and \protect\cs{ref} mechanism to get
% the correct line number. It automatically generates labels
% of the form \protect\cs{label}\verb|{\edindexlab N}|, where N is a number, and
% the default definition of \protect\cs{edindexlab} is: \\
% |\newcommand*{\edindexlab}{$&}| \\
% in the hopes that this will not be used by any other labels
% (\protect\cs{edindex}'s labels are like \protect\cs{label}\verb|{$&27}|).
% You can change \protect\cs{edindexlab} to something else if you need to.
%
% \section{Glossary}
% \Macpackage provides mechanism to make glossaries with the \package{glossaries} package, refering not to the page, but to the page and line.
% \subsection{Prealable setting}
% The standard compositor between page and line number in \macpackage  is a dash, while \package{glossaries} use, in standard, a dot.
% Consequently, you must:
% \begin{itemize}
% \item Or set .
% \package{glossaries}:\\ \verb+\glsSetCompositor{-}+
% \item Or set \reledmac:\\  \verb+\renewcommand{\pagelinesep}{-}+\\
% In this case, the will have consequences on your use of \cs{edindex}, and you should set your \verb+.ist+ file (\reff{\pagelinesep}).
%
% \end{itemize}
% \subsection{Commands}
% The \cs{gls}, \cs{Gls}, and related commands of \package{glossaries} packages have a prefixed version with \verb+ed+, which refers to the page line.
% The argument are the same as for the standard commands.
% So for example:\\
% \cs{edgls}\oarg{options}\marg{label}\oarg{insert}
% \section{Tabular material}
%
% \LaTeX's normal |tabular| and |array| environments cannot be used where
% line numbering is being done; more precisely, they can be used but with 
% odd results, so don't use them. However, \macpackage  provides some simple 
% tabulation environments that can be line numbered. The environments
% can also be used in normal unnumbered text.
%
% \DescribeEnv{edarrayl}
% \DescribeEnv{edarrayc}
% \DescribeEnv{edarrayr}
% \DescribeEnv{edtabularl}
% \DescribeEnv{edtabularc}
% \DescribeEnv{edtabularr}
%    There are six environments; the |edarray*| environments are for math
% and |edtabular*| for text entries. The final |l|, |c|, or |r|
% in the environment names indicate that the entries will be flushleft (|l|),
% centered (|c|) or flushright (|r|). There is no means of specifying
% different formats for each column, nor for specifying a fixed width for
% a column. The environments are centered with respect to the surrounding text.
%
% \egstart
% \begin{verbatim}
% \begin{edtabularc}
% 1 & 2 & 3 \\
% a & bb & ccc \\
% AAA & BB & C
% \end{edtabularc}
% \end{verbatim}
% \egmid
% \centering
% \begin{tabular}{ccc}
% 1 & 2 & 3 \\
% a & bb & ccc \\
% AAA & BB & C
% \end{tabular}\par
% \egend
%
%   Entries in the environments are the same as for the normal
% |array| and |tabular| environments but there must be no ending
% \verb?\\? at the end of the last row. 
% \emph{There must be the same number of column designators (the \&)
% in each row.} There is no equivalent
% to any line drawing commands (such as \protect\cs{hline}).
% However, unlike the normal environments,  the |ed...| environments 
% can cross page breaks.
%
%    Macros like \protect\cs{edtext} can be used as part of an entry.
%
% For example:
% \begin{verbatim}
% \beginnumbering 
% \pstart
% \begin{edtabularl}
% \textbf{\Large I} & wish I was a little bug\edindex{bug} &
% \textbf{\Large I} & eat my peas with honey\edindex{honey} \\
%  & With whiskers \edtext{round}{\Afootnote{around}} my tummy & 
%  & I've done it all my life. \\
%  & I'd climb into a honey\edindex{honey} pot & 
%  & It makes the peas taste funny \\
%  & And get my tummy gummy.\edindex{gummy} & 
%  & But it keeps them on the knife.
% \end{edtabularr}
% \pend
% \endnumbering
% \end{verbatim}
%  produces the following parallel pair of verses.
% 
% \begin{center}
% \setlength{\tabcolsep}{2pt}
% \begin{tabular}{p{4em}rlrl}
% {\footnotesize 1} & \textbf{\Large I} & wish I was a little bug &
% \textbf{\Large I} & eat my peas with honey \\
% {\footnotesize 2} & & With whiskers round my tummy & 
%  & I've done it all my life. \\
% {\footnotesize 3} & & I'd climb into a honey pot & 
%  & It makes the peas taste funny \\
% {\footnotesize 4} & & And get my tummy gummy. & 
%  & But it keeps them on the knife.
% \end{tabular}
% \end{center}
%
%
%
%
%
% \DescribeMacro{\edtabcolsep}
% The distance between the columns is controlled by the length |\edtabcolsep|.
%
% \DescribeMacro{\spreadmath}
% \DescribeMacro{\spreadtext}
% |\spreadmath|\marg{math} typesets \marg{math} but the \marg{math} has
% no effect on the calculation of column widths.
% |\spreadtext|\marg{text} is the analagous command for use in |edtabular| 
% environments.
% 
% \egstart
% \begin{verbatim}
% \begin{edarrayl}
% 1 & 2  &  3  &  4 \\
%   & \spreadmath{F+G+C} & & \\
% a & bb & ccc & dddd 
% \end{edarrayl}
% \end{verbatim}
% \egmid
% \begin{displaymath}
% \begin{array}{llll}
% 1 & 2  &  3  &  4 \\
%   & \multicolumn{3}{l}{F+G+C} \\
% a & bb & ccc & dddd 
% \end{array}
% \end{displaymath}
% \egend
%
% \DescribeMacro{\edrowfill}
% The macro |\edrowfill|\marg{start}\marg{end}\marg{fill}
% fills columns number \meta{start} to \meta{end} inclusive with
% \meta{fill}. The \meta{fill} argument can be any horizontal `fill'.
% For example |\hrulefill| or |\upbracefill|.
%
% Note that every row must have the same number of columns, even if 
% some would not appear to be necessary.
%
% The |\edrowfill| macro can be used in both tabular and array environments.
% The typeset appearance of the following code is shown below.
% \begin{verbatim}
% \begin{edtabularr}
% 1                                & 2    & 3  & 4  & 5 \\
% Q                                &      & fd & h  & qwertziohg \\
% v                                & wptz & x  & y  & vb \\
% g                                & nnn  & \edrowfill{3}{5}{\upbracefill} & & \\
% \edrowfill{1}{3}{\downbracefill} &      &    & pq & dgh \\
% k                                &      & l  & co & ghweropjklmnbvcxys \\
% 1                                & 2 & 3 & \edrowfill{4}{5}{\hrulefill} &
% \end{tabularr}
% \end{verbatim}
%
% \begin{center}
% \begin{tabular}{rrrrr}
% 1                            & 2    & 3  & 4  & 5 \\
% Q                            &      & fd & h  & qwertziohg \\
% v                            & wptz & x  & y  & vb \\
% g                            & nnn  & \multicolumn{3}{c}{\upbracefill} \\
% \multicolumn{3}{c}{\downbracefill}       & pq & dgh \\
% k                            &      & l  & co & ghweropjklmnbvcxys \\
% 1                            & 2    & 3  & \multicolumn{2}{c}{\hrulefill} 
% \end{tabular}
% \end{center}
%
%    You can also define your own `fill'. For example:
% \begin{verbatim}
% \newcommand*{\upbracketfill}{%
%   \vrule height 4pt depth 0pt\hrulefill\vrule height 4pt depth 0pt}
% \end{verbatim}
% is a fill like |\upbracefill| except it has the appearance of a 
% (horizontal) bracket instead of a brace. It can be used like
% this:
%
% \newcommand*{\upbracketfill}{%
%   \vrule height 4pt depth 0pt\hrulefill\vrule height 4pt depth 0pt}
%
% \begin{verbatim}
% \begin{edarrayc}
% 1 & 2                                & 3 & 4 \\
% a & \edrowfill{2}{3}{\upbracketfill} &   & d \\
% A & B                                & C & D
% \end{edarrayc}
% \end{verbatim}
%
% \begin{displaymath}
% \begin{array}{cccc}
% 1 & 2                                  & 3 & 4 \\
% a & \multicolumn{2}{c}{\upbracketfill}     & d \\
% A & B                                  & C & D
% \end{array}
% \end{displaymath}
%
% 
%
% \DescribeMacro{\edatleft}
% \DescribeMacro{\edatright}
% \protect\cs{edatleft}\oarg{math}\marg{symbol}\marg{halfheight} typesets the math 
% \meta{symbol} as \protect\cs{left}\marg{symbol} 
% with the optional \meta{math} centered before it. The \meta{symbol} is
% twice \meta{halfheight} tall. The \protect\cs{edatright} macro is similar
% and it typesets \protect\cs{right}\marg{symbol} with \meta{math} centered after it.
%
% \begin{verbatim}
% \begin{edarrayc}
%    & 1 & 2 & 3 &  \\
%    & 4 & 5 & 6 &  \\
% \edatleft[left =]{\{}{1.5\baselineskip}
%    & 7 & 8 & 9 &
% \edatright[= right]{)}{1.5\baselineskip}
% \end{edarrayc}
% \end{verbatim}
% 
% \begin{displaymath}
% left = \left\{
% \begin{array}{ccc}
%  1 & 2 & 3 \\
%  4 & 5 & 6 \\
%  7 & 8 & 9
% \end{array}
% \right) = right
% \end{displaymath}
%
% 
%
% \DescribeMacro{\edbeforetab}
% \DescribeMacro{\edaftertab}
% \protect\cs{edbeforetab}\marg{text}\marg{entry}, where \meta{entry} is an entry in the
% leftmost column, typesets \meta{text} left justified before the \meta{entry}.
% Similarly \protect\cs{edaftertab}\marg{entry}\marg{text}, where \meta{entry} is an entry
% in the rightmost column, typesets \meta{text} right justified after the
% \meta{entry}.
%
% For example:
% \begin{verbatim}
% \begin{edarrayl}
%                    A  & 1 & 2 & 3 \\
% \edbeforetab{Before}{B} & 1 & 3 & 6 \\
%                    C  & 1 & 4 & \edaftertab{8}{After} \\
%                    D  & 1 & 5 & 0
% \end{edarrayl}
% \end{verbatim}
%
%
% \begin{displaymath}
% \begin{array}{p{0.4\textwidth}llp{0.4\textwidth}}
% \mbox{} \hfill $A$ & 1 & 2 & $3$ \\
% Before  \hfill $B$ & 1 & 3 & $6$ \\
% \mbox{} \hfill $C$ & 1 & 4 & $8$ \hfill After \\
% \mbox{} \hfill $D$ & 1 & 5 & $0$
% \end{array}
% \end{displaymath}
% 
% \DescribeMacro{\edvertline}
% \DescribeMacro{\edvertdots}
% The macro \protect\cs{edvertline}\marg{height} draws a vertical line \meta{height} high
% (contrast this with \protect\cs{edatright} where the size argument is half the desired
% height).
% \begin{verbatim}
% \begin{edarrayr}
%  a & b & C & d   & \\
%  v & w & x & y   & \\
%  m & n & o & p   & \\
%  k &   & L & cvb & \edvertline{4pc}
% \end{edarrayr}
% \end{verbatim}
% 
% \DeleteShortVerb{\|}
% \begin{displaymath}
% \left.
% \begin{array}{rrrr}
%  a & b & C & d   \\
%  v & w & x & y   \\
%  m & n & o & p   \\
%  k &   & L & cvb 
% \end{array}
% \right|
% \end{displaymath}
% \MakeShortVerb{\|}
% 
% The \protect\cs{edvertdots} macro is similar to \protect\cs{edvertline} except that it
% produces a vertical dotted instead of a solid line.
%
%
% \section{Sectioning commands}
% \changes{v1.1.0}{2012/09/25}{Sectioning commands.}
% \changes{v1.12.0}{2014/08/05}{New sectioning commands.}
% \subsection{Sectioning commands without line numbers or critical notes}
% The standard sectioning commands (\protect\cs{chapter}, \protect\cs{section} etc.) can be used inside numbered text.
% In this case, you must call them as an optional argument of \protect\cs{pstart} (\reff{pstart:optionalarg}):
% \begin{verbatim}
% \pstart[\section{section}]
% Pstart content.
% \pend
% \end{verbatim}
% The line which contains them will not be numbered, and you cannot add critical notes inside.
% \subsection{Sectioning commands with line numbering and critical notes}
% \label{eledsection}
% You have to use the following commands:
% \begin{itemize}
% \item \protect\cs{eledchapter}\oarg{text}\marg{critical text},
% \item \protect\cs{eledchapter*},
% \item \protect\cs{eledsection}\oarg{text}\marg{critical text},
% \item \protect\cs{eledsection*},
% \item \protect\cs{eledsubsection}\oarg{text}\marg{critical text},
% \item \protect\cs{eledsubsection*},
% \item \protect\cs{eledsubsubsection}\oarg{text}\marg{critical text},
% \item \protect\cs{eledsubsubsection*}.
% \end{itemize}
% These are equivalent to the \LaTeX\ commands.
% Each individual command must be called alone in a \protect\cs{pstart}\,\ldots\,\protect\cs{pend}:
% \begin{verbatim}
%\pstart
%\eledsection*{xxxx\ledsidenote{section}}
%\pend
%\pstart
%\eledsubsection*{xxxx\ledsidenote{sub}}
%\pend
%\pstart
%normal text
%\pend
% \end{verbatim}
% After the first run, you will see only the text. This is normal.
% After the second run, you will see the formatting.
% Finally, with the third run, you will see the table of contents. 
%
% For technical reasons, the page break before \protect\cs{elechapter} cannot be added automatically.
% You have to insert it manually via \protect\cs{beforeeledchapter}, which must be called outside of a numbered section.
%
% \subsection{Optimization}\label{optimize}
% \DescribeMacro{\noeledsec}
% If you are not going to have any \protect\cs{eledxxx} commands, then load \macpackage  with \protect\cs{noeledsec} option. 
% That will suppress the generation of unneeded \file{.eledsec} files, save memory, and make \macpackage run faster.
% 
% \section{Quotation environments}
% The \verb+quotation+ and \verb+quote+ environments can be used so that the same definition/note appears both inside and outside a numbered section.
% The typographical consequences will resemble the outside numbered sections, based on the styles of the \emph{book} class.
% However, if you use a package that redefines these environments, these redefinitions won't be available inside the numbered section.
% You must open any quotation environments inside a \protect\cs{pstart}\,\ldots\,\protect\cs{pend} block, not outside. 
% A quotation environment MUST NOT be opened immediately after a \protect\cs{pstart} 
% and MUST NOT be closed immediately before a \protect\cs{pend}.
%
% \label{noquotation} In some cases, you do not want these environments to be redefined in numbered sections.
% You can load the package with the option \verb+noquotation+ to prevent this redefinition.
%
% \section{Page breaks}
%
% \subsection{Control page breaking}
% \changes{v1.7.0}{2013/11/08}{New features for managing page breaks.}
% \Macpackage and \parpackage break pages automatically. However, you may sometimes want to either force page breaks, or prevent them. 
% \DescribeMacro{\ledpb} \DescribeMacro{\lednopb} The packages provide two macros: 
% \begin{itemize}
%    \item \protect\cs{ledpb} adds a page break.
%    \item \protect\cs{lednopb} prevents a page break, by adding one line to the current page if needed.
% \end{itemize}
% \textbf{These commands have effect only at the second run}.
% 
% These two commands take effect at the beginning of line in which they are called.
% For example, if you call \protect\cs{ledpb} at l.~444, then l.~443 will be at the p.~$n$, and the l.~444 at the p.~$n+1$.
% \DescribeMacro{\ledpbsetting} However, you can change the behavior and decide they will have effect after  the end of the line, adding
% \verb+\ledpbsetting{after}+ at the beginning of your file (better: in your preamble). With the previous example, l.~444 will be
% on p.~$n$ and l.~445 will be on p.~$n+1$.
%
% If you are using \parpackage to typeset parallel pages, you must use \protect\cs{lednopb} on
% both sides in the two corresponding lines. This is especially important when you are using
% stanzas; otherwise, the pages will be out of sync.
%
% \subsection{Prevent page break in a long verses}
% \label{lednopbinversetrue}\DescribeMacro{\lednopbinversetrue} You can also decide to prevent page breaks between two lines of a long verse. To do this, use \verb+nopbinverse+ when loading package, or add \protect\cs{lednopbinversetrue} in the beginning of your file (better: in your preamble). 
%
% This feature works only with verse of 2 lines and no more. It works on the third run, or on the fourth run if using \reledpar.
% By default, when a long verse runs between two pages, a page break will be placed at the beginning of the verse. However, if you have added \cs{ledpbsetting}\arg{after}, the page break will be placed at the end of the long verse and the page containing the long verse will have one extra line.
%
% \section{Miscellaneous}
%
% \DescribeMacro{\extensionchars}
% When the package assembles the name of the auxiliary file for a
% section, it prefixes \protect\cs{extensionchars} to the section number.
% This is initially defined to be empty, but you can add some characters to
% help distinguish these files if you like; what you use is likely
% to be system-dependent. If, for example, you said
% \verb"\renewcommand{\extensionchars}{!}", then you would get temporary
% files called \file{jobname.!1}, \file{jobname.!2}, etc.
%
% \DescribeMacro{\ifledfinal}
%    The package can take options. The option `final', which is the default
% is for final typesetting; this sets \verb?\ifledfinal? to TRUE. The other 
% option, `draft', may be useful during earlier stages and sets 
% \verb?\ifledfinal? to FALSE.
%
% \DescribeMacro{\showlemma}
%    The lemma within the text is printed via \verb?\showlemma{lemma}?.
% Normally, or with the `final' option, the definition of \verb?\showlemma? 
% is: \\
% \verb?\newcommand*{\showlemma}[1]{#1}? \\
% so it just produces its argument. 
% With the `draft' option it is defined as \\
% \verb?\newcommand*{\showlemma}[1]{\textit{#1}}? \\
% so that its argument is typeset in an italic font, which may make it 
% easier to check that all lemmas have been treated.
%
%    If you would prefer some other style, you could put something like this
% in the preamble:
% \begin{verbatim}
% \ifledfinal\else
%    \renewcommand{\showlemma}[1]{\textbf{#1}}% or simply ...[1]{#1}
% \fi
% \end{verbatim}
%
%
% \subsection{Known and suspected limitations}
% \subsubsection{\package{floatrow} package's compatibility}
% The \package{floatrow} package must be loaded before the \macpackage.

% \subsubsection{`No room for a new'}\label{noroom}
% Sometime, especially when using \macpackage with other packages, you could obtain warning message such 'no room for a new count' or 'no room for a new write'.
%
% The first thing in order to prevent such problem is to use the options to optimize \macpackage.
% For example, if you need only two series of notes, use \verb+series={A,B}+ option.
% Read \reff{optimize} in order to know which are there  options.
%
% However, if with these options you still have such message, here are some tricks.
% \begin{description}
%  \item['no room for a new count'] is often caused by a conjunction with \protect\package{biblatex}.
%  Load \macpackage (and \parpackage) \emph{before} \protect\package{biblatex}.
%  \item['no room for a new write'] can be caused by with multiple indexes.
% In this case, use \protect\package{indextools} of \protect\package{imakeidx} with the \verb+splitindex+ option, in order to obtain only one \verb+.idx+ file.
% If that does not solve your problem, you can use \protect\package{morewrites} package.
% That should solve the problem, but \LaTeX\ will be slower.
%
% \end{description}
%
% If after reading and applying these advices you have still problem, contact us with a minimal working example.
%
% \subsubsection{Marginal notes}
% In general, \macpackage's system for adding marginal line numbers
% breaks anything that makes direct use of the \LaTeX\ insert system,
% which includes marginpars, footnotes and floats.
%
% However, you can use both \protect\cs{footnote} and the familiar footnote
% series notes in numbered text. A \protect\cs{marginpar} in numbered text
% will throw away its contents and send a warning message to the terminal
% and log file, but will do no harm.
%
% \subsubsection{Paragraph shape}
% \protect\cs{parshape} cannot be used within numbered text, except in a
% very restricted way.
% 
% \DescribeMacro{\ballast}
% \LaTeX\ is a three-pass system, but even after a document has
% been processed three times, there are some tricky situations in
% which the page breaks decided by \TeX\ never settle down.  At
% each successive run, \macpackage may oscillate between two
% different sets of page decisions.  To stop this happening, should
% it arise, Wayne Sullivan\index{Sullivan, Wayne} suggested the
% inclusion of the quantity \protect\cs{ballast}.  The amount of \protect\cs{ballast}
% will be subtracted from the penalties which apply to the page
% breaks calculated on the \emph{previous} run through \TeX, thus
% reinforcing these breaks.  So if you find your page breaks
% oscillating, insert \\
% \verb"\setcounter{ballast}{100}" \\
% or some such figure, and with any
% luck the page breaks will settle down.  Luckily, this problem
% does not crop up at all often.
% \subsubsection{Paragraphed footnotes}\label{paragraphednotes:advanced}
% The restriction on explicit line-breaking in paragraphed footnotes,
% mentioned in a footnote \reff{nobreaks}, and
% described in more detail on \reff{nobreaks-detail}, really is a
% nuisance if that is something you need to do.  There are some possible
% solutions, described by Michael Downes\index{Downes, Michael},
% but this area remains unsatisfactory.
%
%
%
% \DescribeMacro{\footfudgefiddle}
% For paragraphed footnotes \TeX{} has to estimate the amount of space
% required. If it underestimates this then the notes may get too long and
% run off the bottom of the text block. \protect\cs{footfudgefiddle} can be increased
% from its default 64 (say, to 68) to increase the estimate. You have to use 
% \protect\cs{renewcommand} for this, like: \\
% \verb?\renewcommand{\footfudgefiddle}{68}?\\ 
% Note that you must call it \emph{before} \cs{Xarrangement}\arg{paragraph} or \cs{arrangementX}\arg{paragraph}.
%
% Any settings to `geometry' must be made before \cs{Xarrangement} / \cs{arrangementX}.
%
% Finally, in many cases you should use \cs{Xmaxhnotes} and / or \cs{maxhnotesX} (\reff{Xmaxhnotes}), in order to define the maximum height relative to \cs{textheight} and not to \cs{vsize}, because the \cs{vsize} value is not the same inside and outside of the preamble.
% 
% \subsubsection{Use with other packages}
%
% Because of \macpackage's complexity, it may not play well with other
% packages. In particular \macpackage is sensitive to commands in the
% arguments to the \protect\cs{edtext} and \protect\cs{*footnote} macros (this is
% discussed in more detail in section~\ref{text}, and in particular
% the discussion about \protect\cs{no@expands} and \protect\cs{morenoexpands}). You
% will have to see what works or doesn't work in your particular case.
%
% \DescribeMacro{\morenoexpands}
% You can define the macro \protect\cs{morenoexpands} to modify macros that you
% call within \protect\cs{edtext}. Because of the way \macpackage{} numbers the lines
% the arguments to \protect\cs{edtext} can be processed more than once and in some
% cases a macro should only be processed once. One example is the \protect\cs{colorbox}
% macro from the \protect\package{color} package, which you might use like this:
% \begin{verbatim}
% ... \edtext{\colorbox{mycolor}{lemma}}{\Afootnote{...\colorbox...}}
% \end{verbatim}
% If you actually try 
% this\footnote{Reported by Dirk-Jan Dekker\index{Dekker, Dirk-Jan} 
% in the CTT thread `Incompatibility
% of ``color'' package' on 2003/08/28.}
% you will find \LaTeX\ whinging 
% `\texttt{Missing \{ inserted}', and then things start to fall apart.
% The trick in this case is to specify either:
% \begin{verbatim}
% \newcommand{\morenoexpands}{\let\colorbox=0}
% \end{verbatim}
% or
% \begin{verbatim}
% \makeatletter
% \newcommand{\morenoexpands}{\let\colorbox\@secondoftwo}
% \makeatother
% \end{verbatim}
% (\protect\cs{@secondoftwo} is an internal \LaTeX\ macro that takes two arguments and
% throws away the first one.)
% The first incantation lets color show in both the main text and footnotes
% whereas the second one shows color in the main text but kills it
% in the lemma and footnotes. On the other hand if you use 
% \protect\cs{textcolor} instead, like
% \begin{verbatim}
% ... \edtext{\textcolor{mycolor}{lemma}}{\Afootnote{...\textcolor...}}
% \end{verbatim}
% there is no need to fiddle with \protect\cs{morenoexpands} as the color will
% naturally be displayed in both the text and footnotes. To kill the color
% in the lemma and footnotes, though, you can do:
% \begin{verbatim}
% \makeatletter
% \newcommand{\morenoexpands}{\let\textcolor\@secondoftwo}
% \makeatother
% \end{verbatim}
% It took Peter Wilson a little while to discover all this. If you run into this sort 
% of problem you may have to spend some time experimenting before hitting 
% on a solution.
%
%%
%
% If you want to use the option \emph{bottom} of the \protect\package{footmisc} package, 
% you must load this package \emph{before} the \macpackage package.
% 

% \subsubsection{Parallel typesetting}\label{eledpar}
%
%
% Peter Wilson has developed the \ledpar package
% as an extension to \ledmac specifically for parallel typesetting
% of critical texts. This also cooperates with the \protect\package{babel} / \protect\package{polyglossia}
% packages for typesetting in multiple languages. 
% \Parpackage is the successor of the primitive \ledpar package.
% 
%
% Peter Wilson also developed 
% the \protect\package{ledarab} package for 
% handling parallel Arabic text in critical editions.
% However, this package is not maintened by Maïeul Rouquette. 
% You should use the capabilities of a modern TeX processor, like Xe(La)TeX
%
%
%
%
% \StopEventually{}
%
% \clearpage
% \renewcommand{\thesection}{\Roman{section}}
% \renewcommand\theHsection{\Roman{section}}
% \setcounter{section}{0}
%
% \section{Implementation overview}\label{overview}
%
%
% We present the \macpackage code in roughly the order in which it is used
% during a run of \TeX. The order is \emph{exactly} that in which
% it is read when you load The \Eledmac{} package, because the same file
% is used to generate this manual and to generate the \LaTeX\ package file.
%
% Most of what follows consists of macro definitions, but there
% are some commands that are executed immediately---especially
% at the start of the code. The documentation generally describes the
% code from the point of view of what happens when the macros are
% executed, though. As each macro is introduced, its name is printed
% in the margin.
%
% After package options, we begin with the commands you use to start and
% stop line numbering in a section of text (Section~\ref{preliminaries}).
% Next comes the machinery for writing and reading the auxiliary file for
% each section that helps us count lines, and for creating list macros
% encoding the information from that file (Section~\ref{lineation}); this
% auxiliary file will be read at the start of each section, to create
% those list macros, and a new version of the file will be started to
% collect information from the body of the section.
%
% Next are commands for marking sections of
% the text for footnotes (Section~\ref{text}), followed by the macros
% that take each paragraph apart, attach the line numbers and insertions,
% and send the result to the vertical list (Section~\ref{paragraph}). The
% footnote commands (Section~\ref{footnotes}) and output routine
% (Section~\ref{output}) finish the main part of the processing;
% cross-referencing (Section~\ref{xref}) and endnotes
% (Section~\ref{endnotes}) complete the story.
%
% In what follows, macros with an @ in their name are more internal
% to the workings of \macpackage than those made up just of
% ordinary letters, just as in \PlainTeX\ (see \thetexbook,
% p.\,344).  You are meant to be able to make free with
% ordinary macros, but the `@' ones should be treated with more
% respect, and changed only if you are pretty sure of what you are
% doing.
%
%
% \section{Preliminaries}
% \label{preliminaries}\relax
% \subsection{Links with original \edmac}
%    Generally, these are the modifications to the original.
% \edmac{} code:
% \begin{itemize}
% \item Replace as many \protect\cs{def}'s by \protect\cs{newcommand}'s as possible
% to avoid overwriting \LaTeX\ macros.
%
% \item Replace user-level \TeX\ counts by \LaTeX\ counters.
%
% \item Use the \LaTeX\ font handling mechanisms.
%
% \item Use \LaTeX\ messaging and file facilities.
%
% \end{itemize}
%
%
% \subsection{Package declaration}
% Announce the name and version of the package, which is 
% targetted for LaTeX2e.
%
%    \begin{macrocode}
%<*code>
\NeedsTeXFormat{LaTeX2e}
\ProvidesPackage{reledmac}[2015/12/13 v2.7.2 typeset critical edition]%
%    \end{macrocode}
%
% \subsection{Package options}
% \changes{v0.4.0}{2004/02/29}{Added final/draft options}
% \changes{v1.13.0}{2014/09/16}{Added widthliketwocolumns option}
% \begin{macro}{\ifledfinal}
% \begin{macro}{\ifnocritical@}
% \begin{macro}{\if@noeled@sec}
% \begin{macro}{\ifnoend@}
% \begin{macro}{\ifnofamiliar@}
% \begin{macro}{\ifnoledgroup@}
% \begin{macro}{\ifparapparatus@}
% \begin{macro}{\ifnoquotation@}
% \begin{macro}{\iflednopbinverse}
% \begin{macro}{\ifparledgroup}
% \begin{macro}{\ifwidthliketwocolumns}
% \begin{macro}{\ifxindy@}
% \begin{macro}{\ifxindyhyperref@}
% \begin{macro}{\ifeledmaccompat@}
% Use this to remember which option is used, set and execute the options
% with final as the default.
% We use \protect\package{xkeyval} in order to manage options with argument.
%    \begin{macrocode}
\RequirePackage{xkeyval}
%    \end{macrocode}
% The \verb+parledgroup+ option is for \parpackage.
% However, it has consequence on \macpackage internal command.
% So we need to define the boolean now.
%    \begin{macrocode}
\newif\ifparledgroup
%    \end{macrocode}
% And now, the options of \macpackage.
%    \begin{macrocode}
\DeclareOptionX{series}[A,B,C,D,E]{\xdef\default@series{#1}}
\ExecuteOptionsX{series}%

\newif\if@noeled@sec%
\DeclareOptionX{noeledsec}{\@noeled@sectrue}

\newif\ifnocritical@%
\DeclareOptionX{nocritical}{\nocritical@true}%

\newif\ifnofamiliar@%
\DeclareOptionX{nofamiliar}{\nofamiliar@true}%

\newif\ifnoledgroup@%
\DeclareOptionX{noledgroup}{\noledgroup@true}%

\newif\ifnoend@%
\DeclareOptionX{noend}{%
 \let\l@dend@open\@gobble%
 \let\l@dend@close\relax%
  \global\let\l@dend@stuff=\relax%
  \noend@true%
}%

\newif\ifnoquotation@
\DeclareOptionX{noquotation}{\noquotation@true}


\newif\ifledfinal
\DeclareOptionX{final}{\ledfinaltrue}
\DeclareOptionX{draft}{\ledfinalfalse}
\ExecuteOptionsX{final}

\newif\ifparapparatus@
\DeclareOptionX{parapparatus}{\parapparatus@true}

\newif\iflednopbinverse
\DeclareOptionX{nopbinverse}{\lednopbinversetrue}

\newif\ifwidthliketwocolumns%
\DeclareOptionX{widthliketwocolumns}{\widthliketwocolumnstrue}%

\newif\ifxindy@
\DeclareOptionX{xindy}[eledmac-markup-attr.xdy]{%
  \AtBeginDocument{\immediate\openout\eledmac@xindy@out=#1}%
  \newwrite\eledmac@xindy@out%
  \xindy@true%
  \gdef\eledmacmarkuplocrefdepth{:depth 1}%
  \AtEndDocument{\immediate\closeout\eledmac@xindy@out}%
}%

\newif\ifxindyhyperref@
\DeclareOptionX{xindy+hyperref}{%
  \xindyhyperref@true%
}%

\newif\ifeledmaccompat@%
\DeclareOptionX{eledmac-compat}{%
  \eledmaccompat@true%
}%
%    \end{macrocode}
% We use the starred form of \protect\cs{ProcessOptionsX} which executes options in
% the order listed in the source file: class options, then listed package
% options, so a package option can override a class option with the same name.
% This was suggested by Dan Luecking\index{Luecking, Dan} in the \texttt{ctt}
% thread \textit{Class/package option processing}, on 27 February 2004.
%    \begin{macrocode}
\ProcessOptionsX*\relax

%    \end{macrocode}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \subsection{Loading packages}
% Loading package \protect\package{xargs} to declare commands with optional arguments. 
% \protect\package{Etoolbox} is also used to make code clearer - for example, in dynamic command names (which can replace \protect\cs{csname} etc.).  
% Use \protect\package{suffix} to declare commands with a starred version, \protect\package{xstring} to work with strings, \protect\package{ifluatex} and \protect\package{ifxetex} to test if \LuaTeX\ or \XeTeX\  is running, and \protect\package{ragged2e} to manage ragged justification for paragraphed notes.
%  \begin{macrocode}
\RequirePackage{xargs}
\RequirePackage{etoolbox}
\@ifl@t@r\fmtversion{2015/10/01}
 {}%
 {\RequirePackage{etex}%
 \csname reserveinserts\endcsname{32}%
}
\RequirePackage{suffix}
\RequirePackage{xstring}
\RequirePackage{ifluatex}
\RequirePackage{ragged2e}
\RequirePackage{ifxetex}%
%    \end{macrocode}
%
% \subsection{Compatibility with \LuaTeX}
% Here, we enable some primitives for \LuaTeX.
%    \begin{macrocode}
\ifx\directlua\undefined\else%
  \directlua{tex.enableprimitives("",{"textdir","pardir","bodydir"})}
\fi
%    \end{macrocode}
% \subsection{Boolean flags}
% \begin{macro}{\ifl@dmemoir}
% Define a flag for if the \protect\package{memoir} class has been used.
% \changes{v0.2.0}{2003/07/25}{Added \protect\cs{ifl@dmemoir} for memoir class having been used}
%    \begin{macrocode}
\newif\ifl@dmemoir
\@ifclassloaded{memoir}{\l@dmemoirtrue}{\l@dmemoirfalse}

%    \end{macrocode}
% \end{macro}
% \begin{macro}{\if@ledgroup}
% Flag set to true inside a \env{ledgroup} environment.
%    \begin{macrocode}
\newif\if@ledgroup%
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\ifl@imakeidx}
% Define a flag for if the \protect\package{imakeidx} package has been used.
%    \begin{macrocode}
\newif\ifl@imakeidx
\@ifpackageloaded{imakeidx}{\l@imakeidxtrue}{}%False is the default value
%    \end{macrocode} 
% \end{macro}
% \begin{macro}{\ifl@indextools}
% Define a flag for if the \protect\package{indextools} package has been used.
%    \begin{macrocode}
\newif\ifl@indextools%
\@ifpackageloaded{indextools}{%
  \l@indextoolstrue%
  \l@imakeidxtrue%
  \let\imki@wrindexentry\indtl@wrindexentry%
  }{}%
%    \end{macrocode} 
%False is the default value. We consider \protect\package{indextools} as a variant of \protect\package{imakeidx}. That is why we set \protect\cs{ifl@imakeidx} to true. We also let \protect\cs{imki@wrindexentry} to \protect\cs{indtl@wrindexentry}.
% \end{macro}
% \begin{macro}{\if@RTL}
% The \protect\cs{if@RTL} is defined by the bidi package, which is sometimes loaded by \emph{polyglossia}. 
% But we define it as well if the \protect\package{bidi} package is not loaded.
%    \begin{macrocode}
\ifdef{\if@RTL}{}{\newif\if@RTL}
%    \end{macrocode}
% \end{macro}
% \subsection{Messages}
%
% All the messages are grouped here as macros. This saves \TeX's memory
% when the same message is repeated and also lets them be edited easily.
% \changes{v0.7.0}{2005/02/21}{Made macros of all messages}
% \changes{v1.12.3}{2012/08/15}{Add macros for new messages since v0.7}
% 
% \begin{macro}{\reledmac@warning}
% Write a warning message.
%    \begin{macrocode}
\newcommand{\reledmac@warning}[1]{\PackageWarning{reledmac}{#1}}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\reledmac@error}
% Write an error message. 
% \changes{v0.2.0}{2003/07/25}{Added \protect\cs{eledmac@error} and replaced error messages}
% \changes{v1.12.3}{2014/08/15}{Replaced error messages}
%    \begin{macrocode}
\newcommand{\reledmac@error}[2]{\PackageError{reledmac}{#1}{#2}}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\led@err@NumberingStarted}
% \begin{macro}{\led@err@NumberingNotStarted}
% \begin{macro}{\led@err@NumberingShouldHaveStarted}
%    \begin{macrocode}
\newcommand*{\led@err@NumberingStarted}{%
  \reledmac@error{Numbering has already been started}{\@ehc}}
\newcommand*{\led@err@NumberingNotStarted}{%
  \reledmac@error{Numbering was not started}{\@ehc}}
\newcommand*{\led@err@NumberingShouldHaveStarted}{%
  \reledmac@error{Numbering should already have been started}{\@ehc}}
%    \end{macrocode}
% \end{macro}
% \end{macro}
% \end{macro}
%
% \begin{macro}{\led@err@edtextoutsidepstart}
%    \begin{macrocode}
\newcommand*{\led@err@edtextoutsidepstart}{%
  \reledmac@error{\string\edtext\space outside numbered paragraph (\pstart\ldots\pend)}{\@ehc}}%
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\led@mess@NotesChanged}
%    \begin{macrocode}
\newcommand*{\led@mess@NotesChanged}{%
  \typeout{reledmac reminder: }%
  \typeout{ The number of the footnotes in this section
            has changed since the last run.}%
  \typeout{ You will need to run LaTeX two more times
            before the footnote placement}%
  \typeout{ and line numbering in this section are
            correct.}}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\led@mess@SectionContinued}
%    \begin{macrocode}
\newcommand*{\led@mess@SectionContinued}[1]{%
  \message{Section #1 (continuing the previous section)}}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\led@err@LineationInNumbered}
%    \begin{macrocode}
\newcommand*{\led@err@LineationInNumbered}{%
  \reledmac@error{You can't use \string\lineation\space within
                a numbered section}{\@ehc}}
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\led@warn@BadLineation}
% \begin{macro}{\led@warn@BadLinenummargin}
% \begin{macro}{\led@warn@BadLockdisp}
% \begin{macro}{\led@warn@BadSublockdisp}
%    \begin{macrocode}
\newcommand*{\led@warn@BadLineation}{%
  \reledmac@warning{Bad \string\lineation\space argument}}
\newcommand*{\led@warn@BadLinenummargin}{%
  \reledmac@warning{Bad \string\linenummargin\space argument}}
\newcommand*{\led@warn@BadLockdisp}{%
  \reledmac@warning{Bad \string\lockdisp\space argument}}
\newcommand*{\led@warn@BadSublockdisp}{%
  \reledmac@warning{Bad \string\sublockdisp\space argument}}
%    \end{macrocode}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
%
% \begin{macro}{\led@warn@NoLineFile}
%    \begin{macrocode}
\newcommand*{\led@warn@NoLineFile}[1]{%
  \reledmac@warning{Can't find line-list file #1}}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\led@warn@LineFileObsolete}
%    \begin{macrocode}
\newcommand*{\led@warn@Obsolete}[1]{%
  \reledmac@warning{Line-list file #1 was obsolete. We have not read it. Please run LaTeX again.}}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\led@warn@BadAdvancelineSubline}
% \begin{macro}{\led@warn@BadAdvancelineLine}
%    \begin{macrocode}
\newcommand*{\led@warn@BadAdvancelineSubline}{%
  \reledmac@warning{\string\advanceline\space produced a sub-line
                  number less than zero.}}
\newcommand*{\led@warn@BadAdvancelineLine}{%
  \reledmac@warning{\string\advanceline\space produced a line
                  number less than zero.}}
%    \end{macrocode}
% \end{macro}
% \end{macro}
%
% \begin{macro}{\led@warn@BadSetline}
% \begin{macro}{\led@warn@BadSetlinenum}
%    \begin{macrocode}
\newcommand*{\led@warn@BadSetline}{%
  \reledmac@warning{Bad \string\setline\space argument}}
\newcommand*{\led@warn@BadSetlinenum}{%
  \reledmac@warning{Bad \string\setlinenum\space argument}}
%    \end{macrocode}
% \end{macro}
% \end{macro}
%
% \begin{macro}{\led@err@PstartNotNumbered}
% \begin{macro}{\led@err@PstartInPstart}
% \begin{macro}{\led@err@PendNotNumbered}
% \begin{macro}{\led@err@PendNoPstart}
% \begin{macro}{\led@err@AutoparNotNumbered}
% \begin{macro}{\led@err@NumberingWithoutPstart}
%    \begin{macrocode}
\newcommand*{\led@err@PstartNotNumbered}{%
  \reledmac@error{\string\pstart\space must be used within a 
                numbered section}{\@ehc}}
\newcommand*{\led@err@PstartInPstart}{%
  \reledmac@error{\string\pstart\space encountered while another
                \string\pstart\space was in effect}{\@ehc}}
\newcommand*{\led@err@PendNotNumbered}{%
  \reledmac@error{\string\pend\space must be used within a 
                numbered section}{\@ehc}}
\newcommand*{\led@err@PendNoPstart}{%
  \reledmac@error{\string\pend\space must follow a \string\pstart}{\@ehc}}
\newcommand*{\led@err@AutoparNotNumbered}{%
  \reledmac@error{\string\autopar\space must be used within a 
                numbered section}{\@ehc}}
\newcommand*{\led@err@NumberingWithoutPstart}{%
  \reledmac@error{\string\beginnumbering...\string\endnumbering\space without \string\pstart}{\@ehc}}%
%    \end{macrocode}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
%
% \begin{macro}{\led@warn@BadAction}
%    \begin{macrocode}
\newcommand*{\led@warn@BadAction}{%
  \reledmac@warning{Bad action code, value \next@action.}}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\led@warn@DuplicateLabel}
% \begin{macro}{\led@warn@AppLabelOutEdtext}
% \begin{macro}{\led@warn@RefUndefined}
% \begin{macro}{\led@warn@RefUndefined}
%    \begin{macrocode}
\newcommand*{\led@warn@DuplicateLabel}[1]{%
  \reledmac@warning{Duplicate definition of label `#1'\@gobble}%
  \@latex@warning@no@line{Label `#1' multiply defined}%
}%
\newcommand*{\led@warn@AppLabelOutEdtext}[1]{%
  \reledmac@warning{\string\applabel\space outside of \string\edtext\space `#1' on page \the\pageno.}}%
\newcommand*{\led@warn@RefUndefined}[1]{%
  \G@refundefinedtrue%
  \reledmac@warning{Reference `#1' on page \the\pageno\space undefined.%
                  Using `000'.}%
  \@latex@warning{Reference `#1' on page \thepage \space%
             undefined}%
}%
\newcommand*{\led@warn@pairRefUndefined}[1]{%
  \G@refundefinedtrue%
  \reledmac@warning{Reference `#1:start' and/or `#1:end' on page \the\pageno\space undefined.
                  Using `??'.}}
%    \end{macrocode}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
%
% \begin{macro}{\led@warn@NoMarginpars}
%    \begin{macrocode}
\newcommand*{\led@warn@NoMarginpars}{%
  \reledmac@warning{You can't use \string\marginpar\space in numbered text}}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\led@warn@BadSidenotemargin}
%    \begin{macrocode}
\newcommand*{\led@warn@BadSidenotemargin}{%
  \reledmac@warning{Bad \string\sidenotemmargin\space argument}}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\led@warn@NoIndexFile}
%    \begin{macrocode}
\newcommand*{\led@warn@NoIndexFile}[1]{%
  \reledmac@warning{Undefined index file #1}}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\led@warn@SeriesStillExist}
%    \begin{macrocode}
\newcommand{\led@warn@SeriesStillExist}[1]{%
  \reledmac@warning{Series #1 is still existing !}%
}%
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\led@err@ManySidenotes}
% \begin{macro}{\led@err@ManyLeftnotes}
% \begin{macro}{\led@err@ManyRightnotes}
%    \begin{macrocode}
\newcommand{\led@err@ManySidenotes}{%
  \ifledRcol@%
     \reledmac@warning{\itemcount@\space sidenotes on line \the\line@numR\space p. \the\page@numR}%
  \else%
     \reledmac@warning{\itemcount@\space sidenotes on line \the\line@num\space p. \the\page@num}%
  \fi%
}%
\newcommand{\led@err@ManyLeftnotes}{%
  \ifledRcol@%
    \reledmac@warning{\itemcount@\space leftnotes on line \the\line@numR\space p. \the\page@numR}%
  \else%
    \reledmac@warning{\itemcount@\space leftnotes on line \the\line@num\space p. \the\page@num}%
  \fi%
}%
\newcommand{\led@err@ManyRightnotes}{%
  \ifledRcol@%
    \reledmac@warning{\itemcount@\space rightnotes on line \the\line@numR\space p. \the\page@numR}%
  \else%
    \reledmac@warning{\itemcount@\space rightnotes on line \the\line@num\space p. \the\page@num}%
  \fi%
}%
%    \end{macrocode}
% \end{macro}
% \end{macro}
% \end{macro}
% \begin{macro}{\led@err@TooManyColumns}
% \begin{macro}{\led@err@UnequalColumns}
% \begin{macro}{\led@err@LowStartColumn}
% \begin{macro}{\led@err@HighEndColumn}
% \begin{macro}{\led@err@ReverseColumns}
%    \begin{macrocode}
\newcommand*{\led@err@TooManyColumns}{%
  \reledmac@error{Too many columns}{\@ehc}}
\newcommand*{\led@err@UnequalColumns}{%
  \reledmac@error{Number of columns is not equal to the number
                in the previous row (or \protect\\ \space forgotten?)}{\@ehc}}
\newcommand*{\led@err@LowStartColumn}{%
  \reledmac@error{Start column is too low}{\@ehc}}
\newcommand*{\led@err@HighEndColumn}{%
  \reledmac@error{End column is too high}{\@ehc}}
\newcommand*{\led@err@ReverseColumns}{%
  \reledmac@error{Start column is greater than end column}{\@ehc}}
%    \end{macrocode}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
%
% \begin{macro}{\led@err@EdtextWithoutFootnote}
%    \begin{macrocode}
\newcommand{\led@err@EdtextWithoutFootnote}{%
  \reledmac@error{edtext without Xfootnote. Check syntaxis.}{\@ehc}%
}%
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\led@err@FootnoteWithoutEdtext}
%    \begin{macrocode}
\newcommand{\led@err@FootnoteWithoutEdtext}{%
  \reledmac@error{Xfootnote without edtext. Check syntax.}{\@ehc}%
}%
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\led@error@ImakeidxAfterEledmac}
%    \begin{macrocode}
\newcommand{\led@error@ImakeidxAfterEledmac}{%
  \reledmac@error{Imakeidx must be loaded before reledmac.}{\@ehc}%
}%
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\led@error@IndextoolsAfterEledmac}
%    \begin{macrocode}
\newcommand{\led@error@IndextoolsAfterEledmac}{%
  \reledmac@error{Indextools must be loaded before reledmac.}{\@ehc}%
}%
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\led@error@fail@patch@@makecol}
%    \begin{macrocode}
\newcommand{\led@error@fail@patch@@makecol}{%
  \reledmac@error{Fail to patch \string\@makecol\space command.}{\@ehc}%
}%
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\led@error@fail@patch@@reinserts}
%    \begin{macrocode}
\newcommand{\led@error@fail@patch@@reinserts}{%
  \reledmac@error{Fail to patch \string\@reinserts\space command.}{\@ehc}%
}%
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\led@error@fail@patch@@doclearpage}
%    \begin{macrocode}
\newcommand{\led@error@fail@patch@@doclearpage}{%
  \reledmac@error{Fail to patch \string\@doclearpage\space command.}{\@ehc}%
}%
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\led@error@fail@patch@@iiiminipage}
%    \begin{macrocode}
\newcommand{\led@error@fail@patch@@iiiminipage}{%
  \reledmac@error{Fail to patch \string\@iiiminipage\space command.}{\@ehc}%
}%
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\led@error@fail@patch@endminipage}
%    \begin{macrocode}
\newcommand{\led@error@fail@patch@endminipage}{%
  \reledmac@error{Fail to patch \string\endminipage\space command.}{\@ehc}%
}%
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\led@warning@hsizeX@deprecated}
%    \begin{macrocode}
\newcommand{\led@warning@hsizeX@deprecated}{%    
  \reledmac@warning{\string\hsizeX\space command deprecated, use \string\widthX\space instead.}%
}%
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\led@warning@Xhsize@deprecated}
%    \begin{macrocode}
\newcommand{\led@warning@Xhsize@deprecated}{%
  \reledmac@warning{\string\Xhsize\space command deprecated, use \string\Xwidth\space instead.}%
}%
%    \end{macrocode}
% \end{macro}
% \subsection{Gobbling}
% \changes{v1.14.0}{2014/10/27}{Provide \protect\cs{@gobblefour}}
% \changes{v1.14.0}{2014/10/27}{Move gobbling command}
% \changes{v1.21.0}{2015/04/13}{Provide \protect\cs{@gobblefive}}
% \changes{v0.2.2}{2003/11/05}{Used \protect\cs{providecommand} for \protect\cs{@gobblethree}
%  to avoid clash with the amsfonts package}
% Here, we define some commands which gobble their arguments.
% \begin{macro}{\@gobblethree}
% \begin{macro}{\@gobblefour}
% \begin{macro}{\@gobblefive}
%    \begin{macrocode}
\providecommand*{\@gobblethree}[3]{}
\providecommand*{\@gobblefour}[4]{}
\providecommand*{\@gobblefive}[5]{}
%    \end{macrocode}
% \end{macro}
% \end{macro}
% \end{macro}
% \subsection{Miscellaneous commands}
% \begin{macro}{\showlemma}
% \verb?\showlemma?\marg{lemma} typesets the lemma text in the body.
% It depends on the option.
% \changes{v0.4.0}{2004/02/29}{Added \protect\cs{showlemma}}
%    \begin{macrocode}
\ifledfinal
  \newcommand*{\showlemma}[1]{#1}
\else
  \newcommand*{\showlemma}[1]{\underline{#1}}
\fi

%    \end{macrocode}
% \end{macro}
% \begin{macro}{\linenumberlist}
% The code for the \protect\cs{linenumberlist} mechanism was given to Peter Wilson by Wayne
% Sullivan\index{Sullivan, Wayne} on 2004/02/11.
%
% Initialize it as \protect\cs{empty}.
%
% \changes{v0.3.0}{2004/02/14}{Added \protect\cs{linenumberlist} mechanism}
%    \begin{macrocode}
\let\linenumberlist=\empty

%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\@l@dtempcnta}
% \begin{macro}{\@l@dtempcntb}
% In imitation of \LaTeX, we create a couple of scratch counters.
%
% \LaTeX\ already defines \protect\cs{@tempcnta} and \protect\cs{@tempcntb} but Peter Wilson
% found in the past that it can be dangerous to use these (for example
% one of the AMS packages did something nasty to the \protect\package{ccaption}
% package's use of one of these).
%    \begin{macrocode}
\newcount\@l@dtempcnta \newcount\@l@dtempcntb
%    \end{macrocode}
% \end{macro}
% \end{macro}
% \subsection{Prepare \parpackage}
% \begin{macro}{\ifl@dpairing}
% \begin{macro}{\ifl@dpaging}
% \begin{macro}{\ifl@dprintingpages}
% \begin{macro}{\ifl@dprintingcolumns}
% \begin{macro}{\ifpst@rtedL}
% \begin{macro}{\l@dnumpstartsL}

% In preparation for the \parpackage  package, these are related to 
% the `right' text of parallel texts (when \protect\cs{ifl@dpairing} is TRUE). 
% They are explained in the \protect\package{eledpar}
% manual.
% \changes{v0.7.0}{2005/02/24}{Added \protect\cs{l@dnumpstartsL}, \protect\cs{ifl@dpairing} 
%              and \protect\cs{ifpst@rted} for/from eledpar}
% \changes{v0.12.0}{2005/10/01}{Added \protect\cs{ifledRcol} and \protect\cs{ifnumberingR} for/from \protect\package{eledpar}}
% \changes{v1.12.0}{2014/08/05}{Add \protect\cs{ifledRcol@} for \protect\package{eledpar}}
% \changes{v1.13.2}{2014/09/31}{Add \protect\cs{ifl@dpaging} for \protect\package{eledpar}}
% \changes{v1.18.0}{2015/02/23}{Add \protect\cs{ifl@dprintingpages} and \protect\cs{@dprintingcolumns} for \protect\package{eledpar}}
%    \begin{macrocode}
\newif\ifl@dpairing
\newif\ifl@dpaging%
\newif\ifl@dprintingpages%
\newif\ifl@dprintingcolumns%
\newif\ifpst@rtedL
\newcount\l@dnumpstartsL
%    \end{macrocode}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \begin{macro}{\ifledRcol}
% \begin{macro}{\ifledRcol@}
% \protect\cs{ifledRcol} is set to true in the \verb+Rightside+ environnement. It must be not confused with \protect\cs{ifledRcol@} which is set to true when a right line is processed, in \protect\cs{Pages} or \protect\cs{Columns}. 
%    \begin{macrocode}
\newif\ifledRcol
\newif\ifledRcol@
%    \end{macrocode}
% \end{macro}
% \end{macro}
% \begin{macro}{\ifnumberingR}
% The \protect\cs{ifnumberingR} flag is
% set to \verb"true" if we're within a right text numbered section.
%    \begin{macrocode}
\newif\ifnumberingR
%    \end{macrocode}
% The \cs{ifXnote@} macro is set to true when we are typesetting a critical footnote.
%    \begin{macrocode}
\newif\ifXnote@%
%    \end{macrocode}
% \end{macro}
% \subsection{Booleans provided by other optional packages which are required in any case}
% \begin{macro}{\ifindtl@innote}
% \begin{macro}{\ifindtl@notenumber}
% The \cs{ifindtl@innote} and \cs{ifindtl@notenumber} are required even if \package{indextools} is not used.
%    \begin{macrocode}
\providebool{indtl@innote}%
\providebool{indtl@notenumber}%
%    \end{macrocode}
% \end{macro}
% \end{macro}

%
%\section{Sectioning commands}
%
% \begin{macro}{\section@num}
% You use \protect\cs{beginnumbering} and \protect\cs{endnumbering} to begin
% and end a line-numbered section of the text; the pair of commands may
% be used as many times as you like within one document to start
% and end multiple, separately line-numbered sections. \LaTeX\ will
% maintain and display 
% a `section number' as a count named
% \protect\cs{section@num} that counts how many
% \protect\cs{beginnumbering} and \protect\cs{resumenumbering}
% commands have appeared; it need not be
% related to the logical divisions of your text.
%
% \begin{macro}{\extensionchars}
% Each section will read and write an associated `line-list
% file', containing information used to do the numbering; the file
% will be called \meta{jobname}\file{.nn}, where \file{nn} is the
% section number. However, you may direct that
% an extra string be added before the
% \file{nn} in that filename, in order to distinguish these
% temporary files from others: that string is called
% \protect\cs{extensionchars}. Initially it's empty, since different
% operating systems have greatly varying ideas about what
% characters are permitted in file names.  So
% \verb"\renewcommand{\extensionchars}{-}" gives temporary files called
% \file{jobname.-1}, \file{jobname.-2}, etc.
%    \begin{macrocode}
\newcount\section@num
\section@num=0
\let\extensionchars=\empty
%    \end{macrocode}
% \end{macro}
% \end{macro}
%
% \begin{macro}{\ifnumbering}
% \begin{macro}{\numberingtrue}
% \begin{macro}{\numberingfalse}
% The \protect\cs{ifnumbering} flag is
% set to \verb"true" if we are within a numbered section (that is, between
% \protect\cs{beginnumbering} and \protect\cs{endnumbering}). You can use \protect\cs{ifnumbering}
% in your own code to check whether you are in a numbered section, but
% do not change the flag's value.
%    \begin{macrocode}
\newif\ifnumbering
%    \end{macrocode}
% \end{macro}
% \end{macro}
% \end{macro}
%
% \begin{macro}{\beginnumbering}
% \begin{macro}{\initnumbering@reg}
% \protect\cs{beginnumbering} begins a section of numbered text.
% When it is executed we increment the section number,
% initialize our counters, send a message to your terminal, and
% call macros to start the lineation machinery and endnote files.
%
% The initializations here are trickier than they look.
% \protect\cs{line@list@stuff} will use all of the counters
% that are zeroed here when it assembles
% the line-list and other lists of information about the lineation.
% But it will do all of this locally and
% within a group, and when it is done the
% lists will remain but the counters will return to zero. Those same
% counters will then be used as we process the text of this section,
% but the assignments will be made globally. These initializations
% actually apply to both uses, though in all other respects there
% should be no direct interaction between the use of these counters
% and variables in the two processing steps.
% \changes{v0.7.0}{2005/02/24}{Added \protect\cs{initnumbering@reg}}
% \changes{v1.12.0}{2014/08/05}{\protect\cs{beginnumbering} is defined only on \protect\package{eledmac}, not on \protect\package{eledpar}.}
% For parallel processing :
%\begin{itemize}
%  \item zero \protect\cs{l@dnumpstartsL} --- the number of chunks to be processed.
%  \item set \protect\cs{ifpst@rtedL} to FALSE.
% \end{itemize}
%    \begin{macrocode}
\newcommand*{\beginnumbering}{%
  \ifnumbering
    \led@err@NumberingStarted
    \endnumbering
  \fi
  \global\numberingtrue
  \global\advance\section@num \@ne
  \initnumbering@reg
  \message{Section \the\section@num }%
  \line@list@stuff{\jobname.\extensionchars\the\section@num}%
  \l@dend@stuff
  \setcounter{pstart}{1}
  \ifl@dpairing
    \global\l@dnumpstartsL \z@
    \global\pst@rtedLfalse
%    \end{macrocode}
% The tools for section's title commands are called:
% \begin{itemize}
%   \item Define an empty list of pstart number where sectioning commands are called.
%   \item Input auxiliary file with the description of section titles.
%   \item Open the same auxiliary file to write in.
% \end{itemize} 
%    \begin{macrocode}
  \else
    \begingroup
    \global\@afterindenttrue%In order to retablish normal feature if the \begingroup was not here
    \initnumbering@quote
    \ifwidthliketwocolumns%
       \csuse{setwidthliketwocolumns@\columns@position}%
       \csuse{setpositionliketwocolumns@\columns@position}%
    \fi%
  \fi
  \gdef\eled@sections@@{}%
  \if@noeled@sec\else%
    \makeatletter\InputIfFileExists{\jobname.eledsec\the\section@num}{}{}\makeatother%
    \immediate\openout\eled@sectioning@out=\jobname.eledsec\the\section@num\relax%
  \fi%
}
\newcommand*{\initnumbering@reg}{%
  \global\pst@rtedLfalse
  \global\l@dnumpstartsL \z@
  \global\absline@num \z@
  \gdef\normal@page@break{}
  \gdef\l@prev@pb{}
  \gdef\l@prev@nopb{}
  \global\line@num \z@
  \global\subline@num \z@
  \global\@lock \z@
  \global\sub@lock \z@
  \global\sublines@false
  \global\let\next@page@num=\relax
  \global\let\sub@change=\relax
  \resetprevline@
  \resetprevpage@num
  }

%    \end{macrocode}
% \end{macro}
% \end{macro}
%
% \begin{macro}{\endnumbering}
% \protect\cs{endnumbering} must follow the last text for a numbered section.
% It takes care of notifying you when changes have been noted in the
% input that require running the file through again to move everything
% to the right place.
% \changes{v0.7.0}{2005/02/24}{Changed \protect\cs{endnumbering} for eledpar}
% \changes{v1.12.5}{2014/08/31}{Allow to mix parallel columns and normal text when using \protect\cs{pausenumbering}}
%    \begin{macrocode}
\def\endnumbering{%
  \ifnumbering
    \global\numberingfalse
    \normal@pars
    \ifnum\l@dnumpstartsL=0%
      \led@err@NumberingWithoutPstart%
    \fi%
    \ifl@dpairing
      \global\pst@rtedLfalse
    \else
      \ifx\insertlines@list\empty\else
        \global\noteschanged@true
      \fi
      \ifx\line@list\empty\else
        \global\noteschanged@true
      \fi
    \fi
    \ifnoteschanged@
      \led@mess@NotesChanged
    \fi
  \else
    \led@err@NumberingNotStarted
  \fi
  \autoparfalse  
  \if@noeled@sec\else%
    \immediate\closeout\eled@sectioning@out%
  \fi%
  \ifl@dpairing\else
    \global\l@dnumpstartsL=\z@%
    \endgroup
  \fi
}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\pausenumbering}
% \begin{macro}{\resumenumbering}
% The \protect\cs{pausenumbering} macro is just the same as
% \protect\cs{endnumbering}, but with the \protect\cs{ifnumbering} flag set to \verb"true", to
% show that numbering continues across the gap.\footnote{Peter Wilson's thanks
% to Wayne Sullivan,\index{Sullivan, Wayne} who suggested the idea
% behind these macros.}
%    \begin{macrocode}
\newcommand{\pausenumbering}{%
  \ifautopar\global\autopar@pausetrue\fi%
  \endnumbering\global\numberingtrue}
%    \end{macrocode}
% The \protect\cs{resumenumbering} macro is a bit more involved, but not much.
% It does most of the same things as \protect\cs{beginnumbering}, but
% without resetting the various counters. Note that no check is made
% by \protect\cs{resumenumbering} to ensure that \protect\cs{pausenumbering} was actually
% invoked.
% \changes{v0.7.0}{2005/02/24}{Changed \protect\cs{resumenumbering} for eledpar}
% \changes{v1.12.5}{2014/08/31}{Debug \protect\cs{resumenumbering}}
%    \begin{macrocode}
\newcommand*{\resumenumbering}{%
  \ifnumbering
     \ifautopar@pause\autopar\fi
     \global\pst@rtedLtrue
     \global\advance\section@num \@ne
     \led@mess@SectionContinued{\the\section@num}%
     \line@list@stuff{\jobname.\extensionchars\the\section@num}%
     \l@dend@stuff
     \ifl@dpairing\else%
        \begingroup%
        \initnumbering@quote%
        \ifwidthliketwocolumns%
          \csuse{setwidthliketwocolumns@\columns@position}%
          \csuse{setpositionliketwocolumns@\columns@position}%
        \fi%
     \fi%
  \else
    \led@err@NumberingShouldHaveStarted
    \endnumbering
    \beginnumbering
  \fi}


%    \end{macrocode}
% \end{macro}
% \end{macro}
%
% \section{List macros}
%
%
% We will make heavy use of lists of information, which will be built
% up and taken apart by the following macros; they are
% adapted from \thetexbook, pp.\,378--379, which discusses
% their use in more detail.
%
% These macros consume a large amount of the run-time of this code.
% We intend to replace them in a future version, and in anticipation
% of doing so have defined their interface in such a way that it is
% not sensitive to details of the underlying code.
%
% The historical list tools of \ledmac are keept, because in many cause there are more useful than \protect\package{etoolbox}'s lists.
% They allows to get and delete the first element of a list in one operation. They also expands the items add to the list.
%
% However, \protect\package{etoolbox}'s lists are more useful to loop on them.
% Consequently, depending of what we need, we use one or either.
%
% It could be nice to unify them to the \LaTeX3 list, however such migration would take quite time with some risk of error, for a gain which will be minor.
%
% \begin{macro}{\list@create}
% The \protect\cs{list@create} macro creates a new list. 
% This macro does not do anything beyond initializing an empty
% list macro.
% 
%    \begin{macrocode}
\newcommand*{\list@create}[1]{%
  \global\let#1=\empty%
}%
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\list@clear}
% The \protect\cs{list@clear} macro just initializes a list to the empty list;
% it is no different from
% \protect\cs{list@create} in its effect, but it is in its semantic .
%    \begin{macrocode}
\newcommand*{\list@clear}[1]{%
  \global\let#1=\empty%
}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\xright@appenditem}
% \begin{macro}{\led@toksa}
% \begin{macro}{\led@toksb}
% \protect\cs{xright@appenditem} expands an item and appends it to the right
% end of a list macro. We want the expansion because we will often
% be using this to store the current value of a counter.
% \protect\cs{xright@appenditem} creates global control sequences, like \protect\cs{xdef}, and uses two
% temporary token-list registers, \protect\cs{@toksa} and \protect\cs{@toksb}.
%    \begin{macrocode}
\newtoks\led@toksa \newtoks\led@toksb
\global\led@toksa={\\}
\long\def\xright@appenditem#1\to#2{%
  \global\led@toksb=\expandafter{#2}%
  \xdef#2{\the\led@toksb\the\led@toksa\expandafter{#1}}%
  \global\led@toksb={}}
%    \end{macrocode}
% \end{macro}
% \end{macro}
% \end{macro}
%
% \begin{macro}{\xleft@appenditem}
% \protect\cs{xleft@appenditem} expands an item and appends it to the left
% end of a list macro; it is otherwise identical to
% \protect\cs{xright@appenditem}.
%    \begin{macrocode}
\long\def\xleft@appenditem#1\to#2{%
  \global\led@toksb=\expandafter{#2}%
  \xdef#2{\the\led@toksa\expandafter{#1}\the\led@toksb}%
  \global\led@toksb={}}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\gl@p}
% The \protect\cs{gl@p} macro removes the leftmost
% item from a list and places it in a
% control sequence. You type \verb"\gl@p\l\to\z"
% (where \verb"\l" is the list macro, and
% \verb"\z" receives the left item). \verb"\l" is assumed nonempty:use
% \verb"\ifx\l\empty" to test for an empty \verb"\l". The control
% sequences created by \protect\cs{gl@p} are all global.
%    \begin{macrocode}
\def\gl@p#1\to#2{\expandafter\gl@poff#1\gl@poff#1#2}
\long\def\gl@poff\\#1#2\gl@poff#3#4{\gdef#4{#1}\gdef#3{#2}}

%    \end{macrocode}
% \end{macro}
%
% \section{Line counting}
% \label{lineation}\relax
%
% \subsection{Choosing the system of lineation}
% \changes{v0.15.0}{2012/06/11}{Line numbering can be reset at each pstart.}
% Line number can be reset at each section (default) ; at each page ; at each pstart.
% Here we define
% internal codes for these systems and the macros.
%
%
% \begin{macro}{\ifbypstart@}
% \begin{macro}{\bypstart@true}
% \begin{macro}{\bypstart@false}
% \begin{macro}{\ifbypage@}
% \begin{macro}{\bypage@true}
% \begin{macro}{\bypage@false}
% The \protect\cs{ifbypage@} and \protect\cs{ifbypstart@} flag specifie the current lineation
% system: \begin{itemize}
% \item line-of-page: \verb|bypstart@ = false| and \verb|bypage@ = true|.
% \item line-of-pstart: \verb|bypstart@ = true| and \verb|bypage@ = false|.
% \end{itemize}
% \Macpackage will use the line-of-section system unless instructed otherwise.
%    \begin{macrocode}
\newif\ifbypage@
\newif\ifbypstart@
%    \end{macrocode}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
%
% The \protect\cs{ifbypage@R} and \protect\cs{ifbypstart@R} flag specifie the current lineation for right side in case of using \parpackage. They are now defined  because they are used in some specific code.
% \Parpackage will use the line-of-section system unless instructed otherwise.
% \begin{macro}{\ifbypage@R}
% \begin{macro}{\ifbypstart@R}
%    \begin{macrocode}
\newif\ifbypage@R
\newif\ifbypstart@R
%    \end{macrocode}
% \end{macro}
% \end{macro}
% \begin{macro}{\lineation}
% \protect\cs{lineation}\marg{word} is the macro you use to select the 
% lineation system.
% Its argument is a string: either \verb+page+, \verb+section+ or \verb+pstart+.
%    \begin{macrocode}
\newcommand*{\lineation}[1]{{
%    \end{macrocode}
% We can't change the lineation system inside numbering section.
%    \begin{macrocode}
  \ifnumbering
    \led@err@LineationInNumbered
  \else
%   \end{macrocode}
% If the argument is \verb+page+.
%   \begin{macrocode}
    \def\@tempa{#1}\def\@tempb{page}%
    \ifx\@tempa\@tempb
        \global\bypage@true
        \global\bypstart@false
        \unless\ifnocritical@%
          \Xpstart[][false]%
        \fi%
%   \end{macrocode}
% If the argument is \verb+pstart+.
%   \begin{macrocode}
    \else
       \def\@tempb{pstart}%
       \ifx\@tempa\@tempb
           \global\bypage@false
           \global\bypstart@true
           \unless\ifnocritical@%
             \Xpstart%
           \fi%
%   \end{macrocode}
% And finally, if the argument is \verb+section+ (default).
%   \begin{macrocode}
       \else
          \def\@tempb{section}
          \ifx\@tempa\@tempb
           \global\bypage@false
           \global\bypstart@false
           \unless\ifnocritical@%
             \Xpstart[][false]%
           \fi%
%    \end{macrocode}
% In other case, it is an error.
%    \begin{macrocode}
	   \else
            \led@warn@BadLineation
        \fi
       \fi
    \fi
  \fi}}
%    \end{macrocode}
% \end{macro}
% \subsection{Line number margin}
% \begin{macro}{\linenummargin}
% \begin{macro}{\line@margin}
% \begin{macro}{\l@dgetline@margin}
% \protect\cs{linenummargin}\marg{word} specify which margin 
% line numbers are in; it takes one argument, a string, which value can be
% \verb+left+ ;  \verb+right+;  \verb+inner+ or
% \verb+outer+.
%
% The selection is recorded in the count \protect\cs{line@margin}:
% $0$ for left, $1$ for right, $2$ for outer, and $3$ for inner.
% \changes{v0.7.0}{2005/02/23}{Added \protect\cs{l@dgetline@margin}}
%    \begin{macrocode}
\newcount\line@margin

\newcommand*{\linenummargin}[1]{{%
  \l@dgetline@margin{#1}%
  \ifnum\@l@dtempcntb>\m@ne
    \ifledRcol
      \global\line@marginR=\@l@dtempcntb
      \led@warn@setting@in@rightside{\linenummargin}%
    \else
      \global\line@margin=\@l@dtempcntb
    \fi
  \fi}}

\newcommand*{\l@dgetline@margin}[1]{%
  \def\@tempa{#1}\def\@tempb{left}%
  \ifx\@tempa\@tempb
    \@l@dtempcntb \z@
  \else
     \def\@tempb{right}%
     \ifx\@tempa\@tempb
       \@l@dtempcntb \@ne
     \else
       \def\@tempb{outer}%
       \ifx\@tempa\@tempb
         \@l@dtempcntb \tw@
       \else
         \def\@tempb{inner}%
         \ifx\@tempa\@tempb
           \@l@dtempcntb \thr@@
         \else
           \led@warn@BadLinenummargin
           \@l@dtempcntb \m@ne
         \fi
       \fi
     \fi
  \fi}

%    \end{macrocode}
% \end{macro}
% \end{macro}
% \end{macro}
% \subsection{Line number initialization and increment}
% \begin{macro}{\c@firstlinenum}
% \begin{macro}{\c@linenumincrement}
% The following counters tell \macpackage which lines should be
% printed with line numbers. \verb+firstlinenum+ is the number of the
% first line in each section that gets a number;
% \verb+linenumincrement+
% is the difference between successive numbered lines. The initial
% values of these counters produce labels on lines $5$, $10$, $15$, etc.
% \verb+linenumincrement+ must be at least $1$.
% 
%    \begin{macrocode}
\newcounter{firstlinenum}
  \setcounter{firstlinenum}{5}
\newcounter{linenumincrement}
  \setcounter{linenumincrement}{5}
%    \end{macrocode}
% \end{macro}
% \end{macro}
%
% \begin{macro}{\c@firstsublinenum}
% \begin{macro}{\c@sublinenumincrement}
% The following parameters are just like \verb+firstlinenum+ and
% \verb+linenumincrement+, but for sub-line numbers.
% \verb+sublinenumincrement+ must be at least $1$.
%
%    \begin{macrocode}
\newcounter{firstsublinenum}
  \setcounter{firstsublinenum}{5}
\newcounter{sublinenumincrement}
  \setcounter{sublinenumincrement}{5}

%    \end{macrocode}
% \end{macro}
% \end{macro}
%
% \begin{macro}{\firstlinenum}
% \begin{macro}{\linenumincrement}
% \begin{macro}{\firstsublinenum}
% \begin{macro}{\sublinenumincrement}
% These macros can be used to set the corresponding counters.
% \changes{v0.7.0}{2005/02/18}{Added \protect\cs{firstlinenum}, \protect\cs{linenumincrement},
%              \protect\cs{firstsublinenum} and \protect\cs{linenumincrement}}
%    \begin{macrocode}

\newcommand*{\firstlinenum}[1]{%
  \ifledRcol%
    \setcounter{firstlinenumR}{#1}%
    \led@warn@setting@in@rightside{\firstlinenum}%
  \else%      
    \setcounter{firstlinenum}{#1}%
  \fi%
}
\newcommand*{\linenumincrement}[1]{%
  \ifledRcol%
    \setcounter{linenumincrementR}{#1}%
    \led@warn@setting@in@rightside{\linenumincrement}%
  \else%
    \setcounter{linenumincrement}{#1}%
  \fi%
}
\newcommand*{\firstsublinenum}[1]{%
  \ifledRcol%
    \setcounter{firstsublinenumR}{#1}%
    \led@warn@setting@in@rightside{\firstsublinenum}%
  \else%     
    \setcounter{firstsublinenum}{#1}%
  \fi%
}
\newcommand*{\sublinenumincrement}[1]{%
  \ifledRcol%
    \setcounter{sublinenumincrementR}{#1}%
    \led@warn@setting@in@rightside{\sublinenumincrement}%
  \else%
    \setcounter{sublinenumincrement}{#1}%
  \fi%
}

%    \end{macrocode}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
%
% \subsection{Line number locking} 
% \begin{macro}{\lockdisp}
% \begin{macro}{\lock@disp}
% \begin{macro}{\l@dgetlock@disp}
% When line locking is being used, the \protect\cs{lockdisp}\marg{word} macro
% specifies whether a line number---if one is due to
% appear---should be printed on the first printed line or on the
% last, or by all of them.
% Its argument is a word, either
% \verb+first+, \verb+last+, or \verb+all+.  
% Initially, it is set to \verb+first+.
%
% \protect\cs{lock@disp} encodes the selection: $0$ for first, $1$ for last,
% $2$ for all.
% \changes{v0.7.0}{2005/02/23}{Added \protect\cs{l@dgetlock@disp}}
%    \begin{macrocode}
\newcount\lock@disp
\newcommand{\lockdisp}[1]{{%
  \l@dgetlock@disp{#1}%
  \ifnum\@l@dtempcntb>\m@ne
    \global\lock@disp=\@l@dtempcntb
  \else
    \led@warn@BadLockdisp
  \fi}}
\newcommand*{\l@dgetlock@disp}[1]{
  \def\@tempa{#1}\def\@tempb{first}%
  \ifx\@tempa\@tempb
    \@l@dtempcntb \z@
  \else
     \def\@tempb{last}%
     \ifx\@tempa\@tempb
       \@l@dtempcntb \@ne
     \else
       \def\@tempb{all}%
       \ifx\@tempa\@tempb
         \@l@dtempcntb \tw@
       \else
         \@l@dtempcntb \m@ne
       \fi
     \fi
  \fi}

%    \end{macrocode}
% \end{macro}
% \end{macro}
% \end{macro}
%
% \begin{macro}{\sublockdisp}
% \begin{macro}{\sublock@disp}
% The same questions about where to print the line number apply to
% sub-lines, and these are the analogous macros for dealing with
% the problem.
%    \begin{macrocode}
\newcount\sublock@disp
\newcommand{\sublockdisp}[1]{{%
  \l@dgetlock@disp{#1}%
  \ifnum\@l@dtempcntb>\m@ne
    \global\sublock@disp=\@l@dtempcntb
  \else
    \led@warn@BadSublockdisp
  \fi}}

%    \end{macrocode}
% \end{macro}
% \end{macro}
% \subsection{Line number style}
% \begin{macro}{\linenumberstyle}
% \begin{macro}{\linenumrep}
% \begin{macro}{\linenumr@p}
% \begin{macro}{\sublinenumberstyle}
% \begin{macro}{\sublinenumrep}
% \begin{macro}{\sublinenumr@p}
% We provide a mechanism for using different representations of the
% line numbers, not just the normal arabic.
%
% NOTE: In v0.7 \protect\cs{linenumrep} and \protect\cs{sublinenumrep} replaced
% the internal \protect\cs{linenumr@p} and \protect\cs{sublinenumr@p}.
%
% \protect\cs{linenumberstyle} and \protect\cs{sublinenumberstyle} are user level
% macros for setting the number representation (\protect\cs{linenumrep}
% and \protect\cs{sublinenumrep}) for line and sub-line numbers.
% \changes{v0.3.0}{2004/02/14}{Added \protect\cs{linenumberstyle} and \protect\cs{sublinenumberstyle}}
% \changes{v0.7.0}{2005/02/18}{Using \protect\cs{linenumrep} instead of \protect\cs{linenumr@p}}
% \changes{v0.7.0}{2005/02/18}{Using \protect\cs{sublinenumrep} instead of \protect\cs{sublinenumr@p}}
%    \begin{macrocode}
\newcommand*{\linenumberstyle}[1]{%
  \def\linenumrep##1{\@nameuse{@#1}{##1}}}
\newcommand*{\sublinenumberstyle}[1]{%
  \def\sublinenumrep##1{\@nameuse{@#1}{##1}}}
%    \end{macrocode}
% Initialise the number styles to arabic.
%    \begin{macrocode}
\linenumberstyle{arabic}
  \let\linenumr@p\linenumrep
\sublinenumberstyle{arabic}
  \let\sublinenumr@p\sublinenumrep

%    \end{macrocode}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \subsection{Line number printing}
% \begin{macro}{\leftlinenum}
% \begin{macro}{\rightlinenum}
% \begin{macro}{\linenumsep}
% \begin{macro}{\numlabfont}
% \begin{macro}{\ledlinenum}
% \protect\cs{leftlinenum} and \protect\cs{rightlinenum} are the macros that are
% called to print marginal line numbers on
% a page, for left- and right-hand margins respectively.
% They are made easy to access and change, since you may
% want to change the styling in some way. 
% These standard versions
% illustrate the general sort of thing that will be needed; they are
% based on the \protect\cs{leftheadline} macro in \thetexbook, p.\,416.
%
% Whatever these macros output gets printed in a box that will be
% put into the appropriate margin without any space between it and the
% line of text. 
% You will generally want a kern between a line number and
% the text, and \protect\cs{linenumsep} is provided as a standard way of
% storing its size. Line numbers are usually printed in a smaller
% font, and \protect\cs{numlabfont} is provided as a standard name for that
% font. When called, these macros
% will be executed within a group, so font changes and the like will
% remain local.
%
% \protect\cs{ledlinenum} typesets the line (and subline) number.
% 
%   The original \protect\cs{numlabfont} specification is equivalent to 
% the \LaTeX\ \protect\cs{scriptsize} for a 10pt document.
% \changes{v0.3.0}{2004/02/14}{Added \protect\cs{linenumr@p} and \protect\cs{sublinenum@rep}
%           to \protect\cs{leftlinenum} and \protect\cs{rightlinenum}}
% \changes{v0.7.0}{2005/02/18}{Added \protect\cs{ledlinenum} for use by
%              \protect\cs{leftlinenum} and \protect\cs{rightlinenum}}
%    \begin{macrocode}
\newlength{\linenumsep}
  \setlength{\linenumsep}{1pc}
\newcommand*{\numlabfont}{\normalfont\scriptsize}
\newcommand*{\ledlinenum}{%
  \bgroup%
  \ifluatex%
    \textdir TLT%
  \fi%
  \numlabfont\linenumrep{\line@num}%
  \ifsublines@
    \ifnum\subline@num>0\relax
      \unskip%
      \Xsublinesep@side%
      \sublinenumrep{\subline@num}%
    \fi
  \fi%
  \egroup%
}%

\newcommand*{\leftlinenum}{%
  \ledlinenum
  \kern\linenumsep}
\newcommand*{\rightlinenum}{%
  \kern\linenumsep
  \ledlinenum}

%    \end{macrocode}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
%
% \subsection{Line number counters and lists}
%
% Footnote references using line numbers rather than symbols can't be
% generated in one pass, because we do not know the line numbers till we
% ship out the pages. It would be possible if footnotes were never keyed
% to more than one line; but some footnotes gloss passages that may run
% for several lines, and they must be tied to the first line of the
% passage glossed. And even one-line passages require two passes if we
% want line-per-page numbering rather than line-per-section numbering.
%
% So we run \LaTeX\ over the text several times, and each time save
% information about page and line numbers in a `line-list file' to
% be used during the next pass. At the start of each section---whenever
% \protect\cs{beginnumbering} is executed---the line-list file
% for that section
% is read, and the information from it is encoded into a few list
% macros.
%
% We need first to define the different line numbers that are involved
% in these macros, and the associated counters.
%
% \begin{macro}{\line@num}
% The count \protect\cs{line@num} stores the line number that is used in
% marginal line numbering and in notes: counting either by section, page or pstart, depending on your
% choice for this section. This may be qualified by \protect\cs{subline@num}.
%    \begin{macrocode}
\newcount\line@num
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\subline@num}
% The count \protect\cs{subline@num} stores
% a sub-line number that qualifies \protect\cs{line@num}. For example,
% line $10$ might have sub-line numbers $1$, $2$ and $3$, which might be
% printed as lines $10.1$, $10.2$, $10.3$.
%    \begin{macrocode}
\newcount\subline@num
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\ifsublines@}
% \begin{macro}{\sublines@true}
% \begin{macro}{\sublines@false}
% We maintain an associated flag, \protect\cs{ifsublines@},
% to tell us whether we're within
% a sub-line range or not.
%
% You may wonder why we do not just use the value of \protect\cs{subline@num}
% to determine this---treating anything greater than $0$ as an
% indication that sub-lineation is on. We need a separate flag because
% sub-lineation can be used together with line-number locking in odd
% ways: several pieces of a logical line might be interrupted by
% pieces of sub-lineated text, and those sub-line numbers should not
% return to zero until the next change in the major line number. This
% is common in the typesetting of English Renaissance verse
% drama\index{Middleton, Thomas}, in which stage directions are
% given sub-line numbers: a single line of verse may be
% interrupted by several stage directions.
%    \begin{macrocode}
\newif\ifsublines@
%    \end{macrocode}
% \end{macro}
% \end{macro}
% \end{macro}
%
% \begin{macro}{\absline@num}
% The count \protect\cs{absline@num} stores the
% absolute number of lines since the start
% of the section: that is, the number we have actually printed, no matter
% what numbers we attached to them.
% This value is never printed on an output page, though
% \protect\cs{line@num} will often be equal to it. It is used internally to
% keep track of where notes are to appear and where new
% pages start: using this value rather than \protect\cs{line@num} is a lot
% simpler, because it does not depend on the lineation system in use.
%    \begin{macrocode}
\newcount\absline@num
%    \end{macrocode}
% \end{macro}
%
% We will call \protect\cs{absline@num} numbers ``absolute'' numbers, and
% \protect\cs{line@num} and \protect\cs{subline@num} numbers ``visible'' numbers.
%
% \subsection{Line number locking counter}
% \begin{macro}{\@lock}
% \begin{macro}{\sub@lock}
% The counts \protect\cs{@lock} and \protect\cs{sub@lock}
% tell us the state of line-number
% and sub-line-number locking. $0$ means we are not within a locked set of
% lines; $1$ means we are at the first line in the set; $2$, at some
% intermediate line; and $3$, at the last line.
%    \begin{macrocode}
\newcount\@lock
\newcount\sub@lock
%    \end{macrocode}
% \end{macro}
% \end{macro}
% \subsection{Line number associated to lemma}
% \begin{macro}{\line@list}
% \begin{macro}{\insertlines@list}
% \begin{macro}{\actionlines@list}
% \begin{macro}{\actions@list}
% Now we can define the list macros that will be created from the
% line-list file.  We will maintain the following lists:
% \begin{itemize}\addtolength{\itemsep}{-1ex}
% \item \protect\cs{line@list}: the page and line numbers for every
% lemma marked by \protect\cs{edtext}.
% There are seven pieces of information, separated by vertical bars:
% \label{linenumbers}
% \begin{enumerate}\addtolength{\itemsep}{-1ex}
% \item the starting page,
% \item line, and
% \item sub-line numbers, followed by the
% \item ending page,
% \item line, and
% \item sub-line numbers, and then the
% \item font specifier for the lemma.
% \end{enumerate}
%
%
% These line numbers are all visible numbers.
% The font specifier is a set of four codes for font encoding, 
% family, series, and shape, separated by \verb"/" characters.  
% Thus a lemma that
% started on page $23$, line $35$ and
% went on until page $24$, line $3$
% (with no sub-line numbering), and was typeset in a normal roman font
% would have a line list entry like this: \\
% \verb"23|35|0|24|3|0|OT1/cmr/m/n".
%
% There is one item in this list for every lemma marked by
% \protect\cs{edtext}, even if there are several notes to that lemma, or no
% notes at all. \protect\cs{edtext} reads the data in this list, making it
% available for use in the text of notes.
%
% \item \protect\cs{insertlines@list}: the line numbers of lines that have
% footnotes or other insertions.
% These are the absolute numbers where the corresponding
% lemmas begin. This list contains one entry for every footnote in the
% section; one lemma may contribute no footnotes or many footnotes.
% This list is used by \protect\cs{add@inserts} within \protect\cs{do@line}, to tell
% it where to insert notes.
%
% \item \protect\cs{actionlines@list}: a list of absolute line numbers at
% which we are to perform special
% actions; these actions are specified by the \protect\cs{actions@list} list
% defined below.
%
% \item \protect\cs{actions@list}: action codes corresponding to the line
% numbers in \protect\cs{actionlines@list}. These codes tell \macpackage what action
% it is supposed to take at each of these lines. One action, the
% page-start action, is generated behind the scenes by \macpackage{} itself;
% the others, for specifying sub-lineation, line-number locking, and
% line-number alteration, are generated only by explicit commands in
% your input file. The page-start and line-number-alteration actions
% require arguments, to specify the new values for the page or line
% numbers; instead of storing those arguments in another list, we have
% chosen the action-code values so that they can encode both the action
% and the argument in these cases. Action codes greater than $-1000$
% are page-start actions, and the code value is the page number; action
% codes less than $-5000$ specify line numbers, and the code value is
% a transformed version of the line number; action codes between these
% two values specify other actions which require no argument.
%
% Here is the full list of action codes and their meanings:
%
% Any number greater than $-1000$ is a page-start action: the line number
% associated with it is the first line on a page, and the action number is
% the page number. (The cutoff of $-1000$ is chosen because negative
% page-number values are used by some macro packages; we assume that
% page-number values less than $-1000$ are not common.)
% Page-start action codes are added to the list by
% the \protect\cs{page@action} macro, which is (indirectly) triggered by the
% workings of the \protect\cs{page@start} macro; that macro should always be
% called in the output routine, just before the page contents are
% assembled. \Eledmac{} calls it in \protect\cs{pagecontents}.
%
% The action code $-1001$ specifies the start of sub-lineation: meaning
% that, starting with the next line, we should be advancing
% \protect\cs{subline@num} at each start-of-line command, rather than
% \protect\cs{line@num}.
%
% The action code $-1002$ specifies the end of sub-lineation. At the
% next start-of-line, we should clear the sub-line counter and start
% advancing the line number. The action codes for starting and ending
% sub-lineation are added to the list by the \protect\cs{sub@action} macro, as
% called to implement the \protect\cs{startsub} and \protect\cs{endsub} macros.
%
% The action code $-1003$ specifies the start of line number locking.
% After the number for the current line is computed, it will remain
% at that value through the next line that has an action code to end
% locking.
%
% The action code $-1004$ specifies the end of line number locking.
%
% The action code $-1005$ specifies the start of sub-line number locking.
% After the number for the current sub-line is computed, it will remain
% at that value through the next sub-line that has an action code to end
% locking.
%
% The action code $-1006$ specifies the end of sub-line number locking.
%
% The four action codes for line and sub-line number locking are added
% to the list by the \protect\cs{do@lockon} and \protect\cs{do@lockoff} macros, as called
% to implement the \protect\cs{startlock} and \protect\cs{endlock} macros.
%
% An action code of $-5000$ or less sets the current visible line
% number (either the line number or the sub-line number, whichever is
% currently being advanced) to a specific positive value. The value of
% the code is $-(5000+n)$, where $n$ is the value (always $\ge 0$)
% assigned to the current line number. Action codes of this type are
% added to the list by the \protect\cs{set@line@action} macro, as called to
% implement the \protect\cs{advanceline} and \protect\cs{setline} macros: this action only
% occurs when the user has specified some change to the line numbers
% using those macros. Normally \macpackage{} computes the visible line numbers
% from the absolute line numbers with reference to the other
% action codes and the settings they invoke; it does not require an
% entry in the action-code list for every line.
%
% Here are the commands to create these lists:
%
%    \begin{macrocode}
\list@create{\line@list}
\list@create{\insertlines@list}
\list@create{\actionlines@list}
\list@create{\actions@list}

%    \end{macrocode}
%
% \end{itemize}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% 
% \begin{macro}{\page@num}
% \begin{macro}{\endpage@num}
% \begin{macro}{\endline@num}
% \begin{macro}{\endsubline@num}
% We will need some counts while we read the line-list,
% for the page number and the ending page, line, and sub-line numbers.
% Some of these will be used again later on, when we are acting on the
% data in our list macros.
%    \begin{macrocode}
\newcount\page@num
\newcount\endpage@num
\newcount\endline@num
\newcount\endsubline@num
%    \end{macrocode}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
%
% \begin{macro}{\ifnoteschanged@}
% \begin{macro}{\noteschanged@true}
% \begin{macro}{\noteschanged@false}
% If the number of the footnotes in a section is different from what it was
% during the last run, or if this is the very first time you've run
% \LaTeX,
% on this file, the information from the line-list used to place the
% notes will be wrong, and some notes will probably be misplaced.
% When this happens, we prefer
% to give a single error message for the whole section rather than
% messages at every point where we notice the problem, because
% we do not really know where in the section notes were added or removed,
% and the solution in any case is simply to run \LaTeX\ two more times;
% there is no fix needed to the document. The
% \protect\cs{ifnoteschanged@} flag is set if such
% a change in the number of notes is discovered at any point.
%    \begin{macrocode}
\newif\ifnoteschanged@
%    \end{macrocode}
% \end{macro}
% \end{macro}
% \end{macro}
%
% \DescribeMacro{\resetprevline@}
% Inside the apparatus, at each note, the line number is stored in a macro called \protect\cs{prevlineX},
% where X is the letter of the current series.
% This macro is called when using \protect\cs{Xnumberonlyfirstinline}.
% This macro must be reset at the same time as the line number.
% The \protect\cs{resetprevline@} does this resetting for every series.
% \begin{macro}{\resetprevline@}
%    \begin{macrocode}
\newcommand*{\resetprevline@}{%
    \def\do##1{\global\csundef{prevline##1}}%
    \dolistloop{\@series}%
}
%    \end{macrocode}
% \end{macro}
%
% \DescribeMacro{\resetprevpage@num}
% Inside the apparatus, at each note, the page number is stored in a macro called \protect\cs{prevpageX@num},
% where X is the letter of the current series.
% This macro is called when using \protect\cs{Xparafootsep} or \protect\cs{parafootsepX}.
% This macro must be reset at the beginning of each numbered section
% The \protect\cs{resetprevpage@} command resets this macro for every series.
% \begin{macro}{\resetprevpage@}
%    \begin{macrocode}
\newcommand*{\resetprevpage@num}{%
    \def\do##1{\ifcsdef{prevpage##1@num}{\global\csname prevpage##1@num\endcsname=0}{}}%
    \dolistloop{\@series}%
}
%    \end{macrocode}
% \end{macro}
% \subsection{Reading the line-list file}
%
%
% \begin{macro}{\read@linelist}
% \protect\cs{read@linelist}\marg{file} is the control sequence
% that  is called by \protect\cs{beginnumbering}
% (via \protect\cs{line@list@stuff}) to open and process a
% line-list file; its argument is the name of the file.
% \label{readlinelist}.
% First, it clear all previous line's list.
%    \begin{macrocode}
\newread\@inputcheck
\newcommand*{\read@linelist}[1]{%
  \ifledRcol%
    \list@clearing@regR%
  \else%
    \list@clearing@reg%
  \fi%
%    \end{macrocode}
%
% When using \parpackage, make sure that the \protect\cs{maxlinesinpar@list} is empty (otherwise things
% will be thrown out of kilter if there is any old stuff still hanging
% in there).
%    \begin{macrocode}
  \list@clear{\maxlinesinpar@list}
%    \end{macrocode}
% Now get the file and interpret it.
% When the file is there we start a new group and make some special
% definitions we will need to process it.
% It is  a sequence of \TeX\
% commands, but they require a few special settings. 
% We make [ and
% ] become grouping characters: they are used that way in the
% line-list file, because we need to write them out one at a time
% rather than in balanced pairs, and it is easier to just use
% something other than real braces. @ must become a letter, since
% this is run in the ordinary \LaTeX\ context. We ignore carriage
% returns, since if we are in horizontal mode they can get
% interpreted as spaces to be printed.
%
%
% Our line, page, and line-locking counters were already zeroed
% by \protect\cs{line@list@stuff} if this is being called from within
% \protect\cs{beginnumbering}; sub-lineation will be turned off as well
% in that case. On the other hand,
% if this is being called from \protect\cs{resumenumbering}, those things
% should still have the values they had when \protect\cs{pausenumbering}
% was executed.
%
%   If the file is not there, we print an informative message.
%
% Now, after these preliminaries, we start interpreting the file.
%
%
%    \begin{macrocode}
  \get@linelistfile{#1}%
  \endgroup  
%    \end{macrocode}
%
% When the reading is done, we are all through with the
% line-list file. All the information we needed
% from it will now be encoded in our list macros.
%
% Finally, we
% initialize the \protect\cs{next@actionline} and \protect\cs{next@action} macros,
% which specify where and what the next action to be taken is.
%    \begin{macrocode}
  \ifledRcol
    \global\page@numR=\m@ne
    \ifx\actionlines@listR\empty
      \gdef\next@actionlineR{1000000}%
    \else
      \gl@p\actionlines@listR\to\next@actionlineR
      \gl@p\actions@listR\to\next@actionR
    \fi
  \else
    \global\page@num=\m@ne
    \ifx\actionlines@list\empty
      \gdef\next@actionline{1000000}%
    \else
      \gl@p\actionlines@list\to\next@actionline
      \gl@p\actions@list\to\next@action
    \fi
  \fi
}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\list@clearing@reg}
% Clears the lists for \protect\cs{read@linelist}
% \changes{v0.7.0}{2005/02/22}{Added \protect\cs{list@clearing@reg}}
%    \begin{macrocode}
\newcommand*{\list@clearing@reg}{%
  \list@clear{\line@list}%
  \list@clear{\insertlines@list}%
  \list@clear{\actionlines@list}%
  \list@clear{\actions@list}%
  \list@clear{\linesinpar@listL}%
  \list@clear{\linesonpage@listL}%
  }%
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\get@linelistfile}
% \Macpackage{} can take advantage of the \LaTeX\ `safe file input' macros
% to get the line-list file.
% \changes{v0.7.0}{2005/02/22}{Added \protect\cs{get@linelistfile}}
%    \begin{macrocode}
\newcommand*{\get@linelistfile}[1]{%
  \InputIfFileExists{#1}{%
    \global\noteschanged@false
    \begingroup
      \catcode`\[=1 \catcode`\]=2
      \makeatletter \catcode`\^^M=9}{%
    \led@warn@NoLineFile{#1}%
    \global\noteschanged@true
    \begingroup}%
}

%    \end{macrocode}
% \end{macro}
%
% This version of \protect\cs{read@linelist} creates list macros
% containing data for the entire section, so they could get rather
% large. It would be no more difficult to read the line-list file
% incrementally rather than all at once: we could read, at the
% start of each paragraph, only the commands relating to that
% paragraph. But this would require that we
% have two line-lists open at once, one for reading, one for
% writing, and on systems without version numbers we would have to do
% some file renaming outside of \LaTeX\  for that to work. We have
% retained this slower approach to avoid that sort of hacking
% about, but have provided the \protect\cs{pausenumbering} and
% \protect\cs{resumenumbering} macros to help you if you run into
% macro memory limitations (see \reff{pause} above).
%
% \subsection{Commands within the line-list file}
%
% This section defines the commands that can appear within a
% line-list file. They all have very short names because we are
% likely to be writing very large numbers of them out. One macro,
% \protect\cs{@nl}, is especially short, since it will be written to the
% line-list file once for every line of text in a numbered section.
% (Another of these commands, \protect\cs{@lab}, will be introduced in a
% later section, among the cross-referencing commands it is
% associated with.)
%
% When these commands modify the various page and line counters,
% they deliberately do not use \protect\cs{global}. This is because we
% want them to affect only the counter values within the current
% group when nested calls of \protect\cs{@ref} occur. (The code assumes
% throughout that the value of \protect\cs{globaldefs} is zero.)
%
% The macros with \verb"action" in their names contain all the code
% that modifies the action-code list: again, this is so that they
% can be turned off easily for nested calls of \protect\cs{@ref}.
%
% \begin{macro}{\line@list@version}
% The \protect\cs{line@list@version} check if the line-list file does not refers to the older commands of \macpackage. 
% In this case, we stop reading the line-list file.
% Consequently, \protect\cs{line@list@version} must be the first line of a line-number file.
%    \begin{macrocode}
\newcommand{\line@list@version}[1]{%
  \IfStrEq{#1}{\this@line@list@version}%
    {}%
    {\ifledRcol%
       \led@warn@Obsolete{\jobname.\extensionchars\the\section@num}%
     \else%
       \led@warn@Obsolete{\jobname.\extensionchars\the\section@num}%
     \fi%
     \endinput%
    }%
}%
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\@nl}
% \begin{macro}{\@nl@reg}
% \changes{v1.12.0}{2014/08/05}{To ensure compatibility with \protect\cs{musixtex}, \protect\cs{@l} becomes \protect\cs{@l}. Consequently, \protect\cs{@l@reg} becomes \protect\cs{@nl@reg}.}
% \protect\cs{@nl} does everything related to the start of a
% new line of numbered text.
%
% In order to get the \protect\cs{setlinenum} to work Peter Wilson had to slip in some new
% code at the start of the macro, to get the timing of the actions
% correct. The problem was that his original naive implementation
% of \protect\cs{setlinenum} had a unfortunate tendency to change the
% number of the last line of the \emph{preceding} paragraph. 
% The new code is sort of based on the page number handling and
% \protect\cs{setline}.
% It seems
% that a lot of fiddling with the line number internals is required.
%
% In November 2004 in order to accurately determine page numbers Peter Wilson added 
% these to the macro. It is now: \\
% \protect\cs{@nl}\marg{page counter number}\marg{printed page number} \\
% We do not (yet) use the printed number (i.e., the \protect\cs{thepage}) but
% it may come in handy later. The macro \protect\cs{fix@page} checks if a new
% page has started.
% 
% Exactly what \protect\cs{@nl} does depends
% on whether right text is being processed. That's why many code is defined in \protect\cs{@nl@reg} or \protect\cs{nl@regR}.
%
%
% \changes{v0.3.0}{2004/02/14}{Added a bunch of code to \protect\cs{@nl} for handling
%                          \protect\cs{setlinenum}}
% \changes{v0.6.0}{2004/11/16}{Extended \protect\cs{@nl} to include the page number}
% \changes{v0.6.0}{2004/11/16}{Added \protect\cs{fix@page} to \protect\cs{@nl}}
% \changes{v0.7.0}{2005/02/22}{Added \protect\cs{@nl@reg}}
%    \begin{macrocode}

\newcommand*{\@nl}[2]{%
  \fix@page{#1}%
  \ifledRcol%
    \@nl@regR%
  \else%
    \@nl@reg%
  \fi%
}
\newcommand*{\@nl@reg}{%
  \ifx\l@dchset@num\relax \else
    \advance\absline@num \@ne
    \set@line@action
    \let\l@dchset@num=\relax
    \advance\absline@num \m@ne
    \advance\line@num \m@ne
  \fi
%    \end{macrocode}
%
% First increment the absolute line-number, and perform
% deferred actions relating to page starts and sub-lines.
%    \begin{macrocode}
  \advance\absline@num \@ne
         \ifx\next@page@num\relax \else
             \page@action
             \let\next@page@num=\relax
         \fi
         \ifx\sub@change\relax \else
            \ifnum\sub@change>\z@
               \sublines@true
            \else
               \sublines@false
            \fi
            \sub@action
            \let\sub@change=\relax
         \fi
%    \end{macrocode}
%
% Fix the lock counters, if necessary. A value of $1$ is advanced to
% $2$; $3$ advances to $0$; other values are unchanged.
%    \begin{macrocode}
         \ifcase\@lock
            \or
               \@lock \tw@
            \or \or
               \@lock \z@
         \fi
         \ifcase\sub@lock
            \or
               \sub@lock \tw@
            \or \or
               \sub@lock \z@
         \fi
%    \end{macrocode}
%
% Now advance the visible line number, unless it has been locked.
%    \begin{macrocode}
         \ifsublines@
              \ifnum\sub@lock<\tw@
                \advance\subline@num \@ne
              \fi
         \else
              \ifnum\@lock<\tw@
                \advance\line@num \@ne \subline@num \z@
              \fi
         \fi}

%    \end{macrocode}
% \end{macro}
% \end{macro}
%
%
% \begin{macro}{\last@page@num}
% \begin{macro}{\fix@page}
%  \protect\cs{fix@page} basically replaces \protect\cs{@page}. It determines whether or not
% a new page has been started, based on the page values held by \protect\cs{@nl}.
% \changes{v0.6.0}{2004/11/16}{Added \protect\cs{last@page@num} and \protect\cs{fix@page}}
%    \begin{macrocode}
\newcount\last@page@num
  \last@page@num=-10000
 
\newcommand*{\fix@page}[1]{%
  \ifledRcol
    \ifnum #1=\last@page@numR
    \else
      \ifbypage@R
        \line@numR \z@ \subline@numR \z@
      \fi
      \page@numR=#1\relax
      \last@page@numR=#1\relax
      \def\next@page@numR{#1}%
    \fi
  \else
    \ifnum #1=\last@page@num
    \else
      \ifbypage@
        \line@num \z@ \subline@num \z@
      \fi
      \page@num=#1\relax
      \last@page@num=#1\relax
      \def\next@page@num{#1}%
      \listxadd{\normal@page@break}{\the\absline@num}
    \fi
  \fi}
%    \end{macrocode}
% \end{macro}
% \end{macro}
%
% \begin{macro}{\@pend}
% \begin{macro}{\@pendR}
% \begin{macro}{\@lopL}
% \begin{macro}{\@lopR}
% These do not do anything at this point, but will have been added to the 
% auxiliary file(s) if the  \parpackage package has been used. They
% are just here to stop \macpackage from moaning if the \parpackage 
% is used for one run and then not for the following one.
% \changes{v0.6.0}{2004/11/16}{Added \protect\cs{@pend},\protect\cs{@pendR}, \protect\cs{@lopL} and 
%        \protect\cs{@lopR} in anticipation of parallel processing}
%    \begin{macrocode}
\newcommand*{\@pend}[1]{}
\newcommand*{\@pendR}[1]{}
\newcommand*{\@lopL}[1]{}
\newcommand*{\@lopR}[1]{}

%    \end{macrocode}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
%
% \begin{macro}{\sub@on}
% \begin{macro}{\sub@off}
% The \protect\cs{sub@on} and \protect\cs{sub@off} macros
% turn sub-lineation on and off\/: but not directly, since such changes
% do not really take effect until the next line of text. Instead
% they set a flag that notifies \protect\cs{@nl} of the necessary action.
%    \begin{macrocode}
\newcommand*{\sub@on}{\ifsublines@
     \let\sub@change=\relax
  \else
     \def\sub@change{1}%
  \fi}
\newcommand*{\sub@off}{\ifsublines@
     \def\sub@change{-1}%
  \else
     \let\sub@change=\relax
  \fi}

%    \end{macrocode}
% \end{macro}
% \end{macro}
%
% \begin{macro}{\@adv}
% The \protect\cs{@adv}\marg{num} macro advances
% the current visible line number by the amount specified as
% its argument. This is used to implement \protect\cs{advanceline}.
%    \begin{macrocode}

\newcommand*{\@adv}[1]{%
  \ifsublines@
    \ifledRcol
      \advance\subline@numR by #1\relax
      \ifnum\subline@numR<\z@
        \led@warn@BadAdvancelineSubline
        \subline@numR \z@
      \fi
    \else
      \advance\subline@num by #1\relax
      \ifnum\subline@num<\z@
        \led@warn@BadAdvancelineSubline
        \subline@num \z@
      \fi
    \fi
  \else
    \ifledRcol
      \advance\line@numR by #1\relax
      \ifnum\line@numR<\z@
        \led@warn@BadAdvancelineLine
        \line@numR \z@
      \fi
    \else
      \advance\line@num by #1\relax
      \ifnum\line@num<\z@
        \led@warn@BadAdvancelineLine
        \line@num \z@
      \fi
    \fi
  \fi
  \set@line@action}

%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\@set}
% The \protect\cs{@set}\marg{num} macro sets
% the current visible line number to the value specified as
% its argument.  This is used to implement \protect\cs{setline}.
%    \begin{macrocode}

\newcommand*{\@set}[1]{%
  \ifledRcol
    \ifsublines@
      \subline@numR=#1\relax 
    \else
      \line@numR=#1\relax 
    \fi
    \set@line@action
  \else
    \ifsublines@
      \subline@num=#1\relax 
    \else
      \line@num=#1\relax 
    \fi
    \set@line@action
  \fi}

%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\l@d@set}
% \begin{macro}{\l@dchset@num}
% The \protect\cs{l@d@set}\marg{num} macro sets
% the line number for the next \protect\cs{pstart} to the value specified as
% its argument.  This is used to implement \protect\cs{setlinenum}.
%
% \protect\cs{l@dchset@num} is a flag to the \protect\cs{@nl}? macro. If it is not
% \protect\cs{relax} then a linenumber change is to be done.
%    \begin{macrocode}

\newcommand*{\l@d@set}[1]{%
  \ifledRcol
    \line@numR=#1\relax
    \advance\line@numR \@ne
    \def\l@dchset@num{#1}
  \else
    \line@num=#1\relax
    \advance\line@num \@ne
    \def\l@dchset@num{#1}
  \fi}
\let\l@dchset@num\relax

%    \end{macrocode}
% \end{macro}
% \end{macro}

%
% \begin{macro}{\page@action}
% \protect\cs{page@action}
% adds an entry to the action-code list to change the page number.
%    \begin{macrocode}

\newcommand*{\page@action}{%
  \ifledRcol
    \xright@appenditem{\the\absline@numR}\to\actionlines@listR
    \xright@appenditem{\next@page@numR}\to\actions@listR
  \else
    \xright@appenditem{\the\absline@num}\to\actionlines@list
    \xright@appenditem{\next@page@num}\to\actions@list
  \fi}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\set@line@action}
% \protect\cs{set@line@action} adds an entry to the action-code
% list to change the visible line number.
%    \begin{macrocode}

\newcommand*{\set@line@action}{%
  \ifledRcol
    \xright@appenditem{\the\absline@numR}\to\actionlines@listR
    \ifsublines@
       \@l@dtempcnta=-\subline@numR
    \else
       \@l@dtempcnta=-\line@numR
    \fi
    \advance\@l@dtempcnta by -5000\relax
    \xright@appenditem{\the\@l@dtempcnta}\to\actions@listR
  \else
    \xright@appenditem{\the\absline@num}\to\actionlines@list
    \ifsublines@
       \@l@dtempcnta=-\subline@num
    \else
       \@l@dtempcnta=-\line@num
    \fi
    \advance\@l@dtempcnta by -5000\relax
    \xright@appenditem{\the\@l@dtempcnta}\to\actions@list
  \fi}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\sub@action}
% \protect\cs{sub@action}
% adds an entry to the action-code list to turn sub-lineation on or
% off, according to the current value of the \protect\cs{ifsublines@} flag.
%    \begin{macrocode}

\newcommand*{\sub@action}{%
  \ifledRcol
    \xright@appenditem{\the\absline@numR}\to\actionlines@listR
    \ifsublines@
      \xright@appenditem{-1001}\to\actions@listR
    \else
      \xright@appenditem{-1002}\to\actions@listR
    \fi
  \else
    \xright@appenditem{\the\absline@num}\to\actionlines@list
    \ifsublines@
      \xright@appenditem{-1001}\to\actions@list
    \else
      \xright@appenditem{-1002}\to\actions@list
    \fi
  \fi}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\lock@on}
% \begin{macro}{\do@lockon}
% \begin{macro}{\do@lockonL}
% \protect\cs{lock@on}
% adds an entry to the action-code list to turn line number
% locking on. The current setting of the sub-lineation flag tells us
% whether this applies to line numbers or sub-line numbers.
%
% Adding commands to the action list is slow, and it is very often the
% case that a lock-on command is immediately followed by a lock-off
% command in the line-list file, and therefore really does nothing.
% We use a look-ahead scheme here to detect such pairs, and add nothing
% to the line-list in those cases.
%    \begin{macrocode}
\newcommand*{\lock@on}{\futurelet\next\do@lockon}

\newcommand*{\do@lockon}{%
  \ifx\next\lock@off
    \global\let\lock@off=\skip@lockoff
  \else
    \ifledRcol
      \do@lockonR
    \else
      \do@lockonL
    \fi
  \fi}

  
\newcommand*{\do@lockonL}{%
  \xright@appenditem{\the\absline@num}\to\actionlines@list
  \ifsublines@
    \xright@appenditem{-1005}\to\actions@list
    \ifnum\sub@lock=\z@
      \sub@lock \@ne
    \else
      \ifnum\sub@lock=\thr@@
        \sub@lock \@ne
      \fi
    \fi
  \else
    \xright@appenditem{-1003}\to\actions@list
    \ifnum\@lock=\z@
      \@lock \@ne
    \else
      \ifnum\@lock=\thr@@
        \@lock \@ne
      \fi
    \fi
  \fi}
  
%    \end{macrocode}
% \end{macro}
% \end{macro}
% \end{macro}
%
% \begin{macro}{\lock@off}
% \begin{macro}{\do@lockoff}
% \begin{macro}{\do@lockoffL}
% \begin{macro}{\skip@lockoff}
% \protect\cs{lock@off} adds an entry to the action-code list
% to turn line number locking off.
%    \begin{macrocode}
\newcommand*{\do@lockoffL}{%
  \xright@appenditem{\the\absline@num}\to\actionlines@list
  \ifsublines@
    \xright@appenditem{-1006}\to\actions@list
    \ifnum\sub@lock=\tw@
      \sub@lock \thr@@
    \else
      \sub@lock \z@
    \fi
  \else
    \xright@appenditem{-1004}\to\actions@list
    \ifnum\@lock=\tw@
      \@lock \thr@@
    \else
      \@lock \z@
    \fi
  \fi}

\newcommand*{\do@lockoff}{%
  \ifledRcol
    \do@lockoffR
  \else
    \do@lockoffL
  \fi}
\newcommand*{\skip@lockoff}{\global\let\lock@off=\do@lockoff}
\global\let\lock@off=\do@lockoff

%    \end{macrocode}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
%
% \begin{macro}{\n@num}
% These macros implement the \protect\cs{skipnumbering} command. 
% They use action code 1007.
% \changes{v0.7.0}{2005/02/22}{Added \protect\cs{n@num}}
% \changes{v1.21.0}{2015/04/13}{\protect\cs{n@num} defined only one time for both \Eledmac{} and \Eledpar{}}
% \changes{v1.21.0}{2015/04/13}{\protect\cs{n@num@ref} deleted}
%    \begin{macrocode}
\newcommand*{\n@num}{%
  \ifledRcol%
    \xright@appenditem{\the\absline@numR}\to\actionlines@listR
    \xright@appenditem{-1007}\to\actions@listR
  \else%
    \xright@appenditem{\the\absline@num}\to\actionlines@list%
    \xright@appenditem{-1007}\to\actions@list%
  \fi%
}%

%    \end{macrocode}
% \end{macro}
% \begin{macro}{\n@num@stanza}
% This macro implements the \protect\cs{skipnumbering} for stanza command. 
% It uses  action code 1008.
%    \begin{macrocode}
\newcommand*{\n@num@stanza}{%
  \ifledRcol%
    \xright@appenditem{\the\absline@numR}\to\actionlines@listR%
    \xright@appenditem{-1008}\to\actions@listR%
  \else%
    \xright@appenditem{\the\absline@num}\to\actionlines@list%%
    \xright@appenditem{-1008}\to\actions@list%
  \fi%
}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\ifl@dhidenumber}
% \begin{macro}{\hidenumbering}
% \protect\cs{hidenumbering} hides number in margin. 
% It uses action code 1009.
% \begin{macro}{\h@num}
%    \begin{macrocode}
\newif\ifl@dhidenumber
\newcommand*{\hidenumbering}{
  \ifledRcol%
    \write\linenum@outR{\string\hide@num}%
  \else%
    \write\linenum@out{\string\hide@num}%
  \fi%
}%
\newcommand*{\hide@num}{%
  \ifledRcol%
    \xright@appenditem{\the\absline@numR}\to\actionlines@listR%
    \xright@appenditem{-1009}\to\actions@listR%
  \else%
    \xright@appenditem{\the\absline@num}\to\actionlines@list%%
    \xright@appenditem{-1009}\to\actions@list%
  \fi%
}
%    \end{macrocode}
% \end{macro}
% \end{macro}
% \end{macro}
% \begin{macro}{\@ref}
% \begin{macro}{\insert@count}
% \protect\cs{@ref}
% marks the start of a passage, for creation of a footnote reference.
% It takes two arguments:
% \begin{itemize}
% \item \verb"#1", the number of entries to add to \protect\cs{insertlines@list}
% for this reference. \SpecialMainIndex{\insert@count}
% This value, here and within \protect\cs{edtext},
% which computes it and writes it to the line-list file,
% will be stored in the count \protect\cs{insert@count}.
%    \begin{macrocode}
\newcount\insert@count
%    \end{macrocode}
%
% \item \verb"#2", a sequence of other line-list-file commands, executed to
% determine the ending line-number. (This may also include other
% \protect\cs{@ref} commands, corresponding to uses of \protect\cs{edtext}
% within the first argument of another instance of \protect\cs{edtext}.)
% \end{itemize}
%
% \begin{macro}{\dummy@ref}
% When nesting of \protect\cs{@ref} commands does occur, it is necessary to
% temporarily redefine \protect\cs{@ref} within \protect\cs{@ref}, so that we are only
% doing one of these at a time.
%    \begin{macrocode}
\newcommand*{\dummy@ref}[2]{#2}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\@ref@reg}
% The first thing \protect\cs{@ref} (i.e. \protect\cs{@ref@reg}) itself does is to add 
% the specified number
% of items to the \protect\cs{insertlines@list} list.
% \changes{v0.7.0}{2005/02/22}{Added \protect\cs{@ref@reg}}
%    \begin{macrocode}
\newcommand*{\@ref}[2]{%
  \ifledRcol%
    \@ref@regR{#1}{#2}%
  \else% 
    \@ref@reg{#1}{#2}%
  \fi%
}%
\newcommand*{\@ref@reg}[2]{%
  \global\insert@count=#1\relax
  \global\advance\@edtext@level by 1%
  \loop\ifnum\insert@count>\z@
    \xright@appenditem{\the\absline@num}\to\insertlines@list
    \global\advance\insert@count \m@ne
  \repeat
%    \end{macrocode}
%
% Next, process the second argument to determine the page
% and line numbers for the end of this lemma.
% We temporarily equate \protect\cs{@ref} to a different macro that just executes
% its argument, so that nested \protect\cs{@ref} commands are just skipped
% this time. Some other macros need to be temporarily redefined to
% suppress their action.
%    \begin{macrocode}
  \begingroup
    \let\@ref=\dummy@ref
    \let\@lopL\@gobble
    \let\page@action=\relax
    \let\sub@action=\relax
    \let\set@line@action=\relax
    \let\@lab=\relax
    \let\@lemma=\relax%
    \let\@sw\@gobblethree%
    #2
    \global\endpage@num=\page@num
    \global\endline@num=\line@num
    \global\endsubline@num=\subline@num
  \endgroup
%    \end{macrocode}
%
% Now store all the information about the location of the lemma's
% start and end in \protect\cs{line@list}.
%    \begin{macrocode}
    \xright@appenditem%
      {\the\page@num|\the\line@num|%
       \ifsublines@ \the\subline@num \else 0\fi|%
       \the\endpage@num|\the\endline@num|%
       \ifsublines@ \the\endsubline@num \else 0\fi}\to\line@list
%    \end{macrocode}
% Create a list which stores every second argument of  each \protect\cs{@sw}
% in this lemma, at this level.
% Also set the boolean about the use of lemma in this edtext level to false.
%    \begin{macrocode}
     \expandafter\list@create\expandafter{\csname sw@list@edtext@tmp@\the\@edtext@level\endcsname}%
     \providebool{lemmacommand@\the\@edtext@level}%
     \boolfalse{lemmacommand@\the\@edtext@level}%
%    \end{macrocode}
% Execute the second argument of \protect\cs{@ref} again,
% to perform for real all the commands within it.
%    \begin{macrocode}
  #2%
%    \end{macrocode}
% Now, we store the list of \protect\cs{@sw} of this current \protect\cs{edtext} as an element of
% the global list of list of \protect\cs{@sw} for a \protect\cs{edtext} depth.
%    \begin{macrocode}
  \ifnum\@edtext@level>0%
    \def\create@this@edtext@level{\expandafter\list@create\expandafter{\csname sw@list@edtext@\the\@edtext@level\endcsname}}%
    \ifcsundef{sw@list@edtext@\the\@edtext@level}{\create@this@edtext@level}{}%
    \letcs{\@tmp}{sw@list@edtext@\the\@edtext@level}%
    \letcs{\@tmpp}{sw@list@edtext@tmp@\the\@edtext@level}
    \xright@appenditem{\expandonce\@tmpp}\to\@tmp%
    \global\cslet{sw@list@edtext@\the\@edtext@level}{\@tmp}%
  \fi%
%    \end{macrocode}
% Decrease edtext level counter.
%    \begin{macrocode}
  \global\advance\@edtext@level by -1% 
%    \end{macrocode}
%    \begin{macrocode}
}

%    \end{macrocode}
% \end{macro}
% \end{macro}
% \end{macro}
%
% \subsection{Writing to the line-list file}
%
% We have now defined all the counters, lists, and commands involved in
% reading the line-list file at the start of a section. Now we will
% cover the commands that \macpackage uses within the text of a
% section to write commands out to the line-list.
%
% \begin{macro}{\linenum@out}
% The file will be opened on output stream \protect\cs{linenum@out}.
%    \begin{macrocode}
\newwrite\linenum@out
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\iffirst@linenum@out@}
% \begin{macro}{\first@linenum@out@true}
% \begin{macro}{\first@linenum@out@false}
% Once any file is opened on this stream, we keep it open forever, or
% else switch to another file that we keep open. The reason is that
% we want the output routine to write the page number for every page
% to this file; otherwise we would have to write it at the start of
% every line.
% But it is not very easy for the output routine to tell whether an
% output stream is open or not. There is no way to test the status of
% a particular output stream directly, and
% the asynchronous nature of output routines makes the
% status hard to determine by other means.
%
% We can manage pretty well by means of the \protect\cs{iffirst@linenum@out@}
% flag; its inelegant name suggests the nature of the problem that
% made its creation necessary. It is set
% to be \verb"true" before any \protect\cs{linenum@out} file is opened. When such a file
% is opened for the first time, it is done using \protect\cs{immediate}, so that
% it will at once be safe for the output routine to write to it; we then
% set this flag to \verb"false".
%    \begin{macrocode}
\newif\iffirst@linenum@out@
  \first@linenum@out@true
%    \end{macrocode}
% \end{macro}
% \end{macro}
% \end{macro}
%
% \begin{macro}{\this@line@list@version}
% The commands allowed in the line-list file and their arguments
% can change between two version of \macpackage. 
% The \protect\cs{this@line@list@version} command is upgraded when it happens.
% It is written in the file list.
% If we process a line-list file which used a older version, that means the commands used inside are deprecated, and we can't use them. 
%    \begin{macrocode}
\newcommand{\this@line@list@version}{5}%
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\line@list@stuff}
% The \protect\cs{line@list@stuff}\marg{file} macro, which
% is called by \protect\cs{beginnumbering}, performs
% all the line-list operations needed at the start of a section.
% Its argument is the name of the line-list file.
%    \begin{macrocode}
\newcommand*{\line@list@stuff}[1]{%
%    \end{macrocode}
%
% First, use the commands of the previous section to interpret the
% line-list file from the last run.
%    \begin{macrocode}
  \read@linelist{#1}%
%    \end{macrocode}
%
% Now close the current output line-list file, if any, and open a new one.
% The first time we open a line-list file for output, we do it using
% \protect\cs{immediate}, and clear the \protect\cs{iffirst@linenum@out@} flag.
% \changes{v0.2.2}{2003/11/09}{Added initial write of page number in 
%                           \protect\cs{line@list@stuff}}
% \changes{v0.7.0}{2005/02/25}{Deleted \protect\cs{page@start} from \protect\cs{line@list@stuff}}
% \changes{v1.15.1}{2015/01/16}{Revert modification of 1.5.2 which makes bug with numbering. Leave vertical mode to solve spurious space before minipage.}
%    \begin{macrocode}
  \iffirst@linenum@out@
     \immediate\closeout\linenum@out%
     \global\first@linenum@out@false%
     \immediate\openout\linenum@out=#1\relax%
     \immediate\write\linenum@out{\string\line@list@version{\this@line@list@version}}%
     \ifl@dpaging%
       \immediate\write\linenum@out{\string\@par@sync@option{\@par@this@sync@option}}%
     \fi%
  \else
%    \end{macrocode}
% If we get here, then this is
% not the first line-list we have seen, so we
% do not open or close the files immediately.
%    \begin{macrocode}
     \if@minipage%
       \leavevmode%
     \fi%
     \closeout\linenum@out%
     \openout\linenum@out=#1\relax%
  \fi}

%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\new@line}
% The \protect\cs{new@line} macro sends the \protect\cs{@nl} command to the line-list
% file, to mark the start of a new text line, and its page number.
% \changes{v0.6.0}{2004/11/16}{Extended \protect\cs{new@line} to output page numbers}
%    \begin{macrocode}
\newcommand*{\new@line}{%
  \IfStrEq{\led@pb@setting}{after}%
    {\xifinlist{\the\absline@num}{\l@prev@nopb}%
      {\xifinlist{\the\absline@num}{\normal@page@break}%
        {\numgdef{\@next@page}{\c@page+1}%
        \write\linenum@out{\string\@nl[\@next@page][\@next@page]}%
      }%
      {\write\linenum@out{\string\@nl[\the\c@page][\thepage]}}%
    }%
    {\write\linenum@out{\string\@nl[\the\c@page][\thepage]}}}%
  {}%
  \IfStrEq{\led@pb@setting}{before}%
    {\numdef{\next@absline}{\the\absline@num+1}%
    \xifinlist{\next@absline}{\l@prev@nopb}%
      {\xifinlist{\the\absline@num}{\normal@page@break}%
        {\numgdef{\nc@page}{\c@page+1}%
        \write\linenum@out{\string\@nl[\nc@page][\nc@page]}%
        }%
        {\write\linenum@out{\string\@nl[\the\c@page][\thepage]}}%
      }%
      {\write\linenum@out{\string\@nl[\the\c@page][\thepage]}}%
    }%
    {}%
  \IfStrEqCase{\led@pb@setting}{{before}{\relax}{after}{\relax}}[\write\linenum@out{\string\@nl[\the\c@page][\thepage]}]%
}

%    \end{macrocode}
% \end{macro}
% \begin{macro}{\if@noneed@Footnote}
% \protect\cs{if@noneed@Footnote} is a boolean to check if we have to print a error message when a \protect\cs{edtext} is called without any critical notes.
%
% \begin{macro}{\flag@start}
% \begin{macro}{\flag@end}
% \changes{v1.12.3}{2014/08/15}{\protect\cs{flag@start} and \protect\cs{flag@end} are now defined only one time for eledmac and eledpar}
% \changes{v1.12.3}{2014/08/15}{\protect\cs{flag@start} send a error message when a \protect\cs{edtext} is done without insert (note)}
% \changes{v1.12.8}{2014/09/12}{\protect\cs{flag@start} do not send a error message when a \protect\cs{edtext} is done without insert (note) but have a endnote}
% We enclose a lemma marked by \protect\cs{edtext} in
% \protect\cs{flag@start} and \protect\cs{flag@end}: these send the \protect\cs{@ref}
% command to the line-list file. \protect\cs{edtext} is responsible for
% setting the value of \protect\cs{insert@count} appropriately; it
% actually gets done by the various footnote macros.
%    \begin{macrocode}
\newif\if@noneed@Footnote%

\newcommand*{\flag@start}{%
  \ifledRcol%
    \edef\next{\write\linenum@outR{%
                  \string\@ref[\the\insert@countR][}}%
    \next%
    \ifnum\insert@countR<1%
      \if@noneed@Footnote\else%
        \led@err@EdtextWithoutFootnote%
      \fi%
    \fi%
  \else%
    \edef\next{\write\linenum@out{%
                  \string\@ref[\the\insert@count][}}%
    \next%
    \ifnum\insert@count<1%
      \if@noneed@Footnote\else%
        \led@err@EdtextWithoutFootnote%
      \fi%
    \fi%
  \fi}%

%    \end{macrocode}
% \end{macro}
% \end{macro}
% \end{macro}
%
% \begin{macro}{\startsub}
% \begin{macro}{\endsub}
% \changes{v1.15.0}{2015/01/12}{Restore subline feature (disabled by mistake in v1.8.0).}
% \protect\cs{startsub} and \protect\cs{endsub}
% turn sub-lineation on and off, by writing
% appropriate instructions to the line-list file.  When
% sub-lineation is in effect, the line number counter is frozen and
% the sub-line counter advances instead. If one of these commands
% appears in the middle of a line, it does not take effect until the
% next line; in other words, a line is counted as a line or
% sub-line depending on what it started out as, even if that
% changes in the middle.
%
% We tinker with \protect\cs{lastskip} because a command of either sort
% really needs to be attached to the last word preceding the change, not
% the first word that follows the change. This is because sub-lineation
% will often turn on and off in mid-line---stage directions, for example,
% often are mixed with dialogue in that way---and when a line is mixed
% we want to label it using the system that was in effect at its start.
% But when sub-lineation begins at the very start of a line we have a
% problem, if we don't put in this code.
%    \begin{macrocode}


\newcommand*{\startsub}{\dimen0\lastskip
  \ifdim\dimen0>0pt \unskip \fi
  \ifledRcol \write\linenum@outR{\string\sub@on}%
  \else      \write\linenum@out{\string\sub@on}%
  \fi
  \ifdim\dimen0>0pt \hskip\dimen0 \fi}
\def\endsub{\dimen0\lastskip
  \ifdim\dimen0>0pt \unskip \fi
  \ifledRcol \write\linenum@outR{\string\sub@off}%
  \else      \write\linenum@out{\string\sub@off}%
  \fi
  \ifdim\dimen0>0pt \hskip\dimen0 \fi}

%    \end{macrocode}
% \end{macro}
% \end{macro}
%
% \begin{macro}{\advanceline}
% You can use \protect\cs{advanceline}\marg{num}
% in running text to advance the current visible
% line-number by a specified value, positive or negative.
%    \begin{macrocode}
\newcommand*{\advanceline}[1]{\leavevmode%
  \ifledRcol \write\linenum@outR{\string\@adv[#1]}%
  \else      \write\linenum@out{\string\@adv[#1]}%
  \fi%
}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\setline}
% You can use \protect\cs{setline}\marg{num}
% in running text (i.e., within \protect\cs{pstart}...\protect\cs{pend}) to set the 
% current visible
% line-number to a specified positive value.
%    \begin{macrocode}

\newcommand*{\setline}[1]{%
 \leavevmode%
  \ifnum#1<\z@
    \led@warn@BadSetline
  \else
    \ifledRcol \write\linenum@outR{\string\@set[#1]}%
    \else      \write\linenum@out{\string\@set[#1]}%
    \fi
  \fi}

%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\setlinenum}
% You can use \protect\cs{setlinenum}\marg{num}
% before a \protect\cs{pstart} to set the visible line-number to a specified 
% positive value. It writes a \protect\cs{l@d@set} command to the line-list file.
%    \begin{macrocode}

\newcommand*{\setlinenum}[1]{%
  \ifnum#1<\z@
    \led@warn@BadSetlinenum
  \else
    \ifledRcol \write\linenum@outR{\string\l@d@set[#1]}
    \else      \write\linenum@out{\string\l@d@set[#1]} \fi
  \fi}

%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\startlock}
% \begin{macro}{\endlock}
% You can use \protect\cs{startlock} or \protect\cs{endlock}
% in running text to start or end line number locking at
% the current line. They decide whether line numbers or sub-line numbers
% are affected, depending on the current state of the sub-lineation flags.
%    \begin{macrocode}

\newcommand*{\startlock}{%
  \ifledRcol \write\linenum@outR{\string\lock@on}%
  \else      \write\linenum@out{\string\lock@on}%
  \fi}
\def\endlock{%
  \ifledRcol \write\linenum@outR{\string\lock@off}%
  \else      \write\linenum@out{\string\lock@off}%
  \fi}
%    \end{macrocode}
% \end{macro}
% \end{macro}
%
% \begin{macro}{\ifl@dskipnumber}
% \begin{macro}{\ifl@dskipversenumber}
% \begin{macro}{\l@dskipnumbertrue}
% \begin{macro}{\l@dskipnumberfalse}
% \begin{macro}{\skipnumbering}
% In numbered text \protect\cs{skipnumbering} will suspend the numbering
% for that particular line.
% \changes{v0.7.0}{2005/02/22}{Added \protect\cs{skipnumbering} and supports}
% \changes{v1.21.0}{2015/04/13}{\protect\cs{skipnumbering} defined only one time for both \Eledmac{} and \Eledpar{}.}
% \changes{v1.21.0}{2015/04/13}{Correct \protect\cs{skipnumbering} for stanza.}
% \changes{v1.21.0}{2015/04/13}{Delete \protect\cs{skipnumbering@reg}.}
%    \begin{macrocode}
\newif\ifl@dskipnumber
\newif\ifl@dskipversenumber%
\newcommand*{\skipnumbering}{%
  \leavevmode%
  \ifledRcol%
    \ifinstanza%
       \write\linenum@outR{\string\n@num@stanza}%
    \else%
      \write\linenum@outR{\string\n@num}%
    \fi%
    \advanceline{-1}%
  \else%
    \ifinstanza%
       \write\linenum@out{\string\n@num@stanza}%
    \else%
      \write\linenum@out{\string\n@num}%
    \fi%
    \advanceline{-1}%
  \fi%
}%

%    \end{macrocode}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
%
% \section{Marking text for notes}
% \label{text}\relax
%
% The \protect\cs{edtext} macro is used to create all 
% footnotes and endnotes,
% as well as to print the portion of the main text to which a given note
% or notes is keyed. The idea is to have that lemma appear only once in
% the \file{.tex} file: all instances of it in the main text and in the
% notes are copied from that one appearance.
%
% The \protect\cs{edtext} macro takes two arguments.
% \begin{verbatim}
%    \edtext{#1}{#2}
% \end{verbatim}
%
% \begin{itemize}\addtolength{\itemsep}{-1ex}
% \item \verb"#1" is the piece of the main text being glossed;
% it gets added to the
% main text, and is also used as a lemma for notes to it.
%
% \item \verb"#2" is a series of subsidiary macros that generate
% various kinds of notes. 
% \end{itemize}
%
% The \protect\cs{edtext} macro may be used (somewhat) recursively; that
% is, \protect\cs{edtext} may be used within its own first argument. The
% code would be much simpler without this feature, but nested notes
% will commonly be necessary: it is quite likely that we will have an
% explanatory note for a long passage and notes on variants for
% individual words within that passage. The situation we can't
% handle is overlapping notes that are not nested: for example, one
% note covering lines 10--15, and another covering 12--18.
% You can
% handle such cases by using the \protect\cs{lemma} and \protect\cs{linenum}
% macros within \verb"#2": they alter the copy of the lemma and the
% line numbers that are passed to the notes, and hence allow you to
% overcome any limitations of this system, albeit with extra
% effort.
%
% The recursive operation of \protect\cs{edtext} will fail if you try to use a copy
% that is called something other than \protect\cs{edtext}. In order to handle
% recursion, \protect\cs{edtext} needs to redefine its own definition temporarily
% at one point, and that does not work if the macro you are calling is
% not actually named \protect\cs{edtext}. There  is no problem as long as \protect\cs{edtext}
% is not invoked in the first argument. If you want to call \protect\cs{edtext}
% something else, it is best to create instead a macro that expands
% to an invocation of \protect\cs{edtext}, rather than copying \protect\cs{edtext} and giving
% it a new name; otherwise you will need to add an appropriate
% definition for your new macro to \protect\cs{morenoexpands}.
%
% Side effects of our line-numbering code make it impossible to use
% the usual footnote macros directly within a paragraph whose lines are
% numbered (see comments to
% \protect\cs{do@line}, \reff{doline}).
% Instead, the appropriate note-generating command
% is appended to the list macro \protect\cs{inserts@list}, and when \protect\cs{pend}
% completes the paragraph it inserts all the notes at the proper places.
%
%
% Note that we do not provide previous-note information, although it is
% often wanted; your own macros must handle that. We ca not do it
% correctly without keeping track of what kind of notes have gone past:
% it is not just a matter of remembering the line numbers associated with
% the previous invocation of \protect\cs{edtext}, because that might have been for
% a different kind of note. It is preferable for your footnote macros
% to store and recall this kind of information if they need it.
%
%
% \subsection{\protect\cs{edtext}
%  itself}
%
% The various note-generating macros might want to request that
% commands be executed not at once, but in close connection with the
% start or end of the lemma. For example, footnote numbers in the text
% should be connected to the end of the lemma; or, instead of a single
% macro to create a note listing variants, you might want to use
% several macros in series to create individual variants, which would
% each add information to a private macro or token register, which in
% turn would be formatted and output when all of \verb"#2" for the lemma
% has been read.
%
% \begin{macro}{\end@lemmas}
% To accomodate this, we provide a list macro
% to which macros may add commands that should subsequently
% be executed at the end of the lemma when that lemma is added
% to the text of the paragraph. A macro should add its contribution to
% \protect\cs{end@lemmas} by using \protect\cs{xleft@appenditem}.
% (Anything that needs to be done at
% the \emph{start} of the lemma may be handled using \protect\cs{aftergroup}, since
% the commands specified within \protect\cs{edtext}'s second argument are
% executed within a group that ends just before the lemma is added to
% the main text.)
%
% \protect\cs{end@lemmas} is intended for the few things that need to be
% associated with the end of the lemma, like footnote numbers. Such
% numbers are not implemented in the current version, and indeed
% no use is currently made of \protect\cs{end@lemmas} or of the \protect\cs{aftergroup}
% trick. The general
% approach would be to define a macro to be used within the second
% argument of \protect\cs{edtext} that would add the appropriate command to
% \protect\cs{end@lemmas}.
%
% Commands that are added to this list should always take care
% not to do anything that adds possible line-breaks to the output;
% otherwise line numbering could be thrown off.
%    \begin{macrocode}
\list@create{\end@lemmas}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\dummy@edtext}
% We now need to define a number of macros that allow us to weed out
% nested instances of \protect\cs{edtext}, and other problematic macros, from
% our lemma. This is similar to what we did in reading the line-list
% file using \protect\cs{dummy@ref} and various redefinitions---and that is
% because nested \protect\cs{edtext}s macros create nested \protect\cs{@ref} entries
% in the line-list file.
%
%
%    \begin{macrocode}
\newcommand{\dummy@edtext}[2]{#1}
%    \end{macrocode}
% 
% \end{macro}
% \begin{macro}{\dummy@edtext@showlemma}
% Some time, we want to obtain only the first argument of \protect\cs{edtext}, while also wrapping it in \protect\cs{showlemma}. For example, when printing a \protect\cs{eledsection}.
%    \begin{macrocode}
\newcommand{\dummy@edtext@showlemma}[2]{\showlemma{#1}}%
%    \end{macrocode}
% \end{macro}
%
% We are going to need another macro that takes one argument and ignores
% it entirely. This is supplied by the \LaTeX\ \protect\cs{@gobble}\marg{arg}.
%
% \begin{macro}{\no@expands}
% \begin{macro}{\morenoexpands}
% We need to turn off macro expansion for certain sorts of macros we are
% likely to see within the lemma and within the notes.
%
% The first class is font-changing macros. We suppress expansion for
% them by letting them become equal to zero.\footnote{Since `control
% sequences equivalent to characters are not expandable'---\thetexbook,
% answer to Exercise 20.14.} This is done because we want to
% pass into our notes the generic commands to change to roman or
% whatever, and not their expansions that will ask for a particular style at
% a specified size.  The notes may well be in a smaller font, so the
% command should be expanded later, when the note's environment is in
% effect.
%
% A second sort to turn off includes a few of the accent macros.
% Most are not a problem: an accent that is expanded to an \protect\cs{accent}
% command may be harder to read but it works just the same. The
% ones that cause problems are: those that use alignments---\TeX\
% seems to get confused about the difference between alignment
% parameters and macro parameters; those that use temporary control
% sequences; and those that look carefully at what the current font
% is.
%
% (The \protect\cs{copyright} macro defined in \PlainTeX\ has this sort of
% problem as well, but is not used enough to bother with. That macro,
% and any other that causes trouble, will get by all right if you put
% a \protect\cs{protect} in front of it in your file.)
%
% We also need to eliminate all \macpackage macros like \protect\cs{edlabel} and
% \protect\cs{setline} that write things to auxiliary files: that writing
% should be done only once. And we make
% \protect\cs{edtext} itself, if it appears within its own
% argument, do nothing but copy its first argument.
%
% Finally, we execute \protect\cs{morenoexpands}. The version of
% \protect\cs{morenoexpands} defined here does nothing; but you may define
% a version of your own when you need to add more expansion
% suppressions as needed with your macros. That makes it possible
% to make such additions without needing to copy or modify the
% standard \macpackage code. If you define your own
% \protect\cs{morenoexpands}, you must be very careful about spaces: if the
% macro adds any spaces to the text when it runs, extra space
% will appear in the main text when \protect\cs{edtext} is used.
%
% (A related problem, not addressed by these two macros,
% is that of characters whose category code is changed by any
% the macros used in the arguments to \protect\cs{edtext}. Since the
% category codes are set when the arguments are scanned, macros
% that depend on changing them will not work. We have most often
% encountered this with characters that are made `active' within
% text in some, but not all, of the languages used within the document.
% One way around the problem, if it takes this form,
% is to ensure that those characters are \emph{always} active; within
% languages that make no special use of them, their associated
% control sequences should simply return the proper character. A simpler solution is to avoid active character, using \LuaTeX\ or \XeLaTeX.)
% \changes{v0.2.0}{2003/07/25}{Added \protect\cs{l@dtabnoexpands} to \protect\cs{no@expands}}
% \changes{v0.2.1}{203/08/25}{Removed some \protect\cs{let}s from \protect\cs{no@expands}.
%    These were in \edmac{} but Peter Wilson feels that they should not have been as they
%    disabled page/line refs in a footnotes}
% \changes{v1.0.0}{2012/09/15}{Change to be compatible with new features}
%    \begin{macrocode}
\newcommand*{\no@expands}{%
  \let\select@@lemmafont=0%
  \let\startsub=\relax  \let\endsub=\relax
  \let\startlock=\relax \let\endlock=\relax
  \let\edlabel=\@gobble 
  \let\setline=\@gobble \let\advanceline=\@gobble
  \let\sameword\sameword@inedtext%
  \let\edtext=\dummy@edtext
  \l@dtabnoexpands
  \morenoexpands}
\let\morenoexpands=\relax

%    \end{macrocode}
% \end{macro}
% \end{macro}
%
% \begin{macro}{\@tag}
% Now, we define an empty \protect\cs{@tag} command. It will be redefine by \protect\cs{edtext}: its value is the first argument. It will be used by the \protect\cs{Xfootnote} commands.
%    \begin{macrocode}
\newcommand{\@tag}{}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\@edtext@level}
% \changes{v1.15.0}{2015/01/12}{New boolean \protect\cs{if@edtext@}.}
% \changes{v1.23.0}{2015/05/18}{The boolean \protect\cs{if@edtext@} becomes the counter \protect\cs{edtext@level}.}
% This counter is increased by 1 at each level of \protect\cs{edtext}. 
% That is useful for some commands which can have a different behavior if called inside or outside of the \marg{lemma} argument.
%    \begin{macrocode}
\newcount\@edtext@level%
\@edtext@level=0%
%    \end{macrocode}
% \end{macro}
% \changes{v1.16.0}{2014/01/23}{\protect\cs{edtext} is now defined only in \eledmac, not in \eledpar. Debug wrong numbering when using \protect\cs{sameword} + \protect\package{eledpar} + \protect\cs{tag} command.}
%
%
% \begin{macro}{\theedtext}
% The \verb+edtext+ counter is increased at each \cs{edtext} command. 
% It is used to add to insert hyperlinks between a notes and the lemma.
%    \begin{macrocode}
\newcounter{edtext}
\renewcommand{\theedtext}{edtxt@\arabic{edtext}}%
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\edtext}
% \changes{v0.4.0}{2004/02/29}{Added \protect\cs{showlemma} to \protect\cs{edtext}}
% \changes{v1.4.0}{2012/11/16}{Compatibility of \protect\cs{edtext} with the right-to-left direction (with Polyglossia).}
% \changes{v1.17.0}{2015/02/09}{Error message when calling \protect\cs{edtext} outside of a numbered paragraph.}
% When executed, \protect\cs{edtext} first ensures that we are in
% horizontal mode. 
%    \begin{macrocode}
\newcommand{\edtext}[2]{\leavevmode%
%    \end{macrocode}
% Then, check if we are in a numbered paragraph (\protect\cs{pstart}\ldots\protect\cs{pend}).. 
%    \begin{macrocode}
  \ifnumberedpar@%
%    \end{macrocode}
% We increase the \cs{@edtext@level} \TeX\ counter to know in which level of \protect\cs{edtext} we are.
%    \begin{macrocode}
      \global\advance\@edtext@level by 1%
%    \end{macrocode}
% We also increase the \verb+edtext+ \LaTeX\ counter to insert hypertarget if the \package{hyperref} package is loaded.
%    \begin{macrocode}
      \stepcounter{edtext}%
%    \end{macrocode}
% By default, we do not use \protect\cs{lemma}
%    \begin{macrocode}
      \global\@lemmacommand@false%
%    \end{macrocode}
%    \begin{macrocode}
      \begingroup%
%    \end{macrocode}
% We get the next series of samewords data in the list of samewords data for the current edtext level. We push them inside \protect\cs{sw@inthisedtext}.
%    \begin{macrocode}
      \ifledRcol% 
        \ifcsvoid{sw@list@edtextR@\the\@edtext@level}%
              {\global\let\sw@inthisedtext\empty}%
              {\expandafter\gl@p\csname sw@list@edtextR@\the\@edtext@level\endcsname\to\sw@inthisedtext}%
      \else%
        \ifcsvoid{sw@list@edtext@\the\@edtext@level}%
              {\global\let\sw@inthisedtext\empty}%
              {\expandafter\gl@p\csname sw@list@edtext@\the\@edtext@level\endcsname\to\sw@inthisedtext}%
      \fi%
%    \end{macrocode}
% \begin{macro}{\@tag}
% \label{@tag}Our normal lemma is just argument \verb"#1"; but that argument could have
% further invocations of \protect\cs{edtext} within it. We get a copy of the
% lemma without any \protect\cs{edtext} macros within it by temporarily redefining
% \protect\cs{edtext} to just copy its first argument and ignore the other,
% and then expand \verb"#1" into \protect\cs{@tag}, our lemma.
%
% This is done within a group that starts here, in order to get the
% original \protect\cs{edtext} restored; within this group we have also turned
% off the expansion of those control sequences commonly found within text
% that can cause trouble for us.
% 
%    \begin{macrocode}
        \global\renewcommand{\@tag}{%
          \no@expands #1%
          }%
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\l@d@nums}
% \phantomsection\label{nums}
% Prepare more data for the benefit of note-generating macros: the line
% references and font specifier for this lemma go to \protect\cs{l@d@nums}.
%    \begin{macrocode}
        \set@line%
%    \end{macrocode}
% \end{macro}
% \protect\cs{insert@count} will be altered by the note-generating macros:
% it counts the number of deferred footnotes or other insertions
% generated by this instance of \protect\cs{edtext}. 
% If we are in a right column (\parpackage), we use \protect\cs{insert@countR} 
% instead of \protect\cs{insert@count}.
%    \begin{macrocode}
        \ifledRcol \global\insert@countR \z@% 
        \else      \global\insert@count \z@ \fi%
%    \end{macrocode}
% Now process the note-generating macros in argument \verb"#2"
% (i.e., \protect\cs{Afootnote}, \protect\cs{lemma}, etc.). \protect\cs{ignorespaces} is here to
% skip over any spaces that might appear at the start of \verb"#2";
% otherwise they wind up in the main text. Footnote and other
% macros that are used within \verb"#2" should all end with
% \protect\cs{ignorespaces} as well, to skip any spaces between macros when
% several are used in series.
%    \begin{macrocode}
        \ignorespaces #2\relax%
%    \end{macrocode}
% With \protect\package{polyglossia}, you must track whether the language reads left to right (English) or right to left (Arabic).
%    \begin{macrocode}
        \@ifundefined{xpg@main@language}{%if not polyglossia
           \flag@start}%
           {\if@RTL\flag@end\else\flag@start\fi%
           }%
%    \end{macrocode}
% We write in the numbered file wether the current \protect\cs{edtext} has a \protect\cs{lemma} in the the second argument.
%    \begin{macrocode}
       \if@lemmacommand@%
         \ifledRcol%
           \write\linenum@outR{\string\@lemma}%
         \else%
           \write\linenum@out{\string\@lemma}%
         \fi%
       \fi%
%    \end{macrocode}
% Finally, we are ready to admit the first argument into the current
% paragraph.
%
% It is important that we generate and output all the notes for this
% chunk of text \emph{before} putting the text into the paragraph: notes
% that are referenced by line number should generally be tied to the
% start of the passage they gloss, not the end. That should all be done
% within the expansion of \verb"#2" above, or in \protect\cs{aftergroup}
% commands within that expansion.
%    \begin{macrocode}
      \endgroup%
      \ifdef{\hypertarget}%
        {%
        \csedef{thisedtext@\the\@edtext@level}{\theedtext}%
        \Hy@raisedlink@left{\hypertarget{\csuse{thisedtext@\the\@edtext@level}:start}{}}%
        \showlemma{#1}%
        \Hy@raisedlink{\hypertarget{\csuse{thisedtext@\the\@edtext@level}:end}{}}%
        }%
        {%
        \showlemma{#1}%
        }%
%    \end{macrocode}
%
% Finally, we add any insertions that are
% associated with the \emph{end} of
% the lemma. Footnotes that are identified by symbols rather than by
% where the lemma begins in the main text need to be done here, and
% not above.
%
%    \begin{macrocode}
      \ifx\end@lemmas\empty \else%
        \gl@p\end@lemmas\to\x@lemma%
        \x@lemma%
        \global\let\x@lemma=\relax%
      \fi%
      \@ifundefined{xpg@main@language}{%if not polyglossia
           \flag@end}%
           {\if@RTL\flag@start\else\flag@end\fi% With polyglossia, you must track whether the language reads left to right (English) or right to left (Arabic).
           }%
%    \end{macrocode}
% We switch some flags to false.
% \begin{itemize}
%    \item The one that checks having footnotes inside a \protect\cs{edtext}.
%    \item The one that says we are inside a \protect\cs{edtext}. In fact, it is not a flag, but a counter which is increased to 1 in each leavel of \protect\cs{edtext}.
%    \item The one that says we are inside à \protect\cs{@lemma}.
% \end{itemize}
%    \begin{macrocode}
      \global\@noneed@Footnotefalse%
      \global\advance\@edtext@level by -1%
      \global\@lemmacommand@false%
%    \end{macrocode}
% If we are outside of a numbered paragraph,
% we send error message and print the first argument.
%    \begin{macrocode}
  \else%
  \showlemma{#1} (\textbf{\textsc{Edtext outside numbered paragraph}})\led@err@edtextoutsidepstart%
  \fi%
}%

\newcommand*{\flag@end}{%
  \ifledRcol%
    \write\linenum@outR{]}%
  \else%
    \write\linenum@out{]}%
  \fi}%

%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\ifnumberline}
% The \protect\cs{ifnumberline} option can be set to FALSE to disable line numbering.
%  \begin{macrocode}
\newif\ifnumberline
\numberlinetrue
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\set@line}
% The \protect\cs{set@line} macro
% is called by \protect\cs{edtext} to put the line-reference field and
% font specifier for the current block of text into \protect\cs{l@d@nums}.
%
% One instance of \protect\cs{edtext} may generate several notes, or it
% may generate none\,---\,it is legitimate for argument \verb"#2" to \protect\cs{edtext} to
% be empty. But \protect\cs{flag@start} and \protect\cs{flag@end} induce the generation of
% a single entry in \protect\cs{line@list} during the next run, and it is vital
% to also remove one and only one \protect\cs{line@list} entry here.
%
% If no more lines are listed in \protect\cs{line@list}, something is
% wrong\,---\,probably just some change in the input. We set all the numbers
% to zeros, following an old publishing convention for numerical
% references that have not yet been resolved.
%    \begin{macrocode}
\newcommand*{\set@line}{%
  \ifledRcol
    \ifx\line@listR\empty
      \global\noteschanged@true
      \xdef\l@d@nums{000|000|000|000|000|000|\edfont@info}%
    \else
      \gl@p\line@listR\to\@tempb
      \xdef\l@d@nums{\@tempb|\edfont@info}%
      \global\let\@tempb=\undefined
    \fi
  \else
    \ifx\line@list\empty
      \global\noteschanged@true
      \xdef\l@d@nums{000|000|000|000|000|000|\edfont@info}%
    \else
      \gl@p\line@list\to\@tempb
      \xdef\l@d@nums{\@tempb|\edfont@info}%
      \global\let\@tempb=\undefined
    \fi
  \fi}

%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\edfont@info}
% The macro \protect\cs{edfont@info} returns coded information about the
% current font. 
%
%    \begin{macrocode}
\newcommand*{\edfont@info}{\f@encoding/\f@family/\f@series/\f@shape}

%    \end{macrocode}
% \end{macro}
%
% \subsection{Substitute lemma}
%
% \begin{macro}{\lemma}
% \changes{v1.23.0}{2015/05/18}{Fix spurious space after \protect\cs{lemma} command}
% The \protect\cs{lemma}\marg{text} macro allows you to change the lemma
% that is passed on to the notes.
% Read about \protect\cs{@tag} in normal \protect\cs{edtext} macro for more details about \protect\cs{sw@list@inedtext} and \protect\cs{no@expands} (\reff{@tag}).
%    \begin{macrocode}
\newcommand*{\lemma}[1]{%
  \global\@lemmacommand@true%
  \global\renewcommand{\@tag}{%
    \no@expands #1%
  }%
  \ignorespaces%
}%
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\@lemma}
% The \protect\cs{@lemma} is written in the numbered file to set which \protect\cs{edtext} has an
% \protect\cs{lemma} as second argument.
%    \begin{macrocode}
\newcommand{\@lemma}{%
  \booltrue{lemmacommand@\the\@edtext@level}%
}%
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\if@lemmacommand@}
% \changes{v1.15.0}{2015/01/12}{New boolean \protect\cs{iflemmacommand@}.}
% This boolean is set to TRUE inside a \protect\cs{edtext} (or \protect\cs{critext}) when a \protect\cs{lemma} command is called. 
% That is useful for some commands which can have a different behavior if the lemma in the note is different from the lemma in the main text.
%    \begin{macrocode}
\newif\if@lemmacommand@%
%    \end{macrocode}
% \end{macro}
% \subsection{Substitute line numbers}
%
% \begin{macro}{\linenum}
% \label{linenumdef}
% The \protect\cs{linenum} macro can change any or all of
% the page and line numbers that are
% passed on to the notes.
%
% As argument \protect\cs{linenum} takes a set of seven parameters
% separated by vertical bars, in the format used internally for
% \protect\cs{l@d@nums} (see \reff{linenumbers}): the starting page,
% line, and sub-line numbers, followed by the ending page, line, and
% sub-line numbers, and then the font specifier for the lemma.
% However, you can omit any parameters you do not want to change, and
% you can omit a string of vertical bars at the end of the
% argument. Hence \verb"\linenum{18|4|0|18|7|1|0}" is an invocation
% that changes all the parameters, but \verb"\linenum{|3}" only
% changes the starting line number, and leaves the rest unaltered.
%
% We use \verb"\\" as an internal separator for the macro parameters.
%    \begin{macrocode}
\newcommand*{\linenum}[1]{%
  \xdef\@tempa{#1|||||||\noexpand\\\l@d@nums}%
  \global\let\l@d@nums=\empty
  \expandafter\line@set\@tempa|\\\ignorespaces}
%    \end{macrocode}
%
% \begin{macro}{\line@set}
% \protect\cs{linenum} calls \protect\cs{line@set} to do the actual work; it
% looks at the first number in the argument to \protect\cs{linenum},
% sets the corresponding value in \protect\cs{l@d@nums}, and then calls
% itself to process the next number in the \protect\cs{linenum}
% argument, if there are more numbers in \protect\cs{l@d@nums} to process.
%    \begin{macrocode}
\def\line@set#1|#2\\#3|#4\\{%
  \gdef\@tempb{#1}%
  \ifx\@tempb\empty
        \l@d@add{#3}%
  \else
        \l@d@add{#1}%
  \fi
  \gdef\@tempb{#4}%
  \ifx\@tempb\empty\else
      \l@d@add{|}\line@set#2\\#4\\%
  \fi}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\l@d@add}
% \protect\cs{line@set} uses \protect\cs{l@d@add} to tack numbers or vertical bars
% onto the right hand end of \protect\cs{l@d@nums}.
%    \begin{macrocode}
\newcommand{\l@d@add}[1]{\xdef\l@d@nums{\l@d@nums#1}}

%    \end{macrocode}
% \end{macro}
% \end{macro}
%
% \subsection{Lemma disambiguation}
% The mechanism which counts the occurrence of a same word in a same line is quite complex, because, when \LaTeX\ reads a command between a \protect\cs{pstart} and a \protect\cs{pend}, it does not know yet which are the line numbers.
% 
% The general mechanism is the following:
% \begin{itemize}
%    \item \textbf{At the first run}, each \protect\cs{sameword} command increments an \protect\package{etoolbox} counter the name of which contains the argument of the \protect\cs{sameword} commands.
%    \item Then this counter, associated with the argument of \protect\cs{sameword} is stored,  with the \protect\cs{@sw} command, in the auxiliary file of the current \protect\package{eledmac} section (the \verb+.1+, \verb+.2+… file).
%    \item \textbf{When this auxiliary file is read at the second run}, different operations are achieved:
%	\begin{enumerate} 
%       	\item  Get the rank of each \protect\cs{sameword} in a line (relative rank) from the rank of each \protect\cs{sameword} in all the numbered section (absolute rank):
%		      \begin{itemize}
%        		\item For each paired \protect\cs{sameword} argument  and absolute line number, a counter is defined. Its value corresponds to the number of times  \protect\cs{sameword}\marg{argument}+  is called from the beginning of  the lineation to the end of the current line. We also store the same data for the preceding absolute line number, if it does not have \protect\cs{sameword}\marg{argument}.    
%        		\item  For each \protect\cs{sameword} having the same argument,  we subtract from its absolute rank the number stored for the paired \protect\cs{sameword} argument and previous absolute line number. Consequently, we obtain the relative rank.
%			       \item See the following example which explain how for same \protect\cs{sameword} absolute ranks are transformed to relative rank.
%  \begin{verbatim}
%  At line 1:
%  absolute rank 1 becomes relative rank 1-0 = 1
%  1 is stored for this \sameword and the line 1
%  At line 2:
%  absolute rank 2 becomes relative rank 2-1 = 1
%  absolute rank 3 becomes relative rank 3-2 = 2
%  3 is stored for this \sameword and the line 2
%  At line 3:
%  no \sameword for this line.
%  3 is stored for this \sameword and the line 3
%  At line 4:
%  absolute rank 4 becomes relative rank 4-3 = 1  
%  3 is stored for this \sameword and the line 4
%  \end{verbatim}
%	       \end{itemize}
%        \item Create lists of lists of \protect\cs{sameword} by depth of \protect\cs{edtext}.
% That is: create a list for \protect\cs{edtext} of level~1, a list for \protect\cs{edtext} of level~2, a list for \protect\cs{edtext} of level~3 etc.
% For each \protect\cs{edtext} in these list, we store all the relative rank of \protect\cs{saweword} which are called as lemma information, that is 1) or called in the first argument of \protect\cs{sameword} 2) or called in the \protect\cs{lemma} macro of the second argument of \protect\cs{sameword} AND marked by the optional argument of \protect\cs{saweword} in first argument of \protect\cs{edtext}.
%
% For example, suppose a line with nested \protect\cs{edtext}s which contains some 
% word marked by \protect\cs{sameword} and having the following relative rank:\\
%
% 
%\let\up\textsuperscript
%bar\up{1} \fbox{%
%	    \fbox{foo\up{1} foo\up{2} bar\up{2} foo\up{3}} (A)(B)
%	    foo\up{4} bar\up{3}% 
%	 } (C)
%	 \fbox{%
%	    \fbox{foo\up{5}} (D)
%	    bar\up{4}
%	 } (E)
%
% In this example, all lemma information for \protect\cs{edtext} is framed. The text in parenthesis is the content of critical notes associated to the preceding frame.
% As you can see, we have two level of \protect\cs{edtext}.
%
%The list for \protect\cs{edtext}s of level~1 is $\{\{1,2,2,3,4,3\},\{5,4\}\}$.
%
%The list for \protect\cs{edtext}s of level~2 is $\{\{1,2,2,3\},\{5\}\}$.
%
% As you can see, the mandatory argument of \protect\cs{sameword} does not matter: we store the rank informations for every word potentially ambiguous.
%       \end{enumerate}
%  \item At the second run, when a critical notes is called, we associate it to the next item of the list associated to is \protect\cs{edtext} level. So, in the previous example:
%  \begin{itemize}
%      \item Critical notes (A) and (B) are associated with $\{1,2,2,3\}$.
%      \item Critical note (C) is associated with $\{1,2,2,3,4,3\}$.
%      \item Critical note (D) is associated with $\{5\}$.
%      \item Critical note (E) is associated with $\{5,4\}$.
%  \end{itemize}
%  \item At the second run, when a critical note is printed:
%    \begin{itemize}
%         \item The \protect\cs{sameword} command is let  \protect\cs{sameword@inedtext}. 
%	        \item At each call of this \protect\cs{sameword@inedtext}, we step to the next element of the list associated to the note. Let it be $r$.
%	      \item For the word marked by \protect\cs{sameword}, we calculate how many time it is called in its line. To do it:
%           \begin{itemize}
%            \item We get the absolute line number of the current \protect\cs{sameword}. This absolute line number was stored with list of relative rank for the current \protect\cs{edtext}. That means, in the previous example, that, if the absolute line number of \protect\cs{edtext} was 1, that critical notes (A) and (B) were not associated with  $\{1,2,2,3\}$ but with $\{(1,1),(2,1),(2,1),(3,1)\}$. Such method to know the absolute line number associated to a \protect\cs{sameword} is required because a \protect\cs{edtext} can be overlap many lines, but \protect\cs{sameword} can't get it.
%            \item We get the value associated, when reading the auxiliary file, to the pair compose by the current marked word and the current absolute line number. Let this value be $n$.
%           \end{itemize}
%        \item If $n >1 $, that mean the current word appears more than once time in its line. In this case, we call \protect\cs{showwordrank} with the word as first argument and $r$ as second argument. If the word is called only once, we just print it.
%   \end{itemize}
% \end{itemize} 
% After theory, implementation.
% \begin{macro}{\get@sw@txt}
% As the argument of \protect\cs{sameword} can contain active character if we 
% use \protect\package{inputenc} with \verb+utf8+ option instead of native UTF-8 engine, 
% we store its detokenized content in a macro in order to allow dynamic name of macro with \protect\cs{csname}.\footnote{See \url{http://tex.stackexchange.com/q/244538/7712}.}
%
% Because there is a bug with \protect\cs{detokenize} and \XeTeX\ when using non BMP characters\footnote{\url{http://sourceforge.net/p/xetex/bugs/108/}}, 
% we detokenize only for not \XeTeX engines. In any case, in \XeTeX, a \protect\cs{csname} construction can contain UTF-8 characters without a problem, as UTF-8 characters are not managed with category code, but instead read directly as UTF-8 characters.
%    \begin{macrocode}
\newcommand{\get@sw@txt}[1]{%
  \ifxetex%
    \xdef\sw@txt{#1}%
  \else%
    \expandafter\xdef\expandafter\sw@txt\expandafter{\detokenize{#1}}%
  \fi%
}%
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\sameword}
% \changes{v1.23.0}{2015/05/18}{In order to allow use of \protect\cs{sameword} with inputenc, we detokenize its mandatory argument before using it in control sequence names.}
% The hight level macro \protect\cs{sameword}, used by the editor.
%    \begin{macrocode}
\newcommandx{\sameword}[2][1,usedefault]{%
     \leavevmode%
     \get@sw@txt{#2}%
%    \end{macrocode}
% Now, the real code. First, increment the counter corresponding to the argument.
%    \begin{macrocode}
  \unless\ifledRcol%
     \csnumgdef{sw@\sw@txt}{\csuse{sw@\sw@txt}+1}%
%    \end{macrocode}
% Then, write its value to the numbered file.  
%    \begin{macrocode}
     \protected@write\linenum@out{}{\string\@sw{\sw@txt}{\csuse{sw@\sw@txt}}{#1}}%
%    \end{macrocode}
% Do the same thing if we are in the right columns.
%    \begin{macrocode}
  \else%
     \csnumgdef{sw@\sw@txt}{\csuse{sw@\sw@txt}+1}%
     \protected@write\linenum@outR{}{\string\@sw{\sw@txt}{\csuse{sw@\sw@txt}}{#1}}%
  \fi%
%    \end{macrocode}
% And print the word.
%    \begin{macrocode}
  #2%
}%
%    \end{macrocode}
% \end{macro}
% A flag set to true if a \protect\cs{@sw} relative rank must be added to the list of ranks for a specific \protect\cs{edtext}.
% \begin{macro}{\if@addsw}
%    \begin{macrocode}
\newif\if@addsw%
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\@sw}
% The command printed in the auxiliary files. 
%    \begin{macrocode}
\newcommand{\@sw}[3]{%
  \get@sw@txt{#1}%
  \unless\ifledRcol%
%    \end{macrocode}
% First, define a counter which store the second argument as value for a each paired absolute line number/first argument
%    \begin{macrocode}
    \csxdef{sw@\sw@txt @\the\absline@num @\the\section@num}{#2}%
%    \end{macrocode}
% If  such argument was not defined for the preceding line, define it.
%    \begin{macrocode}
    \numdef{\prev@line}{\the\absline@num-1}%
    \ifcsundef{sw@\sw@txt @\prev@line @\the\section@num}{%
      \csnumgdef{sw@\sw@txt @\prev@line @\the\section@num}{#2-1}%
     }{}%
%    \end{macrocode}
% Then, calculate the position of the word in the line.
%    \begin{macrocode}
    \numdef{\the@sw}{#2-\csuse{sw@\sw@txt @\prev@line @\the\section@num}}%
%    \end{macrocode}
% And do the same thing for the right side.
%    \begin{macrocode}
  \else%
    \csxdef{sw@\sw@txt @\the\absline@numR @\the\section@numR @R}{#2}%
    \numdef{\prev@line}{\the\absline@numR-1}%
    \ifcsundef{sw@\sw@txt @\prev@line @\the\section@numR @R}{%
      \csnumgdef{sw@\sw@txt @\prev@line @\the\section@numR @R}{#2-1}%
     }{}%
    \numdef{\the@sw}{#2-\csuse{sw@\sw@txt @\prev@line @\the\section@numR @R}}%
  \fi%
%    \end{macrocode}
%  And now, add it to the list of \protect\cs{@sw} for the current edtext, in all depth.
%    \begin{macrocode}
  \@tempcnta=\@edtext@level
  \@whilenum{\@tempcnta>0}\do{%
    \ifcsdef{sw@list@edtext@tmp@\the\@tempcnta}%
      {%
        \@addswfalse%
        \notbool{lemmacommand@\the\@tempcnta}%
          {\@addswtrue}%
          {\IfStrEq{#3}{inlemma}%
            {\@addswtrue}%
            {%
             \def\do##1{%
                \ifnumequal{##1}{\the\@tempcnta}%
                  {\@addswtrue\listbreak}%
                  {}%
             }%
             \docsvlist{#3}%
            }%
          }%
          \if@addsw%
            \letcs{\@tmp}{sw@list@edtext@tmp@\the\@tempcnta}%
            \ifledRcol%
              \xright@appenditem{{\the@sw}{\the\absline@numR}}\to\@tmp%
            \else%
              \xright@appenditem{{\the@sw}{\the\absline@num}}\to\@tmp%
            \fi%
            \cslet{sw@list@edtext@tmp@\the\@tempcnta}{\@tmp}%
          \fi%
      }%
      {}%
    \advance\@tempcnta by -1%
  }%
}%
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\sameword@inedtext}
% The command called when \protect\cs{sameword} is called in a \protect\cs{edtext}.
%    \begin{macrocode}
\newcommandx{\sameword@inedtext}[2][1,usedefault]{%
  \get@sw@txt{#2}%
  \unless\ifledRcol@%
%    \end{macrocode}
% Just a precaution.
%    \begin{macrocode}
      \ifx\sw@list@inedtext\empty%
        \def\the@sw{999}%
        \def\this@absline{-99}%
      \else%
%    \end{macrocode}
% But in many cases, at this step, we should have some content in the list \protect\cs{sw@list@inedtext}, which contains the reference for \protect\cs{edtext}.
%    \begin{macrocode}
        \gl@p\sw@list@inedtext\to\@tmp%
        \edef\the@sw{\expandafter\@firstoftwo\@tmp}%
        \edef\this@absline{\expandafter\@secondoftwo\@tmp}%
      \fi%
%    \end{macrocode}
% First, calculate the number of occurrences of the word in the current line
%    \begin{macrocode}
      \ifcsdef{sw@\sw@txt @\this@absline @\the\section@num}{%
        \numdef{\prev@line}{\this@absline-1}%
        \numdef{\sw@atthisline}{\csuse{sw@\sw@txt @\this@absline @\the\section@num}-\csuse{sw@\sw@txt @\prev@line @\the\section@num}}%
        }%
        {\numdef{\sw@atthisline}{0}}%
%    \end{macrocode}
% Finally, print the rank, but only if there is more than one occurrence of the word in the current line.
%    \begin{macrocode}
      \ifnumgreater{\sw@atthisline}{1}%
          {\showwordrank{#2}{\the@sw}}%
          {#2}%
%    \end{macrocode}
% And the same for right side.
%    \begin{macrocode}
  \else%
      \ifx\sw@list@inedtext\empty%
        \def\the@sw{999}%
        \def\this@absline{-99}%
      \else%
        \gl@p\sw@list@inedtext\to\@tmp%
        \edef\the@sw{\expandafter\@firstoftwo\@tmp}%
        \edef\this@absline{\expandafter\@secondoftwo\@tmp}%       
      \fi%
      \ifcsdef{sw@\sw@txt @\this@absline @\the\section@numR @R}{%
        \numdef{\prev@line}{\this@absline-1}%
        \numdef{\sw@atthisline}{\csuse{sw@\sw@txt @\this@absline @\the\section@numR @R}-\csuse{sw@\sw@txt @\prev@line @\the\section@numR @R}}%
        }%
        {\numdef{\sw@atthisline}{0}}%
        \ifnumgreater{\sw@atthisline}{1}%
          {\showwordrank{#2}{\the@sw}}%
          {#2}%
  \fi%
}%
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\showwordrank}
%    \begin{macrocode}
% Finally, the way the rank will be printed.
\newcommand{\showwordrank}[2]{%
  #1\textsuperscript{#2}%
}%
%    \end{macrocode}
% \end{macro}

% \section{Paragraph decomposition and reassembly}
% \label{paragraph}\relax
%
% In order to be able to count the lines of text and affix line
% numbers, we add an extra stage of processing for each paragraph.
% We send the paragraph into a box
% register, rather than straight onto the vertical list, and when
% the paragraph ends we
% slice the paragraph into its component lines; to each line we
% add any notes or line numbers, add a command to write to the
% line-list, and then at last send the line to the vertical list.
% This section contains all the code for this processing.
%
% \subsection{Boxes, counters, \protect\cs{pstart}
% and \protect\cs{pend}}
%
% \begin{macro}{\raw@text}
% \begin{macro}{\ifnumberedpar@}
% \begin{macro}{\numberedpar@true}
% \begin{macro}{\numberedpar@false}
% \begin{macro}{\num@lines}
% \begin{macro}{\one@line}
% \begin{macro}{\par@line}
% Here are numbers and flags that are used internally in the course
% of the paragraph decomposition.
%
% When we first form the paragraph, it goes into a box register,
% \protect\cs{raw@text}, instead of onto the current vertical list.
% The \protect\cs{ifnumberedpar@} flag will be \verb"true" while a paragraph is
% being processed in that way.
% \protect\cs{num@lines} will store the number of lines in the paragraph
% when it is complete. When we chop it up into lines, each line
% in turn goes into the
% \protect\cs{one@line} register, and \protect\cs{par@line} will be the number
% of that line within the paragraph.
%    \begin{macrocode}
\newbox\raw@text
\newif\ifnumberedpar@
\newcount\num@lines
\newbox\one@line
\newcount\par@line
%    \end{macrocode}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
%
% \begin{macro}{\pstart}
% \begin{macro}{\AtEveryPstart}
% \changes{v1.6.1}{2013/10/27}{Spurious space in \protect\cs{pstart}.}
% \changes{v1.12.0}{2014/08/05}{New optional argument for \protect\cs{pstart}, to execute code before it.}
% \begin{macro}{\numberpstarttrue}
% \begin{macro}{\numberpstartfalse}
% \begin{macro}{\labelpstarttrue}
% \begin{macro}{\labelpstartfalse}
% \begin{macro}{\thepstart}
% \protect\cs{pstart} starts the paragraph by
% clearing the \protect\cs{inserts@list} list and other
% relevant variables, and then arranges for the
% subsequent text to go into the
% \protect\cs{raw@text} box. \protect\cs{pstart} needs to appear at the start of
% every paragraph that is to be numbered; the \protect\cs{autopar} command below
% may be used to insert these commands automatically.
%
% Beware: everything that occurs between \protect\cs{pstart} and \protect\cs{pend}
% is happening within a group; definitions must be global if you want
% them to survive past the end of the paragraph.
% \changes{v1.13.1}{2014/09/25}{Add \protect\cs{l@dzeropenalties} in \protect\cs{pstart}}
%    \begin{macrocode}

\newcommand{\AtEveryPstart}[1]{%
  \ifstrempty{#1}%
    {\xdef\at@every@pstart{}}%
    {\gdef\at@every@pstart{\noindent#1}}%
}%
\xdef\at@every@pstart{}%

\newcounter{pstart}
\renewcommand{\thepstart}{{\bfseries\@arabic\c@pstart}. }
\newif\ifnumberpstart
\numberpstartfalse
\newif\iflabelpstart
\labelpstartfalse
\newcommandx*{\pstart}[1][1]{%
  \normal@pars%
  \ifstrempty{#1}{\at@every@pstart}{\noindent#1}%
  \ifautopar%
    \autopar%
  \fi%
  \ifluatex%
    \edef\l@luatextextdir@L{\the\textdir}%
  \fi%
  \if@nobreak%
    \let\@oldnobreak\@nobreaktrue%
  \else%
    \let\@oldnobreak\@nobreakfalse%
  \fi%
  \@nobreaktrue%
  \ifnumbering \else%
    \led@err@PstartNotNumbered%
    \beginnumbering%
  \fi%
  \ifnumberedpar@%
    \led@err@PstartInPstart%
    \pend%
  \fi%
  \list@clear{\inserts@list}%
  \global\let\next@insert=\empty%
  \begingroup\normal@pars%
  \global\advance \l@dnumpstartsL\@ne
  \global\setbox\raw@text=\vbox\bgroup%
    \ifautopar\else%
    \ifnumberpstart%
      \ifinstanza\else%
       \ifsidepstartnum\else%
         \thepstart%
        \fi%
       \fi%
      \fi%
     \fi%
  \numberedpar@true%
  \iflabelpstart\protected@edef\@currentlabel%
       {\p@pstart\thepstart}
  \fi%
  \l@dzeropenalties%
  \ignorespaces%because not automatically ignored if an optional argument is used (classical TeX behavior for space after commands)
  }
%    \end{macrocode}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \begin{macro}{\pend}
% \changes{v1.12.0}{2014/08/05}{New optional argument for \protect\cs{pend}, to execute code after it.}
% \changes{v1.6.1}{2013/10/27}{Spurious space in \protect\cs{pend}.}
% \protect\cs{pend} must be used to end a numbered paragraph.
%
%    \begin{macrocode}
\newcommandx*{\pend}[1][1]{\ifnumbering \else%
    \led@err@PendNotNumbered%
  \fi%
  \global\l@dskipversenumberfalse%
  \ifnumberedpar@ \else%
    \led@err@PendNoPstart%
  \fi%
%    \end{macrocode}
% We set all the usual interline penalties to zero and then immediately
% call \protect\cs{endgraf} to end the paragraph; this ensures that there will
% be no large interline penalties to prevent us from slicing the
% paragraph into pieces. These penalties revert to the values
% that you set when the group for the \protect\cs{vbox} ends. Then we call
% \protect\cs{do@line} to slice a line off the top of the
% paragraph, add a line number and footnotes, and restore it to the page;
% we keep doing this until there are not any more lines left.
%    \begin{macrocode}
  \l@dzeropenalties%
  \endgraf\global\num@lines=\prevgraf\egroup%
  \global\par@line=0%
%    \end{macrocode}
% We check if lineation is by pstart: in this case, we reset line number, but only in the second line of the pstart.
% We can't reset line number at the beginning of  \protect\cs{pstart}, as \protect\cs{setline} is parsed at the end of previous \protect\cs{pend}, and so, we must do it at the end of first line of pstart.
%    \begin{macrocode}
  \csnumdef{pstartline}{0}%
  \loop\ifvbox\raw@text%
    \csnumdef{pstartline}{\pstartline+1}%
    \do@line%
    \ifbypstart@%
     \ifnumequal{\pstartline}{1}{%
       \bgroup%
       \let\leavevmode\relax%
       \setline{1}%
       \egroup%
     \resetprevline@}{}%
    \fi%
  \repeat%
%    \end{macrocode}
% Deal with any leftover notes, and then end the group that was begun
% in the \protect\cs{pstart}.
%    \begin{macrocode}
  \flush@notes%
  \endgroup%
  \ignorespaces%
%    \end{macrocode}
% Increase pstart counter.
%    \begin{macrocode}
  \ifnumberpstart%
     \pstartnumtrue%
  \fi%
  \addtocounter{pstart}{1}%
%    \end{macrocode}
% Restore paragraph, nobreak setting and autopar setting.
%    \begin{macrocode}
  \normal@pars%
  \@oldnobreak%
  \ifautopar%
    \autopar%
  \fi%
%    \end{macrocode}
% Print the optional argument of \protect\cs{pend} or the content printed after every \protect\cs{pend}
%    \begin{macrocode}
  \ifstrempty{#1}{\at@every@pend}{\noindent#1}%
}

%    \end{macrocode}
% \end{macro}
% Here, two macros to insert content after every \protect\cs{pend}, between numbered line.
% \protect\cs{AtEveryPend} is the user macro, \protect\cs{at@every@pend} is macro set by it.
%
% \begin{macro}{\AtEveryPend}
% \begin{macro}{\at@every@pend}
%    \begin{macrocode}

\newcommand{\AtEveryPend}[1]{%
  \ifstrempty{#1}%
    {\xdef\at@every@pend{}}%
    {\gdef\at@every@pend{\noindent#1}}%
}%
\xdef\at@every@pend{}%

%    \end{macrocode}
%  \end{macro}
%  \end{macro}
%
% \begin{macro}{\l@dzeropenalties}
% A macro to zero penalties for \protect\cs{pend} or \protect\cs{pstart}.
% \changes{v0.7.0}{2005/02/22}{Added \protect\cs{l@dzeropenalties}}
%    \begin{macrocode}
\newcommand*{\l@dzeropenalties}{%
  \brokenpenalty \z@ \clubpenalty \z@
  \displaywidowpenalty \z@ \interlinepenalty \z@ \predisplaypenalty \z@
  \postdisplaypenalty \z@ \widowpenalty \z@}

%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\autopar}
% In most cases it is only an annoyance to have to label the paragraphs
% to be numbered with \protect\cs{pstart} and \protect\cs{pend}. \protect\cs{autopar} will
% do that automatically, allowing you to start a paragraph with its
% first word and no other preliminaries, and to end it with a blank line
% or a \protect\cs{par} command. The command should be issued within a
% group, after \protect\cs{beginnumbering} has been used to start the
% numbering; all paragraphs within the group will be affected.
%
% A few situations can cause problems. One is a paragraph that begins with
% a begin-group character or command: \protect\cs{pstart} will not get invoked
% until after such a group beginning is processed; as a result the
% character that ends the group will be mistaken for the end of the
% \protect\cs{vbox} that \protect\cs{pstart} creates, and the rest of the paragraph
% will not be numbered. Such paragraphs need to be started explicitly
% using \protect\cs{indent}, \protect\cs{noindent}, or \protect\cs{leavevmode}\,---\,or \protect\cs{pstart}, since
% you can still include your own \protect\cs{pstart} and \protect\cs{pend}
% commands even with \protect\cs{autopar} on.
%
% Prematurely ending the group within which \protect\cs{autopar} is in
% effect will cause a similar problem. You must either leave a
% blank line or use \protect\cs{par} to end the last paragraph before
% you end the group.
%
% The functioning of this macro is more tricky than the usual
% \protect\cs{everypar}: we do not want anything to go onto the vertical
% list at all, so we have to end the paragraph, erase any evidence
% that it ever existed, and start it again using \protect\cs{pstart}.
% We remove the paragraph-indentation box using \protect\cs{lastbox} and
% save the width, and then skip backwards over the \protect\cs{parskip}
% that has been added for this paragraph. Then we start again with
% \protect\cs{pstart}, restoring the indentation that we saved, and
% locally change \protect\cs{par} so that it will do our \protect\cs{pend} for us.
%    \begin{macrocode}
\newif\ifautopar
\autoparfalse
\newcommand*{\autopar}{
  \ifledRcol
    \ifnumberingR \else
    \led@err@AutoparNotNumbered
    \beginnumberingR
    \fi
    \else
    \ifnumbering \else
    \led@err@AutoparNotNumbered
    \beginnumbering
    \fi
  \fi
  \autopartrue
  \everypar{\setbox0=\lastbox
    \endgraf \vskip-\parskip
    \pstart \noindent \kern\wd0 \ifnumberpstart\ifinstanza\else\thepstart\fi\fi
    \let\par=\pend}%
  \ignorespaces}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\normal@pars}
% We also define a macro which we can rely on to turn off the
% \protect\cs{autopar} definitions at various important places, if they
% are in force. We will want to do this within a footnotes, for
% example.
%    \begin{macrocode}
\newcommand*{\normal@pars}{\everypar{}\let\par\endgraf}

%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\ifautopar@pause}
% We define a boolean test switched to true at the beginning
% of the \protect\cs{pausenumbering} command if the autopar is enabled.
% This boolean will be tested at the beginning of \protect\cs{resumenumbering}
% to continue the autopar if neeeded.
%    \begin{macrocode}
\newif\ifautopar@pause
%    \end{macrocode}
% \end{macro}
% \subsection{Processing one line}
%
% \subsubsection{General process}
% \begin{macro}{\do@line}\label{doline}
% \begin{macro}{\l@dunhbox@line}
% The \protect\cs{do@line} macro is called by \protect\cs{pend} to
% do all the processing for a single line of text.
% \changes{v1.6.1}{2013/10/27}{Move the call to \protect\cs{inserthangingsymbol} to allow use \protect\cs{hfill} inside.}
% \changes{v1.12.2}{2014/08/07}{Fix a bug with critical notes at the tops of pages (added by v12.0.0)}
%    \begin{macrocode}
 \newcommand*{\l@dunhbox@line}[1]{\unhbox #1}
 \newcommand*{\do@line}{%
  {\vbadness=10000
   \splittopskip=\z@
   \do@linehook
\l@demptyd@ta
   \global\setbox\one@line=\vsplit\raw@text to\baselineskip}%
  \unvbox\one@line \global\setbox\one@line=\lastbox
  \getline@num
  \IfStrEq{\led@pb@setting}{before}{\led@check@pb\led@check@nopb}{}
  \ifnum\@lock>\@ne
    \inserthangingsymboltrue
  \else
    \inserthangingsymbolfalse
  \fi
  \check@pb@in@verse
  \ifl@dhidenumber%
    \global\l@dhidenumberfalse%
    \f@x@l@cks%
  \else%
    \affixline@num%
  \fi%
%    \end{macrocode}
% \changes{v1.12.0}{2014/08/05}{\protect\cs{do@line} is split in more little commands.}
% Depending weither a sectioning command is called at this pstart or not 
% we print sectioning command or normal line, 
%    \begin{macrocode}
  \xifinlist{\the\l@dnumpstartsL}{\eled@sections@@}%
     {\print@eledsection}%
     {\print@line}%
  \IfStrEq{\led@pb@setting}{after}{\led@check@pb\led@check@nopb}{}
  }%
%    \end{macrocode}
% \end{macro}
% \end{macro}
%
% \subsubsection{Process for ``normal'' line}
% \begin{macro}{\print@line}
% \changes{v1.13.1}{2014/09/25}{Coming back of add@penalties, mistakenly deleted in version 0.17!}
% \changes{v1.18.0}{2015/02/23}{Compatibility with \LuaLaTeX\ RTL languages.}
% \protect\cs{print@line} is for normal line, i. e line without sectioning command.
%    \begin{macrocode}
\def\print@line{
%    \end{macrocode}
% Insert the pstart number in side, if we are in the first line of a pstart.
%    \begin{macrocode}
    \affixpstart@num%
%    \end{macrocode}
% The line will be boxed, to have the good width.
%    \begin{macrocode}
    \hb@xt@ \linewidth{%
%    \end{macrocode}
% User hook.
%    \begin{macrocode}
    \do@insidelinehook%
%    \end{macrocode}
% Left line number
%    \begin{macrocode}
    \l@dld@ta%
%    \end{macrocode}
% Restore marginal and footnotes.
%    \begin{macrocode}
        \add@inserts\affixside@note%
%    \end{macrocode}
% Print left notes.
%    \begin{macrocode}
        \l@dlsn@te
%    \end{macrocode}
% Boxes the line, writes information about new line in the numbered file.
%    \begin{macrocode}
        {\ledllfill\hb@xt@ \wd\one@line{\new@line%
%    \end{macrocode}
% If we use \LuaLaTeX\, then restore the direction.
%    \begin{macrocode}
        \ifluatex%
          \textdir\l@luatextextdir@L%
        \fi%
%    \end{macrocode}
% Insert, if needed, the hanging symbol.
%    \begin{macrocode}
        \inserthangingsymbol %Space keept for backward compatibility
%    \end{macrocode}
% And so, print the line.
%    \begin{macrocode}
        \l@dunhbox@line{\one@line}}%
%    \end{macrocode}
% Right line number
%    \begin{macrocode}
        \ledrlfill\l@drd@ta%
%    \end{macrocode}
% Print right notes.
%    \begin{macrocode}
        \l@drsn@te
      }}%
%    \end{macrocode}
%   And reinsert penalties (for page breaking)...
%    \begin{macrocode}
    \add@penalties%
}
%    \end{macrocode}
% \end{macro}
% \subsubsection{Process for line containing \protect\cs{eledsection} command}
% \begin{macro}{\print@eledsection}
% \protect\cs{print@eledsection} to print sectioning command with line number.
% It sets the correct spacing, depending whether a sectioning command was called at previous \protect\cs{pstart}, calls the sectioning command, prints the normal line outside of the paper, to be able to have critical footnotes. 
% Because of how this prints, a vertical spacing correction is added.
%    \begin{macrocode}
\def\print@eledsection{%
    \add@inserts\affixside@note%
    \numdef{\temp@}{\l@dnumpstartsL-1}%
    \xifinlist{\temp@}{\eled@sections@@}{\@nobreaktrue}{\@nobreakfalse}%
    \@eled@sectioningtrue%
    \csuse{eled@sectioning@\the\l@dnumpstartsL}%
    \@eled@sectioningfalse%
    \global\csundef{eled@sectioning@\the\l@dnumpstartsL}%
    \if@RTL%
      \hspace{-3\paperwidth}%
    {\hbox{\l@dunhbox@line{\one@line}} \new@line}%
    \else%
      \hspace{3\paperwidth}%
    {\new@line \hbox{\l@dunhbox@line{\one@line}}}%
    \fi%
    \vskip-\baselineskip%
}
%    \end{macrocode}
% \end{macro}
% \subsubsection{Hooks}
% \begin{macro}{\do@linehook}
% \begin{macro}{\do@insidelinehook}
% Two hooks into \protect\cs{do@line}. The first is called at the beginning of \protect\cs{do@line}, the second is called in the line box.
% The second can, for example, have a \protect\cs{markboth} command inside, the first ca not.
% \changes{v0.7.0}{2005/02/18}{Added \protect\cs{do@linehook} for use in \protect\cs{do@line}}
% \changes{v1.5.0}{2013/07/11}{Added \protect\cs{do@insidelinehook} for use in \protect\cs{do@line}}
%    \begin{macrocode}
\newcommand*{\do@linehook}{}
\newcommand*{\do@insidelinehook}{}
%    \end{macrocode}
% \end{macro}
% \end{macro}
%
% \begin{macro}{\dolinehook}
% \begin{macro}{\doinsidelinehook}
% These hight level commands just redefine the low level commands. 
% They have to be used be user, without \protect\cs{makeatletter}.
% \changes{v1.12.5}{2014/08/31}{Added \protect\cs{dolinehook} and \protect\cs{doinsidelinehook}}
%    \begin{macrocode}
\newcommand*{\dolinehook}[1]{\gdef\do@linehook{#1}}%
\newcommand*{\doinsidelinehook}[1]{\gdef\do@insidelinehook{#1}}%

%    \end{macrocode}
% \end{macro}
% \end{macro}
% \subsubsection{Sidenotes and marginal line number initialization}
% \begin{macro}{\l@demptyd@ta}
% \begin{macro}{\l@dld@ta}
% \begin{macro}{\l@drd@ta}
% \begin{macro}{\l@dcsnotetext}
% \begin{macro}{\l@dcsnotetext@l}
% \begin{macro}{\l@dcsnotetext@r}
%  Nulls the \protect\cs{...d@ta}, which may later hold line numbers.
% Similarly for \protect\cs{l@dcsnotetext}, \protect\cs{l@dcsnotetext@l}, \protect\cs{l@dcsnotetext@r} for the texts of the sidenotes, left and right notes.
% \changes{v0.7.0}{2005/02/18}{Added \protect\cs{l@demptyd@ta}}
%    \begin{macrocode}
\newcommand*{\l@demptyd@ta}{%
  \gdef\l@dld@ta{}%
  \gdef\l@drd@ta{}%
  \gdef\l@dcsnotetext@l{}%
  \gdef\l@dcsnotetext@r{}%
  \gdef\l@dcsnotetext{}}

%    \end{macrocode}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% 
% \begin{macro}{\l@dlsn@te}
% \begin{macro}{\l@drsn@te}
% Zero width boxes of the left and right side notes, together with their kerns.
% \changes{v0.7.0}{2005/02/18}{Added \protect\cs{l@dlsn@te} and \protect\cs{l@drsn@te}
%              for use in \protect\cs{do@line}}
%    \begin{macrocode}
\newcommand{\l@dlsn@te}{%
  \hb@xt@ \z@{\hss\box\l@dlp@rbox\kern\ledlsnotesep}}
\newcommand{\l@drsn@te}{%
   \hb@xt@ \z@{\kern\ledrsnotesep\box\l@drp@rbox\hss}}

%    \end{macrocode}
% \end{macro}
% \end{macro}
% 
%
% \begin{macro}{\ledllfill}
% \begin{macro}{\ledrlfill}
%  These macros are called at the left (\protect\cs{ledllfill}) and the right
% (\protect\cs{ledllfill}) of each numbered line. The initial definitions
% correspond to the original code for \protect\cs{do@line}.
%    \begin{macrocode}
\newcommand*{\ledllfill}{\hfil}
\newcommand*{\ledrlfill}{}

%    \end{macrocode}
% \end{macro}
% \end{macro}
%
% \section{Line and page number computation}
%
% \begin{macro}{\getline@num}
% The \protect\cs{getline@num} macro
% determines the page and line numbers for the line we are about to
% send to the vertical list.
%    \begin{macrocode}
\newcommand*{\getline@num}{%
  \global\advance\absline@num \@ne%
  \do@actions
  \do@ballast
  \ifnumberline
      \ifsublines@
         \ifnum\sub@lock<\tw@
           \global\advance\subline@num \@ne
         \fi
      \else
        \ifnum\@lock<\tw@
           \global\advance\line@num \@ne
           \global\subline@num \z@
        \fi
      \fi
  \fi
}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\do@ballast}
% \phantomsection\label{do@ballast}\relax
% The real work in the macro above is done in \protect\cs{do@actions}, but
% before we plunge into that, let's get \protect\cs{do@ballast} out of the
% way.  This macro looks to see if there is an action to be
% performed on the \emph{next} line, and if it is going to be a
% page break action, \protect\cs{do@ballast} decreases the count \protect\cs{ballast@count}
% counter
% by the amount of \verb"ballast".  This means, in practice, that when
% \protect\cs{add@penalties} assigns penalties at this point, \TeX\ will be
% given extra encouragement to break the page here (see
% \reff{add@penalties}).
%
% \begin{macro}{\ballast@count}
% \begin{macro}{\c@ballast}
% First we set up the required counters; they are initially
% set to zero, and will remain so unless you type
% \verb"\setcounter{ballast}"\marg{some figure} in your document.
%    \begin{macrocode}
\newcount\ballast@count
\newcounter{ballast}
  \setcounter{ballast}{0}
%    \end{macrocode}
% \end{macro}
% \end{macro}
% And here is \protect\cs{do@ballast} itself. It advances \protect\cs{absline@num}
% within the protection of a group to make its check for what
% happens on the next line.
%    \begin{macrocode}
\newcommand*{\do@ballast}{\global\ballast@count \z@
  \begingroup
    \advance\absline@num \@ne
    \ifnum\next@actionline=\absline@num
      \ifnum\next@action>-1001\relax
        \global\advance\ballast@count by -\c@ballast
       \fi
     \fi
  \endgroup}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\do@actions}
% \begin{macro}{\do@actions@next}
%
% The \protect\cs{do@actions} macro
% looks at the list of actions to take at particular absolute line
% numbers, and does everything that is specified for the current line.
%
% It may call itself recursively, and to do this efficiently (using
% \TeX's optimization for tail recursion), we define a control-sequence
% called \protect\cs{do@actions@next} that is always the last thing that
% \protect\cs{do@actions} does. If there could be more actions to process for
% this line, \protect\cs{do@actions@next} is set equal to \protect\cs{do@actions};
% otherwise it is just \protect\cs{relax}.
% \changes{v0.7.0}{2005/02/22}{Added number skipping to \protect\cs{do@actions}}
%    \begin{macrocode}
\newcommand*{\do@actions}{%
  \global\let\do@actions@next=\relax
  \ifnum\absline@num<\next@actionline\else
%    \end{macrocode}
%
% First, page number changes, which will generally be the most common
% actions. If we are restarting lineation on each page, this is where it
% happens.
%    \begin{macrocode}
    \ifnum\next@action>-1001
       \global\page@num=\next@action
       \ifbypage@
         \global\line@num=\z@ \global\subline@num=\z@
         \resetprevline@
       \fi
%    \end{macrocode}
%
% Next, we handle
% commands that change the line-number values. (We subtract $5001$ rather
% than $5000$ here because the line number is going to be incremented
% automatically in \protect\cs{getline@num}.)
%    \begin{macrocode}
    \else
       \ifnum\next@action<-4999
          \@l@dtempcnta=-\next@action
          \advance\@l@dtempcnta by -5001
          \ifsublines@
             \global\subline@num=\@l@dtempcnta
          \else
             \global\line@num=\@l@dtempcnta
          \fi
%    \end{macrocode}
%
%  We rescale the value in
% \protect\cs{@l@dtempcnta} so that we can use a case statement.
%    \begin{macrocode}
       \else
          \@l@dtempcnta=-\next@action
          \advance\@l@dtempcnta by -1000
          \do@actions@fixedcode
       \fi
    \fi
%    \end{macrocode}
%
% Now we get information about the next action off the list,
% and then set \protect\cs{do@actions@next} so that we will
% call ourself recursively: the next action might also be for this
% line.
%
% There is no warning if we find \protect\cs{actionlines@list} empty,
% since that will always happen near the end of the section.
%
%    \begin{macrocode}
    \ifx\actionlines@list\empty
         \gdef\next@actionline{1000000}%
    \else
         \gl@p\actionlines@list\to\next@actionline
         \gl@p\actions@list\to\next@action
         \global\let\do@actions@next=\do@actions
    \fi
  \fi
%    \end{macrocode}
%
% Make the recursive call, if necessary.
%
%    \begin{macrocode}
\do@actions@next}

%    \end{macrocode}
% \end{macro}
% \end{macro}
% \begin{macro}{\do@actions@fixedcode}
% This macro handles the fixed codes for \protect\cs{do@actions}. It is
% one big case statement.
% \changes{v0.7.0}{2005/02/24}{Added \protect\cs{do@actions@fixedcode}}
%    \begin{macrocode}
\newcommand*{\do@actions@fixedcode}{%
  \ifcase\@l@dtempcnta
  \or%                   % 1001
    \global\sublines@true
  \or%                   % 1002
    \global\sublines@false
  \or%                   % 1003
      \global\@lock=\@ne
  \or%                   % 1004
    \ifnum\@lock=\tw@
      \global\@lock=\thr@@
    \else
      \global\@lock=\z@
    \fi
  \or%                   % 1005
     \global\sub@lock=\@ne
  \or%                   % 1006
    \ifnum\sub@lock=\tw@
      \global\sub@lock=\thr@@
    \else
      \global\sub@lock=\z@
    \fi
  \or%                   % 1007
    \l@dskipnumbertrue
  \or%                   % 1008
    \l@dskipversenumbertrue%
 \or%    % 1009
    \l@dhidenumbertrue
  \else
    \led@warn@BadAction
  \fi}


%    \end{macrocode}
% \end{macro}
% \section{Line number printing}
%
% \begin{macro}{\affixline@num}
% \protect\cs{affixline@num}  just puts a left line number into \protect\cs{l@dld@ta}
% or a right line number into \protect\cs{l@drd@ta} if required.
%
% To determine whether we need to affix a line number to this line,
% we compute the following:
% \begin{tabbing}
%   \quad $m$ \=  \kill
%   $n$ \> $= \mbox{\it int\/} ( ( \mbox{\it linenum\/} -
%                              \mbox{\it firstlinenum\/} ) /
%                                \mbox{\it linenumincrement\/} )$ \\
%   $m$ \> $= \mbox{\it firstlinenum\/} +
%                   ( n \times \mbox{\it linenumincrement\/})$
% \end{tabbing}
% (where \emph{int} truncates a real number to an integer).
% $m$ will be equal to \emph{linenum} only
% if we are to paste a number on here.
% However, the formula breaks down for the first line to number (and any
% before that), so we check that case separately: if \protect\cs{line@num} $\le$
% \protect\cs{firstlinenum}, we compare the two directly instead of making these
% calculations.
%
% We compute, in the scratch counter \protect\cs{@l@dtempcnta}, the number
% of the next line that should be printed with a number ($m$ in the
% above discussion), and move the current line number into the
% counter \protect\cs{@l@dtempcntb} for comparison.
%
%
% First, the case when we are within a sub-line range.
% \changes{v0.5.1}{2004/04/10}{Changed \protect\cs{affixline@num} to cater for sidenotes}
% \changes{v0.7.0}{2005/02/22}{Added skipnumering to \protect\cs{affixline@num}}
%    \begin{macrocode}
\newcommand*{\affixline@num}{%
%    \end{macrocode}
% No number is attached if \protect\cs{ifl@dskipnumber} is TRUE (and then it
% is set to its normal FALSE value).
% No number is attached if \protect\cs{ifnumberline} is FALSE (the normal value is TRUE).
% \changes{v0.15.0}{2012/06/11}{Line numbering can be disabled.}
%    \begin{macrocode}
  \ifledgroupnotesL@\else
    \ifnumberline
      \ifl@dskipnumber
        \global\l@dskipnumberfalse
      \else
        \ifsublines@
           \@l@dtempcntb=\subline@num
           \ifnum\subline@num>\c@firstsublinenum
               \@l@dtempcnta=\subline@num
               \advance\@l@dtempcnta by-\c@firstsublinenum
               \divide\@l@dtempcnta by\c@sublinenumincrement
               \multiply\@l@dtempcnta by\c@sublinenumincrement
               \advance\@l@dtempcnta by\c@firstsublinenum
           \else
               \@l@dtempcnta=\c@firstsublinenum
           \fi
%    \end{macrocode}
%
% That takes care of computing the values for comparison, but if line
% number locking is in effect we have to make a further check. If this
% check fails, then we disable the line-number display by setting the
% counters to arbitrary but unequal values.
%    \begin{macrocode}
           \ch@cksub@l@ck 
%    \end{macrocode}
%
% Now the line number case, which works the same way.
%    \begin{macrocode}
        \else
           \@l@dtempcntb=\line@num
%    \end{macrocode}
% Check on the \protect\cs{linenumberlist} 
% If it is \protect\cs{empty} use the standard
% algorithm.
%    \begin{macrocode}
           \ifx\linenumberlist\empty
              \ifnum\line@num>\c@firstlinenum
                 \@l@dtempcnta=\line@num
                 \advance\@l@dtempcnta by-\c@firstlinenum
                 \divide\@l@dtempcnta by\c@linenumincrement
                 \multiply\@l@dtempcnta by\c@linenumincrement
                 \advance\@l@dtempcnta by\c@firstlinenum
              \else
                 \@l@dtempcnta=\c@firstlinenum
              \fi
           \else
%    \end{macrocode}
% The \protect\cs{linenumberlist} was not \protect\cs{empty}, so here is Wayne's
% numbering mechanism. This takes place in \TeX's mouth.
%    \begin{macrocode}
              \@l@dtempcnta=\line@num
              \edef\rem@inder{,\linenumberlist,\number\line@num,}%
              \edef\sc@n@list{\def\noexpand\sc@n@list
                ####1,\number\@l@dtempcnta,####2|{\def\noexpand\rem@inder{####2}}}%
              \sc@n@list\expandafter\sc@n@list\rem@inder|%
              \ifx\rem@inder\empty%
                \advance\@l@dtempcnta\@ne
              \fi
           \fi
%    \end{macrocode}
%
%
% A locking check for lines, just like the version for sub-line
% numbers above.
%    \begin{macrocode}
           \ch@ck@l@ck
        \fi
%    \end{macrocode}
%
% The following tests are true if we need to print a line number.
%    \begin{macrocode}
        \ifnum\@l@dtempcnta=\@l@dtempcntb
           \ifl@dskipversenumber\else
%    \end{macrocode}
%
% If we got here,
% we are going to print a line number; so now we need to
% calculate a number that will tell us which side of the page will get
% the line number. We start from \protect\cs{line@margin}, which asks for
% one side always if it is less than $2$; and then if the side does
% depend on the page number, we simply add the page number to this
% side code---because the values of \protect\cs{line@margin} have been devised so
% that this produces a number that is even for left-margin numbers and
% odd for right-margin numbers.
%
% For \LaTeX\ we have to consider two column documents as well. In this case
% Peter Wilson thought we need to put the numbers at the outside of the column ---
% the left of the first column and the right of the second. Do the twocolumn
% stuff before going on with the original code.
% \begin{macro}{\l@dld@ta}
% \begin{macro}{\l@drd@ta}
% A left line number is stored in \protect\cs{l@dld@ta} and a right one in
% \protect\cs{l@drd@ta}.
%
%    \begin{macrocode}
             \if@twocolumn
                \if@firstcolumn
                   \gdef\l@dld@ta{\llap{{\leftlinenum}}}%
                \else
                   \gdef\l@drd@ta{\rlap{{\rightlinenum}}}%
                \fi
             \else
                \@l@dtempcntb=\line@margin
                \ifnum\@l@dtempcntb>\@ne
                   \advance\@l@dtempcntb \page@num
                \fi
                \ifodd\@l@dtempcntb
                   \gdef\l@drd@ta{\rlap{{\rightlinenum}}}%
                 \else
                   \gdef\l@dld@ta{\llap{{\leftlinenum}}}%
                \fi
             \fi
          \fi
       \fi
%    \end{macrocode}
% \end{macro}
% \end{macro}
%
% Now fix the lock counters, if necessary. 
% A value of $1$ is advanced to
% $2$; $3$ advances to $0$; other values are unchanged.
%    \begin{macrocode}
       \f@x@l@cks
      \fi
    \fi
  \fi
}

%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\ch@cksub@l@ck}
% \begin{macro}{\ch@ck@l@ck}
% \begin{macro}{\f@x@l@cks}
%  These macros handle line number locking for \protect\cs{affixline@num}.
% \changes{v0.7.0}{2005/02/24}{Added \protect\cs{ch@cksub@l@ck}, \protect\cs{ch@ck@l@ck}
%                          and \protect\cs{f@x@l@cks}}
%  \protect\cs{ch@cksub@l@ck} checks subline locking. If it fails, then we disable
% the line-number display by setting the counters to arbitrary but unequal
% values.
%    \begin{macrocode}
\newcommand*{\ch@cksub@l@ck}{%
    \ifcase\sub@lock
      \or
        \ifnum\sublock@disp=\@ne
           \@l@dtempcntb=\z@ \@l@dtempcnta=\@ne
        \fi
      \or
        \ifnum\sublock@disp=\tw@ \else
           \@l@dtempcntb=\z@ \@l@dtempcnta=\@ne
        \fi
      \or
        \ifnum\sublock@disp=\z@
           \@l@dtempcntb=\z@ \@l@dtempcnta=\@ne
        \fi
    \fi}
%    \end{macrocode}
% Similarly for line numbers.
%    \begin{macrocode}
\newcommand*{\ch@ck@l@ck}{%
    \ifcase\@lock
       \or
         \ifnum\lock@disp=\@ne
            \@l@dtempcntb=\z@ \@l@dtempcnta=\@ne
         \fi
       \or
         \ifnum\lock@disp=\tw@ \else
            \@l@dtempcntb=\z@ \@l@dtempcnta=\@ne
         \fi
       \or
         \ifnum\lock@disp=\z@
            \@l@dtempcntb=\z@ \@l@dtempcnta=\@ne
         \fi
    \fi}
%    \end{macrocode}
% Fix the lock counters.
% A value of $1$ is advanced to
% $2$; $3$ advances to $0$; other values are unchanged.
%    \begin{macrocode}
\newcommand*{\f@x@l@cks}{%
  \ifcase\@lock
  \or
    \global\@lock=\tw@
  \or \or
    \global\@lock=\z@
  \fi
  \ifcase\sub@lock
  \or
    \global\sub@lock=\tw@
  \or \or
    \global\sub@lock=\z@
  \fi}

%    \end{macrocode}
% \end{macro}
% \end{macro}
% \end{macro}
%
%
%
%
% \section{Pstart number printing in side}
% In side, the printing of pstart number is running like the printing of line number. There is only some differences:
% \begin{macro}{\affixpstart@num}
% \begin{macro}{\pstartnum}
% \begin{itemize}
%  \item The pstarts counter is upgrade in the \protect\cs{pend} command. Consequently, the \protect\cs{affixpstart@num} command has not to upgrade it, unlike the \protect\cs{affixline@num} which upgrades the lines counter.
%  \item To print the pstart number only at the beginning of a pstart, and not in every line, a boolean test is made. The \protect\cs{pstartnum} boolean is set to TRUE at every \protect\cs{pend}. It is tried in the \protect\cs{leftpstartnum} and \protect\cs{rightstartnum} commands. After the try, it is set to FALSE.
% \end{itemize}
% \begin{macro}{\leftpstartnum}
% \begin{macro}{\rightstartnum}
% \begin{macro}{\ifsidepstartnum}
%  \begin{macrocode}

\newif\ifsidepstartnum
\newcommand*{\affixpstart@num}{%
    \ifsidepstartnum
        \if@twocolumn
            \if@firstcolumn
                  \gdef\l@dld@ta{\llap{{\leftpstartnum}}}%
            \else
                  \gdef\l@drd@ta{\rlap{{\rightpstartnum}}}%
            \fi
        \else
             \@l@dtempcntb=\line@margin
            \ifnum\@l@dtempcntb>\@ne
                  \advance\@l@dtempcntb \page@num
            \fi
            \ifodd\@l@dtempcntb
                  \gdef\l@drd@ta{\rlap{{\rightpstartnum}}}%
            \else
                  \gdef\l@dld@ta{\llap{{\leftpstartnum}}}%
            \fi
        \fi
    \fi
        
}
%

\newif\ifpstartnum
\pstartnumtrue
\newcommand*{\leftpstartnum}{
    \ifpstartnum\thepstart
    \kern\linenumsep\fi
    \global\pstartnumfalse    
}
\newcommand*{\rightpstartnum}{
    \ifpstartnum
    \kern\linenumsep
    \thepstart
    \fi
    \global\pstartnumfalse
}
%    \end{macrocode}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \section{Restoring footnotes and penalties} 
% Because of the paragraph decomposition process in order to number line, \macpackage must hack the standard way \TeX\ works in order to manage insertion of footnotes,  both critical and familiar.
%
% We need to call the \protect\cs{insert} commands not when the content of \protect\cs{pstart}\ldots\protect\cs{pend} is read by \TeX\, by when each individual line is typeset.
% 
% Consequently, when reading the content of \protect\cs{pstart}\ldots\protect\cs{pend}, we store the insertion (footnotes) in an specific \macpackage's list, and we restore them to the vertical list when printing each individual line.
% 
% \subsection{Add insertions to the vertical list}
%
% \begin{macro}{\inserts@list}
% \protect\cs{inserts@list} is the list macro that contains the inserts that
% we save up for one paragraph.
%
%    \begin{macrocode}
\list@create{\inserts@list}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\add@inserts}
% \begin{macro}{\add@inserts@next}
% \protect\cs{add@inserts}
% is the penultimate macro used by \protect\cs{do@line}; it takes
% insertions saved in a list macro and sends them onto the vertical list.
%
% It may call itself recursively, and to do this efficiently (using
% \TeX's optimization for tail recursion), we define a control-sequence
% called \protect\cs{add@inserts@next} that is always the last thing that
% \protect\cs{add@inserts} does. If there could be more inserts to process for
% this line, \protect\cs{add@inserts@next} is set equal to \protect\cs{add@inserts};
% otherwise it is  just \protect\cs{relax}.
%
%    \begin{macrocode}
\newcommand*{\add@inserts}{%
  \global\let\add@inserts@next=\relax
%    \end{macrocode}
%
% If \protect\cs{inserts@list} is empty, there are not any more notes or insertions
% for this paragraph, and we need not waste our time.
%    \begin{macrocode}
  \ifx\inserts@list\empty \else
%    \end{macrocode}
%
% The \protect\cs{next@insert} macro records the number of the line that
% receives the next footnote or other insert; it is empty when we start
% out, and just after we have affixed a note or insert.
%    \begin{macrocode}
  \ifx\next@insert\empty
    \ifx\insertlines@list\empty
      \global\noteschanged@true
      \gdef\next@insert{100000}%
    \else
      \gl@p\insertlines@list\to\next@insert
    \fi
  \fi
%    \end{macrocode}
%
% If the next insert's for this line, tack it on (and then erase the
% contents of the insert macro, as it could be quite large).
% In that case, we also set \protect\cs{add@inserts@next} so that we will
% call ourself recursively: there might be another insert for this same
% line.
%
%    \begin{macrocode}
  \ifnum\next@insert=\absline@num
    \gl@p\inserts@list\to\@insert
    \@insert
    \global\let\@insert=\undefined
    \global\let\next@insert=\empty
    \global\let\add@inserts@next=\add@inserts
  \fi
\fi
%    \end{macrocode}
%
% Make the recursive call, if necessary.
%
%    \begin{macrocode}
\add@inserts@next}

%    \end{macrocode}
% \end{macro}
% \end{macro}
%
% \subsection{Penalties}
%
% \begin{macro}{\add@penalties}
% \protect\cs{add@penalties} is
% the last macro used by \protect\cs{do@line}. It adds up the club,
% widow, and interline penalties, and puts a single penalty
% of the appropriate size
% back into the paragraph; these penalties get
% removed by the \protect\cs{vsplit} operation. \protect\cs{displaywidowpenalty} and
% \protect\cs{brokenpenalty} are not restored, since we have no easy way to
% find out where we should insert them.
%
% \label{add@penalties}
% In this code, \protect\cs{num@lines} is the number of lines in the whole
% paragraph, and \protect\cs{par@line} is the line we are working on at the
% moment.  The count \protect\cs{@l@dtempcnta} is used to calculate and
% accumulate the penalty; it is initially set to the value of
% \protect\cs{ballast@count}, which has been worked out in \protect\cs{do@ballast}
% above (\reff{do@ballast}).  Finally, the penalty is
% checked to see that it does not go below $-10000$.
%    \begin{macrocode}
\newcommand*{\add@penalties}{\@l@dtempcnta=\ballast@count
  \ifnum\num@lines>\@ne
    \global\advance\par@line \@ne
    \ifnum\par@line=\@ne
      \advance\@l@dtempcnta \clubpenalty
    \fi
    \@l@dtempcntb=\par@line \advance\@l@dtempcntb \@ne
    \ifnum\@l@dtempcntb=\num@lines
      \advance\@l@dtempcnta \widowpenalty
    \fi
    \ifnum\par@line<\num@lines
      \advance\@l@dtempcnta \interlinepenalty
    \fi
  \fi
    \ifnum\@l@dtempcnta=\z@
      \relax
    \else
      \ifnum\@l@dtempcnta>-10000
        \penalty\@l@dtempcnta
      \else
        \penalty -10000
      \fi
    \fi}

%    \end{macrocode}
% \end{macro}
%
% \subsection{Printing leftover notes}
%
% \begin{macro}{\flush@notes}
% The \protect\cs{flush@notes}
% macro is called after the entire paragraph has been sliced up
% and sent on to the vertical list.
% If the number of notes to this paragraph has increased since the previous 
% run of \TeX, then there can be leftover notes that have not yet been
% printed. An appropriate error message will be printed elsewhere; but
% it is best to go ahead and
% print these notes somewhere, even if it is not in quite the
% right place. What we do is dump them all out here, so that they should
% be printed on the same page as the last line
% of the paragraph. We can hope that is not
% too far from the proper location, to which they will move on the next
% run.
%    \begin{macrocode}
\newcommand*{\flush@notes}{%
  \@xloop
    \ifx\inserts@list\empty \else
      \gl@p\inserts@list\to\@insert
      \@insert
      \global\let\@insert=\undefined
  \repeat}

%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\@xloop}
% \protect\cs{@xloop} is
% a variant of the \PlainTeX\ \protect\cs{loop} macro, useful when it's
% hard to construct a positive test using the \TeX\ \verb"\if" commands---as
% in \protect\cs{flush@notes} above. One types \protect\cs{@xloop} \verb"..." \verb"\if" \verb"..." \verb"\else"
% \verb"..." \verb"\repeat", and the action following \verb"\else" is repeated as long
% as the \verb"\if" test fails. (This macro will work wherever the \PlainTeX\
% \protect\cs{loop} is used, too, so we could just call it \protect\cs{loop};
% but it seems preferable not to change the definitions of any of
% the standard macros.)
%
% This variant of \protect\cs{loop} was introduced by
% Alois Kabelschacht\index{Kabelschacht, Alois} in
% \textit{TUGboat} \textbf{8} (1987), pp.\,184--5.
%
%    \begin{macrocode}
\def\@xloop#1\repeat{%
  \def\body{#1\expandafter\body\fi}%
  \body}

%    \end{macrocode}
% \end{macro}
%
% \section{Critical footnotes}
% \label{footnotes}
%
% The footnote macros are adapted from those in \PlainTeX, but they
% differ in these respects: the outer-level commands must add other
% commands to a list macro rather than doing insertions immediately;
% there are many separate levels of the footnotes, not just one; and there
% are options to reformat footnotes into paragraphs or into multiple
% columns.
%
% \subsection{Fonts}
% \label{fontcode}\relax
% Before getting into the details of formatting the notes, we set
% up some font macros. It is the notes that present the greatest
% challenge for our font-handling mechanism, because we need to be
% able to take fragments of our main text and print them in
% different forms: it is common to reduce the size,
% for example, without otherwise changing the fonts used.
%
%
% \begin{macro}{\select@lemmafont}\label{notefonts}
% \begin{macro}{\select@@lemmafont}
% \protect\cs{select@lemmafont} is provided to set the right font for
% the lemma in a note. This macro extracts the font specifier
% from the line and page number cluster, and issues the associated
% font-changing command, so that the lemma is printed in its
% original font.
%    \begin{macrocode}
  \def\select@lemmafont#1|#2|#3|#4|#5|#6|#7|{\select@@lemmafont#7|}
  \def\select@@lemmafont#1/#2/#3/#4|%
    {\fontencoding{#1}\fontfamily{#2}\fontseries{#3}\fontshape{#4}%
    \selectfont}

%    \end{macrocode}
% \end{macro}
% \end{macro}
%
%
% \subsection{Individual note options}
% \changes{v1.0.0}{2012/09/15}{Options of \protect\cs{Xfootnote}s.}
% \begin{macro}{\footnoteoptions@}
% The \protect\cs{footnoteoption@}\oarg{side}\marg{options}\marg{value} changes the value of on options of Xfootnote, to switch between true and false.
% \changes{v2.4.0}{2015/10/19}{First argument of \protect\cs{footnoteoption@} is now mandatory, not optional.}
%    \begin{macrocode}
\newcommand*{\footnoteoptions@}[3]{%
   \def\do##1{%
      \ifstrequal{#1}{L}{% In Leftside
          \xright@appenditem{\noexpand\setkeys[mac]{#3footnoteoption}{\unexpanded{##1}}}\to\inserts@list%
         \global\advance\insert@count \@ne% Increment the left insert counter.
      }%
      {%
          \xright@appenditem{\noexpand\setkeys[mac]{#3footnoteoption}{\unexpanded{##1}}}\to\inserts@listR%
          \global\advance\insert@countR \@ne% Increment the right insert counter insert.
      }%
   }%
   \notblank{#2}{\docsvlist{#2}}{}% Parsing all options
}
%    \end{macrocode}
% \end{macro}
%
% \subsection{Notes language}
% \begin{macro}{\footnotelang@lua}
% \protect\cs{footnotelang@lua} is called to remember the information about the direction of a lemma when \LuaLaTeX\ is used.
%    \begin{macrocode}
\newcommandx*{\footnotelang@lua}[1][1=L,usedefault]{%
   \ifstrequal{#1}{L}{%
   \xright@appenditem{{\csxdef{footnote@luatextextdir}{\the\textdir}}}\to\inserts@list%Know the dir of lemma
    \global\advance\insert@count \@ne%
    \xright@appenditem{{\csxdef{footnote@luatexpardir}{\the\pardir}}}\to\inserts@list%Know the dir of lemma
    \global\advance\insert@count \@ne%
   }%
   {%
   \xright@appenditem{{\csxdef{footnote@luatextextdir}{\the\textdir}}}\to\inserts@listR%Know the dir of lemma
    \global\advance\insert@countR \@ne%
    \xright@appenditem{{\csxdef{footnote@luatexpardir}{\the\pardir}}}\to\inserts@listR%Know the dir of lemma
    \global\advance\insert@countR \@ne%
   }%
}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\footnotelang@poly}
% \protect\cs{footnotelang@poly} is called to remember the information about the language of a lemma when \protect\package{polyglossia} is used.
%    \begin{macrocode}
\newcommandx*{\footnotelang@poly}[1][1=L,usedefault]{%
   \ifstrequal{#1}{L}{%
    \if@RTL%
        \xright@appenditem{{\csxdef{footnote@dir}{@RTLtrue}}}\to\inserts@list%Know the language used in the lemma
        \global\advance\insert@count \@ne%
    \else
         \xright@appenditem{{\csxdef{footnote@dir}{@RTLfalse}}}\to\inserts@list%Know the language of lemma  
         \global\advance\insert@count \@ne%
    \fi%
    \xright@appenditem{{\csxdef{footnote@lang}{\expandonce\languagename}}}\to\inserts@list%Know the language of lemma
    \global\advance\insert@count \@ne%
   }%
   {%
    \if@RTL
        \xright@appenditem{{\csxdef{footnote@dir}{@RTLtrue}}}\to\inserts@listR%Know the language of lemma
        \global\advance\insert@countR \@ne%
    \else
         \xright@appenditem{{\csxdef{footnote@dir}{@RTLfalse}}}\to\inserts@listR%Know the language of lemma  
         \global\advance\insert@countR \@ne%
    \fi
    \xright@appenditem{{\csxdef{footnote@lang}{\expandonce\languagename}}}\to\inserts@listR%Know the language of lemma
    \global\advance\insert@countR \@ne%
   }%
}
%    \end{macrocode}
% \end{macro}
% \subsection{General survey of the way we manage notes}
%
% The processing of each note is done
% by four principal macros: the \protect\cs{vfootnote} macro takes the text
% of the footnote and does the \protect\cs{insert}; it calls on the
% \protect\cs{footfmt} macro to select the right fonts, print the line
% number and lemma, and do any other formatting needed for that individual
% note. Within the output routine, the two other macros, \protect\cs{footstart}
% and \protect\cs{footgroup}, are called; the first prints extra vertical
% space and a footnote rule, if desired; the second does any reformatting
% of the whole set of the footnotes in this series for this page---such
% as paragraphing or division into columns---and then sends them to the
% page.
%
% These four macros, and the other macros and parameters shown
% here, are distinguished by the `series letter'
% that indicates which set of the footnotes
% we are dealing with---\texttt{A}, \texttt{B}, \texttt{C}, \texttt{D}, or \texttt{E}.
% The series letter always precedes the string \verb"foot" in macro
% and parameter names. Hence, for the \texttt{A} series, the four macros
% are called \protect\cs{vAfootnote}, \protect\cs{Afootfmt}, \protect\cs{Afootstart},
% and \protect\cs{Afootgroup}.
% 
% These macros are changed depending of the footnotes arrangement: ``normal'', ``paragraphed'', ``two columns'' or ``three columns''.
% \subsection{General setup}
% \begin{macro}{\footsplitskips}
% Some setup code that is common for a variety of the footnotes.
% The setup is for:
% \begin{itemize}
%    \item \protect\cs{interlinepenalty}.
%    \item \protect\cs{splittopskip} (skip before last part of notes that flow from one page to another).
%    \item \protect\cs{splitmaxdepth}.
%    \item \protect\cs{floatingpenalty}, that is penalty values being added when a long note flows from one page to another.
% Here, we let it to 0 when we are processing parallel pages in \protect\package{eledpar}, in order to allow notes to flow from left to right pages and \emph{vice-versa}. 
% Otherwise, we let it to \protect\cs{@MM}, which is the standard \LaTeX\  \protect\cs{floatingpenalty}.
% \end{itemize}
% \changes{v0.7.0}{2005/02/18}{Added \protect\cs{footsplitskips} for use in many
%              footnote styles}
% \changes{v1.19.0}{2015/03/06}{\protect\cs{footsplitskips} doesn't set \protect\cs{floatingpenalty} to \protect\cs{@MM} when processing parallel pages.}
%    \begin{macrocode}
\newcommand*{\footsplitskips}{%
  \interlinepenalty=\interfootnotelinepenalty
  \unless\ifl@dprintingpages%
    \floatingpenalty=\@MM%
  \fi%
  \splittopskip=\ht\strutbox \splitmaxdepth=\dp\strutbox
  \leftskip=\z@skip \rightskip=\z@skip}

%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\normalfootnoterule}
% \protect\cs{normalfootnoterule} is
% a standard footnote-rule macro, for use by a \verb"footstart"
% macro: just the same as the \PlainTeX\ footnote rule.
%    \begin{macrocode}
\let\normalfootnoterule=\footnoterule
%    \end{macrocode}
% \end{macro}
% \subsection{Footnotes arrangement}
%
% \subsubsection{User level macro}
% \begin{macro}{\Xarrangement}
% \protect\cs{Xarrangement}\oarg{s}\marg{arrangement}
% The command calls, for each series, a specific command which set many counters and commands in order to define specific arrangement.
%
%    \begin{macrocode}
\newcommandx{\Xarrangement}[2][1,usedefault]{%
  \def\do##1{%
     \csname Xarrangement@#2\endcsname{##1}%
  }%
  \ifstrempty{#1}%
    {%
    \dolistloop{\@series}%
    }%
    {
    \docsvlist{#1}%
    }%
}%
%    \end{macrocode}
% \end{macro}
% \subsubsection{Normal footnote}
%
% \begin{macro}{\Xarrangement@normal}
% We can now define all the parameters for the  series of
% footnotes; initially they use the ``normal'' footnote formatting.
%
% What we want to do here is to insert something like the following
% for each footnote series. (This is an example, not part of the
% actual \macpackage{} code.)
% \begin{verbatim}
% \skip\Afootins=12pt plus5pt minus5pt
% \count\Afootins=1000
% \dimen\Afootins=0.8\vsize
% \let\vAfootnote=\normalvfootnote  \let\Afootfmt=\normalfootfmt
% \let\Afootstart=\normalfootstart  \let\Afootgroup=\normalfootgroup
% \let\Afootnoterule=\normalfootnoterule
% \end{verbatim}
% (Read \thetexbook\ in order to understand what are the counter, skip and dimen  associated to an insertion.)
% 
% Instead of repeating ourselves, we define a \protect\cs{Xarrangement@normal}
% macro that makes all these assignments for us, for any given
% series letter.  
% This command is called when people use \protect\cs{Xarrangement}\oarg{series}\verb+{normal}+

%
% Now we set up the \protect\cs{Xarrangement@normal} macro itself.  It takes
% one argument: the footnote series letter.
%    \begin{macrocode}
\newcommand*{\Xarrangement@normal}[1]{%
  \csgdef{series@display#1}{normal}
  \expandafter\let\csname #1footstart\endcsname=\normalfootstart
  \expandafter\let\csname v#1footnote\endcsname=\normalvfootnote
  \expandafter\let\csname #1footfmt\endcsname=\normalfootfmt
  \expandafter\let\csname #1footgroup\endcsname=\normalfootgroup
  \expandafter\let\csname #1footnoterule\endcsname=%
                                             \normalfootnoterule
  \count\csname #1footins\endcsname=1000
  \dimen\csname #1footins\endcsname=\csuse{Xmaxhnotes@#1}
  \skip\csname #1footins\endcsname=\csuse{Xbeforenotes@#1}%
  \advance\skip\csname #1footins\endcsname by\csuse{Xafterrule@#1}%
%    \end{macrocode}
%  The \parpackage provides tools in order to confine notes to one side.
% The mechanism is explained in the \parpackage's handbook.
% For now, just retain we need to store default value of the counter associated to the notes \TeX's inserts.
 
%    \begin{macrocode}
  \csxdef{default@#1footins}{1000}%Use this to confine the  notes to one side only
%    \end{macrocode}
% Now do the setup for minipage footnotes. We use as much as possible of the
% normal setup as we can (so the notes will have a similar layout).
% \changes{v0.4.0}{2004/02/29}{Added minpage footnote setup to \protect\cs{footnormal}}
%    \begin{macrocode}
  \ifnoledgroup@\else%
    \expandafter\let\csname mpv#1footnote\endcsname=\mpnormalvfootnote
    \expandafter\let\csname mp#1footgroup\endcsname=\mpnormalfootgroup
    \count\csname mp#1footins\endcsname=1000
    \dimen\csname mp#1footins\endcsname=\csuse{Xmaxhnotes@#1}
    \skip\csname mp#1footins\endcsname=\csuse{Xbeforenotes@#1}%
    \advance\skip\csname mp#1footins\endcsname by\csuse{Xafterrule@#1}%
  \fi
}

%    \end{macrocode}
% \end{macro}
%
%
%
%
% \begin{macro}{\normalvfootnote}
% We now begin a series of commands that do `normal' footnote
% formatting: a format much like that implemented
% in \PlainTeX{}, in which each footnote
% is a separate paragraph.
%
% \protect\cs{normalvfootnote} takes the series letter as \verb"#1",
% and the entire text of the footnote is \verb"#2". It does the
% \protect\cs{insert} for this note, calling on the \protect\cs{footfmt} macro for
% this note series to format the text of the note.
%    \begin{macrocode}
\notbool{parapparatus@}{\newcommand*}{\newcommand}{\normalvfootnote}[2]{%
  \insert\csname #1footins\endcsname\bgroup
  \hsize=\expandafter\dimexpr\csuse{Xwidth@#1}\relax%
  \noindent\csuse{Xbhooknote@#1}%
  \csuse{Xnotefontsize@#1}%
  \footsplitskips
  \ifl@dpairing\ifl@dpaging\else%
    \setXnoteswidthliketwocolumns@{#1}%
  \fi\fi%
  \setXnotespositionliketwocolumns@{#1}%
  \spaceskip=\z@skip \xspaceskip=\z@skip
  \csname #1footfmt\endcsname #2{#1}\egroup}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\mpnormalvfootnote}
% And a somewhat different version for minipages.
% \changes{v0.4.0}{2004/02/29}{Added \protect\cs{mpnormalvfootnote}}
%    \begin{macrocode}
\notbool{parapparatus@}{\newcommand*}{\newcommand}{\mpnormalvfootnote}[2]{%
  \global\setbox\@nameuse{mp#1footins}\vbox{%
    \unvbox\@nameuse{mp#1footins}
    \noindent\csuse{Xbhooknote@#1}%
    \csuse{Xnotefontsize@#1}%
    \hsize\columnwidth
    \@parboxrestore
    \color@begingroup
    \csname #1footfmt\endcsname #2{#1}\color@endgroup}}

%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\normalfootfmt}
% \label{normalfootfmt}
% \protect\cs{normalfootfmt} is a `normal' macro
% to take the footnote line and page
% number information (see \reff{linenumbers}), and the
% desired text, and output what's to be printed.
% Argument \verb"#1" contains the line and page number information
% and lemma font specifier;
% \verb"#2" is the lemma;
% \verb"#3" is the note's text. This version is very
% rudimentary---it uses \protect\cs{printlines}
% to print just the range of line numbers,
% followed by a square bracket, the lemma, and the note text.
% 
%    \begin{macrocode}


\notbool{parapparatus@}{\newcommand*}{\newcommand}{\normalfootfmt}[4]{%
  \Xledsetnormalparstuff{#4}%
  \hangindent=\csuse{Xhangindent@#4}
  \everypar{\hangindent=\csuse{Xhangindent@#4}}%
  \strut{\printlinefootnote{#1}{#4}}%
  {\nottoggle{Xlemmadisablefontselection@#4}%
    {\select@lemmafont#1|{\csuse{Xlemmafont@#4}#2}}%
    {{\csuse{Xlemmafont@#4}#2}}%
  }%
  \iftoggle{nosep@}{\hskip\csuse{Xinplaceoflemmaseparator@#4}}{\ifcsempty{Xlemmaseparator@#4}%
    {\hskip\csuse{Xinplaceoflemmaseparator@#4}}%
    {\nobreak\hskip\csuse{Xbeforelemmaseparator@#4}\csuse{Xlemmaseparator@#4}\hskip\csuse{Xafterlemmaseparator@#4}\relax%
  }}%
  #3\strut\par}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\normalfootstart}\label{normalvalues}
% \phantomsection\relax
% \protect\cs{normalfootstart}
% is a standard footnote-starting macro, called in the output
% routine whenever there are footnotes of this series to be
% printed: it skips a bit and then draws a rule.
%
% Any \protect\cs{footstart} macro must put onto the page something that
% takes up space exactly equal to the \protect\cs{skip}\protect\cs{Xfootins} value for
% the associated series of notes. \TeX\ makes page computations based
% on that \protect\cs{skip} value, and the output pages will suffer from
% spacing problems if what you add takes up a different amount of
% space.
%
% But if the skip \protect\cs{preXnotes@} is greater than 0~pt,
% it is used instead of \protect\cs{skip}\protect\cs{footins} for the first printed series in one page. 
%
% The \protect\cs{leftskip} and \protect\cs{rightskip} values
% are both zeroed here.
% \label{footskips}
% Similarly, these skips are cancelled in the \protect\cs{vfootnote} macros
% for the various types of notes. Strictly speaking,
% this is necessary only
% if you are using paragraphed footnotes, but we have put it here
% and in the other \protect\cs{vfootnote} macros too so that the behavior of
% \macpackage{} in this respect is general across all footnote types. 
% What this means is that any \protect\cs{leftskip}
% and \protect\cs{rightskip} you specify applies to the main text, but not
% the footnotes.  The footnotes continue to be of width \protect\cs{hsize}.
%    \begin{macrocode}
\newcommand*{\normalfootstart}[1]{%
%    \end{macrocode}
% The first series of notes printed in a page can have a specific skip before it.
% In order to insert this specific skip without overlap the bottom margin of the page, Maïeul Rouquette have defined an algorithm explained in \reff{skipfirstseries}.
% Here is part of this algorithm, when the block of notes are ready to be printed.
%    \begin{macrocode}
  \ifdimequal{0pt}{\preXnotes@}{}%
      {%
      \iftoggle{preXnotes@}{%
            \togglefalse{preXnotes@}%
            \skip\csname #1footins\endcsname=%
              \dimexpr\csuse{preXnotes@}+\csuse{Xafterrule@#1}\relax%
            }%
          {}%
      }%
  \vskip\skip\csname #1footins\endcsname%
%    \end{macrocode}
%    And now, the problem of left and right skip for notes.
% Especially when using one feature of \parpackage which allows to have the footnotes horizontal size as the size of columns printed by \protect\cs{Columns}.
% Read \reff{width2columns} for the general description of the problem.
%   \begin{macrocode} 
  \leftskip0pt \rightskip0pt
  \ifl@dpairing\else%
     \hsize=\old@hsize%
  \fi%
  \setXnoteswidthliketwocolumns@{#1}%
  \setXnotespositionliketwocolumns@{#1}%
%   \end{macrocode}
% And now, print the footnote's rule to finish the footnote's introduction.
%   \begin{macrocode}
  \print@Xfootnoterule{#1}%
  \noindent\leavevmode}
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\normalfootgroup}
% \protect\cs{normalfootgroup} is
% a standard footnote-grouping macro: it sends the
% contents of the footnote-insert box to the output page without
% alteration.
%    \begin{macrocode}
\newcommand*{\normalfootgroup}[1]{%
  {\csuse{Xnotefontsize@#1}\noindent\csuse{Xtxtbeforenotes@#1}}%
  \csuse{Xbhookgroup@#1}%
  \unvbox\csname #1footins\endcsname%
  \hsize=\old@hsize%
  }%

%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\mpnormalfootgroup}
% A somewhat different version for minipages.
% Note that, in this case, we do not make distinctions between the \protect\cs{Xfootgroup} and \protect\cs{Xfootstarts} macros.
% \changes{v0.4.0}{2004/02/29}{Added \protect\cs{mpnormalfootgroup}}
%    \begin{macrocode}
\unless\ifnoledgroup@
\newcommand*{\mpnormalfootgroup}[1]{{
  \vskip\skip\@nameuse{mp#1footins}
  \ifl@dpairing\ifparledgroup%
    \leavevmode\marks\parledgroup@{begin}%
    \marks\parledgroup@series{#1}%
    \marks\parledgroup@type{Xfootnote}%
  \fi\fi\normalcolor%
  \ifparledgroup%
    \ifl@dpairing%
    \else%
      \setXnoteswidthliketwocolumns@{#1}%
      \setXnotespositionliketwocolumns@{#1}%
      \print@Xfootnoterule{#1}%%
    \fi%
  \else%
    \setXnoteswidthliketwocolumns@{#1}%
    \setXnotespositionliketwocolumns@{#1}%
    \print@Xfootnoterule{#1}%%
  \fi%
  \setlength{\parindent}{0pt}
 {\csuse{Xnotefontsize@#1}\csuse{Xtxtbeforenotes@#1}}
 \csuse{Xbhookgroup@#1}%
 \unvbox\csname mp#1footins\endcsname}}
\fi
%    \end{macrocode}
% \end{macro}
%
% \subsubsection{Paragraphed footnotes}
%
% The paragraphed-footnote option
% reformats all the footnotes of one series for a page into
% a single paragraph; this is especially appropriate when the notes are
% numerous and brief. The code is based
% on \thetexbook, pp.\,398--400, with
% alterations for our environment. This algorithm uses a considerable
% amount of save-stack space: a \TeX\ of ordinary size may not be able
% to handle more than about $100$ notes of this kind on a page.
%
% \begin{macro}{\Xarrangement@paragraph}
% The \protect\cs{Xarrangement@paragraph} macro
% sets up everything for one series of the footnotes so that
% they will be paragraphed; it takes the series letter as argument.
% We include the setting of \verb"\count\footins" to $1000$ for the
% footnote series just in case user is switching to paragraphed
% footnotes after having columnar ones, since they change this
% value (see below).
%
% The argument of \protect\cs{Xarrangement@footparagraph} is the letter
%  denoting the series of notes to be paragraphed.
%    \begin{macrocode}
\newcommand*{\Xarrangement@paragraph}[1]{%
  \csgdef{series@display#1}{paragraph}
  \expandafter\newcount\csname #1prevpage@num\endcsname
  \expandafter\let\csname #1footstart\endcsname=\parafootstart
  \expandafter\let\csname v#1footnote\endcsname=\paravfootnote
  \expandafter\let\csname #1footfmt\endcsname=\parafootfmt
  \expandafter\let\csname #1footgroup\endcsname=\parafootgroup
  \count\csname #1footins\endcsname=1000
  \csxdef{default@#1footins}{1000}%Use this to confine the  notes to one side only
  \dimen\csname #1footins\endcsname=\csuse{Xmaxhnotes@#1}
  \skip\csname #1footins\endcsname=\csuse{Xbeforenotes@#1}%
  \advance\skip\csname #1footins\endcsname by\csuse{Xafterrule@#1}%
  \para@footsetup{#1}
%    \end{macrocode}
% And the extra setup for minipages.
%    \begin{macrocode}
  \ifnoledgroup@\else
    \expandafter\let\csname mpv#1footnote\endcsname=\mpparavfootnote
    \expandafter\let\csname mp#1footgroup\endcsname=\mpparafootgroup
    \count\csname mp#1footins\endcsname=1000
    \dimen\csname mp#1footins\endcsname=\csuse{Xmaxhnotes@#1}
    \skip\csname mp#1footins\endcsname=\csuse{Xbeforenotes@#1}%
    \advance\skip\csname mp#1footins\endcsname by\csuse{Xafterrule@#1}%
  \fi
}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\footfudgefiddle}
% For paragraphed footnotes \TeX{} has to estimate the amount of space
% required. If it underestimates this then the notes may get too long and
% run off the bottom of the text block. \protect\cs{footfudgefiddle} can be increased
% from its default 64 (say, to 70) to increase the estimate.
% \changes{v0.2.2}{2003/11/04}{Added \protect\cs{footfudgefiddle}}
%    \begin{macrocode}
\providecommand{\footfudgefiddle}{64}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\para@footsetup}
% \protect\cs{footparagraph} calls the
% \protect\cs{para@footsetup} macro to calculate a special
% fudge factor, which is the ratio of the \protect\cs{baselineskip}
% to the \protect\cs{hsize}. We assume that the proper value of
% \protect\cs{baselineskip} for the footnotes (normally 9\,pt) has been set
% already.  The argument of the macro is
% again the note series letter.
%
% Peter Wilson thinks that \protect\cs{columnwidth} should be used here for \LaTeX\, not \protect\cs{hsize}.
% Peter Wilson have also included \protect\cs{footfudgefiddle}.
% \changes{v0.2.2}{2003/11/04}{Added \protect\cs{footfudgefiddle} to \protect\cs{para@footsetup}}
%    \begin{macrocode}
\newcommand*{\para@footsetup}[1]{{\csuse{Xbhookgroup@#1}\csuse{Xnotefontsize@#1}
  \setXnoteswidthliketwocolumns@{#1}%
  \ifcsempty{Xwidth@#1}%
    {}%
    {\columnwidth=\expandafter\dimexpr\csuse{Xwidth@#1}\relax}%
  \dimen0=\baselineskip
  \multiply\dimen0 by 1024
  \divide \dimen0 by \columnwidth \multiply\dimen0 by \footfudgefiddle\relax
  \csxdef{#1footfudgefactor}{%
    \expandafter\strip@pt\dimen0 }}}

%    \end{macrocode}
% \end{macro}
%
% \protect\cs{strip@pt}  strip the characters \verb"pt" from a dimen value.
%
% \begin{macro}{\parafootstart}
% \protect\cs{parafootstart} is the same as \protect\cs{normalfootstart}, but we give it
% again to ensure that \protect\cs{rightskip} and \protect\cs{leftskip} are
% zeroed (this needs to be done before \protect\cs{para@footgroup} in the
% output routine).    The size of
% paragraphed notes is calculated using a fudge factor which in
% turn is based on \protect\cs{hsize}.  So the paragraph of notes needs to be
% that wide.
%
% The argument of the macro is again the note series letter.
%    \begin{macrocode}
\newcommand*{\parafootstart}[1]{%
  \rightskip=0pt \leftskip=0pt%
  \nottoggle{Xparindent@#1}{\parindent=\z@}{}%
    \ifdimequal{0pt}{\preXnotes@}{}%
      {%
      \iftoggle{preXnotes@}{%
            \togglefalse{preXnotes@}%
            \skip\csname #1footins\endcsname=%
              \dimexpr\csuse{preXnotes@}+\csuse{Xafterrule@#1}\relax%
            }%
          {}%
      }%
  \vskip\skip\csname #1footins\endcsname%
  \setXnoteswidthliketwocolumns@{#1}%
  \setXnotespositionliketwocolumns@{#1}%
  \print@Xfootnoterule{#1}%
  \let\bidi@RTL@everypar\@empty%
  \noindent\leavevmode}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\paravfootnote}
% \protect\cs{paravfootnote}
% is a version of the \protect\cs{vfootnote} command that is used for
% paragraphed notes.  It gets appended to the \protect\cs{inserts@list} list
% by an outer-level footnote command like \protect\cs{Afootnote}.  The first
% argument is the note series letter; the second is the full text
% of the printed note itself, including line numbers, lemmata, and
% footnote text.
%
% The initial model for this insertion is, of course, the
% \verb"\insert\footins" definition in \thetexbook, p.\,398.
% There, the footnotes are first collected up in hboxes, and these
% hboxes are later unpacked and stuck together into a paragraph.
%
% However, Michael Downes\index{Downes, Michael} has pointed out
% that because text in hboxes gets typeset in restricted horizontal
% mode, there are some undesirable side-effects if you later want
% to break such text across lines.  In restricted horizontal mode,
% where \TeX\ does not expect to have to break lines, it does not
% insert certain items like \protect\cs{discretionary}s. If you later unbox
% these hboxes and stick them together, as the \texbook{}
% macros do to make these footnotes, you lose the ability to
% hyphenate after an explicit hyphen.  This can lead to overfull
% \protect\cs{hbox}es when you would not expect to find them, and to the
% uninitiated it might be very hard to see why the problem had
% arisen.\footnote{Michael Downes, `Line Breaking in \protect\cs{unhbox}ed
% Text', \textit{TUGboat} \textbf{11} (1990), pp.\,605--612.}
%
% Wayne Sullivan\index{Sullivan, Wayne} pointed out to us another
% subtle problem that arises from the same cause: \TeX\ also leaves
% the \protect\cs{language} whatsit nodes out of the horizontal
% list.\footnote{See \thetexbook, p.\,455 (editions after
% January 1990).}  So changes from one language to another will not
% invoke the proper hyphenation rules in such footnotes.  Since
% critical editions often do deal with several languages,
% especially in a footnotes, we really ought to get this bit of code
% right.
%
% To get around these problems, Wayne suggested emendations to the
% \texbook{} versions of these macros which are broadly the
% same as those described by Michael: the central idea (also
% suggested by Donald Knuth in a letter to Michael) is to avoid collecting
% the text in an \protect\cs{hbox} in the first place, but instead to collect
% it in a \protect\cs{vbox} whose width is (virtually)
% infinite.\label{hboxproblem} The text is therefore typeset in
% unrestricted horizontal mode, as a paragraph consisting of a
% single long line.  Later, there is an extra level of unboxing to
% be done: we have to unpack the \protect\cs{vbox}, as well as the hboxes
% inside it, but that is not too hard.  For details, we refer you to
% Michael's article, where the issues are clearly
% explained.\footnote{Wayne supplied his own macros to do this, but
% since they were almost identical to Michael's, Peter Wilson have used the
% latter's \protect\cs{Xunvxh} macro since it is publicly
% documented.}  Michael's unboxing macro is called \protect\cs{Xunvxh}: unvbox,
% extract the last line, and unhbox it.
%
% Doing things this way has an important
% consequence:\label{nobreaks-detail} as Michael
% pointed out, you really can't put an explicit line-break into a
% note built in a \protect\cs{vbox} the way we are doing.\footnote{`Line
% Breaking', p.\,610.}  In other words, be very careful not to use
% \protect\cs{break}, or \verb"\penalty-10000", or any equivalent inside your
% para-footnote.\label{nobreak}  If you do, most of the note will
% probably disappear.  You \emph{are} allowed to make strong
% suggestions; in fact \verb"\penalty-9999" will be quite okay.  Just
% do not make the break mandatory.  We have not applied any of
% Michael's solutions here, since we feel that the problem is
% exiguous, and \macpackage{} is quite baroque enough already.  If
% you think you are having this problem, look up Michael's
% solutions.
%
% One more thing; we set \protect\cs{leftskip} and \protect\cs{rightskip} to zero.
% This has the effect of neutralizing any such skips which may
% apply to the main text (cf.~\reff{footskips} above).
% We need to do this, since \protect\cs{footfudgefactor} is calculated on
% the assumption that the notes are \protect\cs{hsize} wide.
%
% So, finally, here is the modified foot-paragraph code, which
% sets the footnote in vertical mode so that language and
% discretionary nodes are included.
%
%    \begin{macrocode}
\newcommand*{\paravfootnote}[2]{%
  \insert\csname #1footins\endcsname
  \bgroup
    \csuse{Xnotefontsize@#1}
    \footsplitskips
    \setbox0=\vbox{\hsize=\maxdimen%
      \let\bidi@RTL@everypar\@empty%
      \noindent\csuse{Xbhooknote@#1}%
      \csname #1footfmt\endcsname #2{#1}}%
    \setbox0=\hbox{\Xunvxh{0}{#1}}%
    \dp0=0pt
    \ht0=\csname #1footfudgefactor\endcsname\wd0
%    \end{macrocode}
% Here we produce the contents of the footnote from box $0$, and
% add a penalty of $0$ between boxes in this insert.
%    \begin{macrocode}
    \if@RTL\noindent \leavevmode\fi\box0%
    \penalty0
  \egroup}

%    \end{macrocode}
% The final penalty of $0$
% was added here at Wayne's\index{Sullivan, Wayne}
% suggestion to avoid a weird page-breaking problem, which occurs on
% those occasions when \TeX\ attempts to split foot paragraphs.
% After trying out such a split (see \thetexbook, p.\,124),
% \TeX\ inserts a penalty of $-10000$ here, which
% nearly always forces the break at the end of the whole footnote
% paragraph (since individual notes can't be split) even when this
% leads to an overfull vbox.  The change above results in a penalty
% of $0$ instead which allows, but does not force, such breaks. This
% penalty of $0$ is later removed, after page breaks have been
% decided, by the \protect\cs{unpenalty} macro in \protect\cs{makehboxofhboxes}. So it
% does not affect how the footnote paragraphs are typeset (the
% notes still have a penalty of $-10$ between them, which is added
% by \protect\cs{parafootfmt}).
% \end{macro}
%
% \begin{macro}{\mpparavfootnote}
% This version is for minipages.
%    \begin{macrocode}
\newcommand*{\mpparavfootnote}[2]{%
  \global\setbox\@nameuse{mp#1footins}\vbox{%
    \unvbox\@nameuse{mp#1footins}%
    \csuse{Xnotefontsize@#1}
    \footsplitskips
    \setbox0=\vbox{\hsize=\maxdimen%
      \let\bidi@RTL@everypar\@empty%
      \noindent\color@begingroup%
      \csuse{Xbhooknote@#1}%
      \csname #1footfmt\endcsname #2{#1}\color@endgroup}%
    \setbox0=\hbox{\Xunvxh{0}{#1}}%
    \dp0=\z@
    \ht0=\csname #1footfudgefactor\endcsname\wd0
    \box0
    \penalty0
}}

%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\Xunvxh}
% Here is (modified) Michael's\index{Downes, Michael} definition of \protect\cs{unvxh},
% used above.  Michael's macro also takes care to remove some
% unwanted penalties and glue that \TeX\ automatically attaches to
% the end of paragraphs.  When \TeX\ finishes a paragraph, it
% throws away any remaining glue, and then tacks on the following
% items: a \protect\cs{penalty} of $10000$, a \protect\cs{parfillskip} and a
% \protect\cs{rightskip} (\thetexbook, pp.\,99--100).  \protect\cs{unvxh}
% cancels these unwanted paragraph-final items using \protect\cs{unskip} and
% \protect\cs{unpenalty}.
%    \begin{macrocode}
\newcommand*{\Xunvxh}[2]{%
  \setbox0=\vbox{\unvbox#1%
    \global\setbox1=\lastbox}%
  \unhbox1
  \unskip            % remove \rightskip,
  \unskip            % remove \parfillskip,
  \unpenalty         % remove \penalty of 10000,
  \hskip\csuse{Xafternote@#2}}   % but add the glue to go between the notes

%    \end{macrocode}
% \end{macro}
%
%
%
% \begin{macro}{\parafootfmt}
% \protect\cs{parafootfmt} is
% \protect\cs{normalfootfmt} adapted to do the special stuff
% needed for paragraphed notes---leaving out the \protect\cs{endgraf} at the
% end, sticking in special penalties and kern, and leaving out the
% \protect\cs{footstrut}.  The first argument is the line and page
% number information, the second is the lemma, the third is the
% text of the footnote, and the fourth is the series (optional, for backward compatibility).
%    \begin{macrocode}
\newcommand*{\parafootfmt}[4]{%
  \Xinsertparafootsep{#4}%
  \ledsetnormalparstuff@common%
  \printlinefootnote{#1}{#4}%
  {\nottoggle{Xlemmadisablefontselection@#4}%
    {\select@lemmafont#1|{\csuse{Xlemmafont@#4}#2}}%
    {{\csuse{Xlemmafont@#4}#2}}%
  }%
  \iftoggle{nosep@}{\hskip\csuse{Xinplaceoflemmaseparator@#4}}{\ifcsempty{Xlemmaseparator@#4}%
    {\hskip\csuse{Xinplaceoflemmaseparator@#4}}%
    {\nobreak\hskip\csuse{Xbeforelemmaseparator@#4}\csuse{Xlemmaseparator@#4}\hskip\csuse{Xafterlemmaseparator@#4}%
  }}%
  #3\penalty-10 }
%    \end{macrocode}
% Note that in the above definition, the penalty of $-10$
% encourages a line break between notes, so that notes have a
% slight tendency to begin on new lines.
% The \protect\cs{Xinsertparafootsep} command is used to insert the \protect\cs{Xparafootsep@series} between each note in the \emph{same} page.
% \end{macro}
%
% \begin{macro}{\parafootgroup}
% This \verb"footgroup" code is modelled on the macros in 
% \thetexbook, p.\,399.  The only difference is the \protect\cs{unpenalty}
% in \protect\cs{makehboxofhboxes}, which is there to remove the penalty of
% $0$ which was added to the end of each footnote by
% \protect\cs{para@vfootnote}.
%
% The call to \protect\cs{Xnotefontsize@\meta{s}} is to ensure that the correct
% \protect\cs{baselineskip} for the footnotes is used. The argument is the
% note series letter.
%    \begin{macrocode}
\newcommand*{\parafootgroup}[1]{%
  \hsize=\expandafter\dimexpr\csuse{Xwidth@#1}\relax%
  \unvbox\csname #1footins\endcsname 
  \ifcsstring{Xragged@#1}{L}{\RaggedLeft}{}%
  \ifcsstring{Xragged@#1}{R}{\RaggedRight}{}%
  \makehboxofhboxes
  \setbox0=\hbox{{\csuse{Xnotefontsize@#1}\csuse{Xtxtbeforenotes@#1}}\unhbox0 \removehboxes}%
  \csuse{Xbhookgroup@#1}%
  \csuse{Xnotefontsize@#1}%
  \unhbox0\par%
  \global\hsize=\old@hsize%
  }%

%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\mpparafootgroup}
% The minipage version.
%    \begin{macrocode}
\newcommand*{\mpparafootgroup}[1]{{%
  \setXnoteswidthliketwocolumns@{#1}%
  \vskip\skip\@nameuse{mp#1footins}
  \ifl@dpairing\ifparledgroup%
    \leavevmode\marks\parledgroup@{begin}%
    \marks\parledgroup@series{#1}%
    \marks\parledgroup@type{Xfootnote}%
  \fi\fi\normalcolor
  \ifparledgroup%
    \ifl@dpairing%
    \else%
      \setXnoteswidthliketwocolumns@{#1}%
      \setXnotespositionliketwocolumns@{#1}%
      \print@Xfootnoterule{#1}%%
    \fi%
  \else%
      \setXnoteswidthliketwocolumns@{#1}%
      \setXnotespositionliketwocolumns@{#1}%
      \print@Xfootnoterule{#1}%
  \fi%
  \unvbox\csname mp#1footins\endcsname 
  \ifcsstring{Xragged@#1}{L}{\RaggedLeft}{}%
  \ifcsstring{Xragged@#1}{R}{\RaggedRight}{}%
  \makehboxofhboxes
  \setbox0=\hbox{{\csuse{Xnotefontsize@#1}\csuse{Xtxtbeforenotes@#1}}\unhbox0 \removehboxes}%
  \csuse{Xbhookgroup@#1}%
  \csuse{Xnotefontsize@#1}%
  \unhbox0\par}}

%    \end{macrocode}
% \end{macro}
% 
% And finally, the two macros which are required to transform the long horizontal box stored  in the insert' box to a printable text.
%
% \begin{macro}{\makehboxofhboxes}
% \begin{macro}{\removehboxes}
%    \begin{macrocode}
\newcommand*{\makehboxofhboxes}{\setbox0=\hbox{}%
  \loop
    \unpenalty
    \setbox2=\lastbox
  \ifhbox2
    \setbox0=\hbox{\box2\unhbox0}%
  \repeat}

\newcommand*{\removehboxes}{\setbox0=\lastbox
  \ifhbox0{\removehboxes}\unhbox0 \fi}

%    \end{macrocode}
% \end{macro}
% \end{macro}
%
% \paragraph{Insertion of the footnotes separator}
%The command \protect\cs{Xinsertparafootsep}\marg{series} must be called at the beginning of \protect\cs{parafootftm}. 
% \begin{macro}{\prevpage@num} 
% \changes{v1.8.0}{2013/12/13}{Correct \protect\cs{parafootsep} when using with ledgroup.}
% \changes{v1.22.1}{2015/04/29}{Correct double symbol when using both \protect\cs{parafootsep} and \protect\cs{Xsymlinenum}.}
% \begin{macro}{\Xinsertparafootsep}
%    \begin{macrocode}
\newcommand{\Xinsertparafootsep}[1]{%
   \ifnumequal{\csuse{#1prevpage@num}}{\page@num}%
        {\ifcsdef{prevline#1}% Be sur \prevline#1 exists.
      {\ifnumequal{\csuse{prevline#1}}{\line@num}%
         {\ifcsempty{Xsymlinenum@#1}{\csuse{Xparafootsep@#1}}{}}%
         {\csuse{Xparafootsep@#1}}%
      }%
      {\csuse{Xparafootsep@#1}}%
   }%
   {}%
   \global\csname #1prevpage@num\endcsname=\page@num%
}
%    \end{macrocode}
% \end{macro}
% \end{macro}
% \subsubsection{Columnar footnotes}
%
% \paragraph{Common tools}
% \begin{macro}{\rigidbalance}
% \begin{macro}{\rigidbalanceX}
% \begin{macro}{\Xrigidbalance}
% \begin{macro}{\dosplits}
% \begin{macro}{\splitoff}
% \begin{macro}{\@h}
% \begin{macro}{\@k}
% We will now define macros for three-column notes and two-column
% notes. Both sets of macros will use \protect\cs{rigidbalance}, which splits a
% box (\verb"#1") into into a number (\verb"#2") of columns, each
% with a space (\verb"#3") between the top baseline and the top of
% the \protect\cs{vbox}.  The \protect\cs{rigidbalance} macro is taken from
% \thetexbook, p.\,397, with a slight change to the syntax of
% the arguments so that they do not depend on white space.  Note also
% the extra unboxing in \protect\cs{splitoff}, which allows the new \protect\cs{vbox} to
% have its natural height as it goes into the alignment.
% 
% The \LaTeX\ \protect\cs{line} macro has no relationship to the 
% TeX \protect\cs{line}. The \LaTeX\ equivalent is \protect\cs{@@line}.
% \changes{v2.7.0}{2015/11/29}{\protect\cs{rigidbalance} is split to \protect\cs{Xrigidbalance} and \protect\cs{rigidbalanceX}.}
%
% We do not call directly \cs{rigidbalance}, but we call \cs{Xrigidbalance} for critical notes and \cs{rigidbalanceX} for familiar notes. Both of them call \cs{rigidbalance}.
%    \begin{macrocode}
\newcount\@k \newdimen\@h
\newcommand*{\Xrigidbalance}[3]{%
    \hsize=\expandafter\dimexpr\csuse{Xwidth@\@currentseries}\relax%
    \rigidbalance{#1}{#2}{#3}%
}%

\newcommand*{\rigidbalanceX}[3]{%
    \hsize=\expandafter\dimexpr\csuse{widthX@\@currentseries}\relax%
    \rigidbalance{#1}{#2}{#3}%
}%

\newcommand*{\rigidbalance}[3]{%
  \setbox0=\box#1 \@k=#2 \@h=#3%
  \@@line{\splittopskip=\@h \vbadness=\@M \hfilneg
  \valign{##\vfil\cr\dosplits}}}

\newcommand*{\dosplits}{\ifnum\@k>0 \noalign{\hfil}\splitoff
  \global\advance\@k-1\cr\dosplits\fi}

\newcommand*{\splitoff}{\dimen0=\ht0
  \divide\dimen0 by\@k \advance\dimen0 by\@h
  \setbox2 \vsplit0 to \dimen0
  \unvbox2 }

%    \end{macrocode}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
%
% \paragraph{Three columns}
%
% \begin{macro}{\Xarrangement@threecol}
%    \begin{macrocode}
\newcommand*{\Xarrangement@threecol}[1]{%
  \csgdef{series@display#1}{threecol}
  \expandafter\let\csname v#1footnote\endcsname=\threecolvfootnote
  \expandafter\let\csname #1footfmt\endcsname=\threecolfootfmt
  \expandafter\let\csname #1footgroup\endcsname=\threecolfootgroup
  \dimen\csname #1footins\endcsname=\csuse{Xmaxhnotes@#1}%
  \skip\csname #1footins\endcsname=\csuse{Xbeforenotes@#1}%
  \advance\skip\csname #1footins\endcsname by\csuse{Xafterrule@#1}%
  \threecolfootsetup{#1}
%    \end{macrocode}
% The additional setup for minipages.
%    \begin{macrocode}
  \ifnoledgroup@\else
    \expandafter\let\csname mpv#1footnote\endcsname=\mpnormalvfootnote
    \expandafter\let\csname mp#1footgroup\endcsname=\mpthreecolfootgroup
    \skip\csname mp#1footins\endcsname=\csuse{Xbeforenotes@#1}%
    \advance\skip\csname mp#1footins\endcsname by\csuse{Xafterrule@#1}%
    \mpthreecolfootsetup{#1}
  \fi
}

%    \end{macrocode}
% The \protect\cs{footstart} and \protect\cs{footnoterule} macros for these notes assume
% the normal values (\reff{normalvalues} above).
% \end{macro}
%
% \begin{macro}{\threecolfootsetup}
% The \protect\cs{threecolfootsetup} macro calculates and sets some numbers
% for three-column footnotes.
%
% We set the \protect\cs{count} of the foot insert to $333$.
% Each footnote can be thought of as contributing only one third of
% its height to the page, since the footnote insertion has been
% made as a long narrow column, which then gets trisected by the
% \protect\cs{rigidbalance} routine (inside \protect\cs{threecolfootgroup}).
% These new, shorter columns are saved in a box, and then that box
% is \emph{put back} into the footnote insert, replacing the
% original collection of the footnotes.  This new box is, therefore,
% only about a third of the height of the original one.
%
% The \protect\cs{dimen} value for this note series has to change in the
% inverse way: it needs to be three times
% the actual limit on the amount of space these notes are allowed to
% fill on the page, because when \TeX\ is
% accumulating material for the page
% and checking that limit, it does not apply the \protect\cs{count} scaling.
%    \begin{macrocode}
\newcommand*{\threecolfootsetup}[1]{%
  \count\csname #1footins\endcsname 333
  \csxdef{default@#1footins}{333}%Use this to confine the  notes to one side only
  \multiply\dimen\csname #1footins\endcsname \thr@@}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\mpthreecolfootsetup}
% The setup for minipages.
%    \begin{macrocode}
\newcommand*{\mpthreecolfootsetup}[1]{%
  \count\csname mp#1footins\endcsname 333
  \multiply\dimen\csname mp#1footins\endcsname \thr@@}

%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\threecolvfootnote}
% \protect\cs{threecolvfootnote}
% is the \protect\cs{vfootnote} command for three-column notes. The
% call to \protect\cs{Xnotefontsize@\meta{s}} ensures that the
% \protect\cs{splittopskip} and \protect\cs{splitmaxdepth} take their values
% from the right \protect\cs{strutbox}: the one used in a footnotes.
% Note especially the importance of temporarily reducing the
% \protect\cs{hsize} to $0.3$ of its normal value.  This determines the
% widths of the individual columns.  So if the normal \protect\cs{hsize}
% is, say, 10\,cm, then each column will be $0.3\times10=3$\,cm
% wide, leaving a gap of 1\,cm spread equally between columns
% (i.e., .5\,cm between each).
%
% The arguments are \verb+#1+~the note series letter and \verb+#1+~the full text
% of the note (including numbers, lemma and text).
%    \begin{macrocode}
\notbool{parapparatus@}{\newcommand*}{\newcommand}{\threecolvfootnote}[2]{%
  \insert\csname #1footins\endcsname\bgroup%
  \hsize=\expandafter\dimexpr\csuse{Xwidth@#1}\relax%
  \noindent\csuse{Xbhooknote@#1}%
  \csuse{Xnotefontsize@#1}%
  \footsplitskips%
  \csname #1footfmt\endcsname #2{#1}\egroup}
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\threecolfootfmt}
% \protect\cs{threecolfootfmt}
% is the command that formats one note.
% The arguments are \verb+#1+~the line numbers, \verb+#2+~the lemma and \verb+#4+~the
% text of the \verb"-footnote" command \verb+#4+ optional  (for backward compatibility): the series.
%
%    \begin{macrocode}
\notbool{parapparatus@}{\newcommand*}{\newcommand}{\threecolfootfmt}[4]{% 
  \normal@pars%
  \hsize \csuse{Xhsizethreecol@#4}%
  \nottoggle{Xparindent@#4}{\parindent=\z@}{}%
  \tolerance=5000%
  \hangindent=\csuse{Xhangindent@#4}%
  \par%
  \everypar{\hangindent=\csuse{Xhangindent@#4}}%
  \@tempdima=\parindent%
  \csuse{Xcolalign@#4}%
  \parindent=\@tempdima%
  \strut{\printlinefootnote{#1}{#4}}%
  {\nottoggle{Xlemmadisablefontselection@#4}%
    {\select@lemmafont#1|{\csuse{Xlemmafont@#4}#2}}%
    {{\csuse{Xlemmafont@#4}#2}}%
  }%
  \iftoggle{nosep@}{\hskip\csuse{Xinplaceoflemmaseparator@#4}}{\ifcsempty{Xlemmaseparator@#4}%
    {\hskip\csuse{Xinplaceoflemmaseparator@#4}}%
    {\nobreak\hskip\csuse{Xbeforelemmaseparator@#4}\csuse{Xlemmaseparator@#4}\hskip\csuse{Xafterlemmaseparator@#4}%
  }}%
  #3\strut\par\allowbreak}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\threecolfootgroup}
% And here is the \verb"footgroup" macro that is called within the
% output routine to regroup the notes into three columns. Once
% again, the call to \protect\cs{Xnotefontsize@\meta{s}} is there to ensure that
% it is the right \protect\cs{splittopskip}---the one used in
% footnotes---which is used to provide the third argument for
% \protect\cs{rigidbalance}.  This third argument (\protect\cs{@h}) is the
% \verb"topskip" for the box containing the text of the
% footnotes, and does the job of making sure the top lines of the
% columns line up horizontally.  In \thetexbook, p.\,398,
% Donald Knuth suggests retrieving the ouput of \protect\cs{rigidbalance},
% putting it back into the insertion box, and then printing the
% box.  Here, we just print the \protect\cs{line} which comes out of
% \protect\cs{rigidbalance} directly, without any re-boxing.
%    \begin{macrocode}
\newcommand*{\threecolfootgroup}[1]{{\csuse{Xnotefontsize@#1}%
  \noindent\csuse{Xtxtbeforenotes@#1}}%
  \csuse{Xbhookgroup@#1}\par%
  \splittopskip=\ht\strutbox
  \expandafter
  \Xrigidbalance\csname #1footins\endcsname \thr@@ \splittopskip}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\mpthreecolfootgroup}
% The setup for minipages.
%    \begin{macrocode}
\newcommand*{\mpthreecolfootgroup}[1]{{%
  \vskip\skip\@nameuse{mp#1footins}
  \ifl@dpairing\ifparledgroup%
    \leavevmode\marks\parledgroup@{begin}%
    \marks\parledgroup@series{#1}%
    \marks\parledgroup@type{Xfootnote}%
  \fi\fi\normalcolor
  \ifparledgroup%
    \ifl@dpairing%
    \else%
      \setXnoteswidthliketwocolumns@{#1}%
      \setXnotespositionliketwocolumns@{#1}%
      \print@Xfootnoterule{#1}%
    \fi%
  \else%
    \setXnoteswidthliketwocolumns@{#1}%
    \setXnotespositionliketwocolumns@{#1}%
    \print@Xfootnoterule{#1}%
  \fi%
  {\csuse{Xnotefontsize@#1}\noindent\csuse{Xtxtbeforenotes@#1}}%
  \csuse{Xbhookgroup@#1}\par%
  \splittopskip=\ht\strutbox
  \expandafter
  \Xrigidbalance\csname mp#1footins\endcsname \thr@@ \splittopskip}}

%    \end{macrocode}
% \end{macro}
% \paragraph{Two columns}
%
% \begin{macro}{\Xarrangement@twocol}
%    \begin{macrocode}
\newcommand*{\Xarrangement@twocol}[1]{%
  \csgdef{series@display#1}{twocol}
  \expandafter\let\csname v#1footnote\endcsname=\twocolvfootnote
  \expandafter\let\csname #1footfmt\endcsname=\twocolfootfmt
  \expandafter\let\csname #1footgroup\endcsname=\twocolfootgroup
  \dimen\csname #1footins\endcsname=\csuse{Xmaxhnotes@#1}%
  \skip\csname #1footins\endcsname=\csuse{Xbeforenotes@#1}%
  \advance\skip\csname #1footins\endcsname by\csuse{Xafterrule@#1}%
  \twocolfootsetup{#1}
%    \end{macrocode}
% The additional setup for minipages.
%    \begin{macrocode}
  \ifnoledgroup@\else
    \expandafter\let\csname mpv#1footnote\endcsname=\mpnormalvfootnote
    \expandafter\let\csname mp#1footgroup\endcsname=\mptwocolfootgroup
    \skip\csname mp#1footins\endcsname=\csuse{Xbeforenotes@#1}%
    \advance\skip\csname mp#1footins\endcsname by\csuse{Xafterrule@#1}%
    \mptwocolfootsetup{#1}
  \fi
}

%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\twocolfootsetup}
% \begin{macro}{\twocolvfootnote}
% \begin{macro}{\twocolfootfmt}
% \begin{macro}{\twocolfootgroup}
% Here is a series of macros which are very similar to their
% three-column counterparts. In this case,
% each note is assumed to contribute only a half a line of text.
% And the notes are set in columns
% giving a gap between them of one tenth
% of the \protect\cs{hsize}.
%    \begin{macrocode}
\newcommand*{\twocolfootsetup}[1]{%
  \count\csname #1footins\endcsname 500
  \csxdef{default@#1footins}{500}%
  \multiply\dimen\csname #1footins\endcsname \tw@}
%    \end{macrocode}
%    \begin{macrocode}
\notbool{parapparatus@}{\newcommand*}{\newcommand}{\twocolvfootnote}[2]{%
  \insert\csname #1footins\endcsname\bgroup%
  \hsize=\expandafter\dimexpr\csuse{Xwidth@#1}\relax%
  \noindent\csuse{Xbhooknote@#1}%
  \csuse{Xnotefontsize@#1}%
  \footsplitskips%
  \csname #1footfmt\endcsname #2{#1}\egroup}
%    \end{macrocode}
%    \begin{macrocode}
\notbool{parapparatus@}{\newcommand*}{\newcommand}{\twocolfootfmt}[4]{% 4th arg is optional, for backward compatibility
  \normal@pars%
  \hsize \csuse{Xhsizetwocol@#4}%
  \nottoggle{Xparindent@#4}{\parindent=\z@}{}%
  \tolerance=5000%
  \hangindent=\csuse{Xhangindent@#4}%
  \par%
  \everypar{\hangindent=\csuse{Xhangindent@#4}}%
 \@tempdima=\parindent%
  \csuse{Xcolalign@#4}%
 \parindent=\@tempdima%
  \strut{\printlinefootnote{#1}{#4}}%
  {\nottoggle{Xlemmadisablefontselection@#4}%
    {\select@lemmafont#1|{\csuse{Xlemmafont@#4}#2}}%
    {{\csuse{Xlemmafont@#4}#2}}%
  }%
  \iftoggle{nosep@}{\hskip\csuse{Xinplaceoflemmaseparator@#4}}{\ifcsempty{Xlemmaseparator@#4}%
    {\hskip\csuse{Xinplaceoflemmaseparator@#4}}%
    {\nobreak\hskip\csuse{Xbeforelemmaseparator@#4}\csuse{Xlemmaseparator@#4}\hskip\csuse{Xafterlemmaseparator@#4}%
  }}%
  #3\strut\par\allowbreak}
%    \end{macrocode}
%    \begin{macrocode}
\newcommand*{\twocolfootgroup}[1]{{\csuse{Xnotefontsize@#1}
  \noindent\csuse{Xtxtbeforenotes@#1}}%
  \csuse{Xbhookgroup@#1}\par%
  \splittopskip=\ht\strutbox
  \expandafter
  \Xrigidbalance\csname #1footins\endcsname \tw@ \splittopskip}

%    \end{macrocode}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
%
% \begin{macro}{\mptwocolfootsetup}
% \begin{macro}{\mptwocolfootgroup}
% The versions for minipages.
%    \begin{macrocode}
\newcommand*{\mptwocolfootsetup}[1]{%
  \count\csname mp#1footins\endcsname 500
  \multiply\dimen\csname mp#1footins\endcsname \tw@}
%    \end{macrocode}
%    \begin{macrocode}
\newcommand*{\mptwocolfootgroup}[1]{{%
  \vskip\skip\@nameuse{mp#1footins}
  \ifl@dpairing\ifparledgroup%
    \leavevmode\marks\parledgroup@{begin}%
    \marks\parledgroup@series{#1}%
    \marks\parledgroup@type{Xfootnote}%
  \fi\fi\normalcolor
  \ifparledgroup%
    \ifl@dpairing%
    \else%
      \setXnoteswidthliketwocolumns@{#1}%
      \setXnotespositionliketwocolumns@{#1}%
      \print@Xfootnoterule{#1}%
    \fi%
  \else%
    \setXnoteswidthliketwocolumns@{#1}%
    \setXnotespositionliketwocolumns@{#1}%
    \print@Xfootnoterule{#1}%
  \fi%
   {\csuse{Xnotefontsize@#1}\noindent\csuse{Xtxtbeforenotes@#1}}%
   \csuse{Xbhookgroup@#1}\par%
  \splittopskip=\ht\strutbox
  \expandafter
  \Xrigidbalance\csname mp#1footins\endcsname \tw@ \splittopskip}}

%    \end{macrocode}
% \end{macro}
% \end{macro}
%
%
% \subsection{Critical notes presentation}
% Here, we define some commons macro which are used in order to print a critical notes, that is a note with 1) line number 2) lemma 3) lemma separator 4) text associated to the lemma.

% \subsubsection{Font tools}
% \begin{macro}{\endashchar}
% \begin{macro}{\fullstop}
% \begin{macro}{\rbracket}
% The fonts that are used for printing notes might not have the
% character mapping we expect: for example, the Computer Modern font
% that contains old-style numerals does not contain an en-dash or
% square brackets, and its period and comma are in odd locations.
% To allow use of the standard footnote macros with such fonts, we use
% the following macros for certain characters.
%
% The \protect\cs{endashchar} macro is simply an en-dash from the
% normal font and is immune to changes in the surrounding
% font.  The same goes for the full stop.  These two are used in
% \protect\cs{printlines}.  The right bracket macro is the same again;
% it crops up in \protect\cs{normalfootfmt} and the other footnote
% macros for controlling the format of the footnotes.
% 
% With \protect\package{polyglossia}, each critical note has a \protect\cs{footnote@lang} which shows the language of the lemma, 
% and which can be used to switch the bracket from right to left.
% \changes{v1.4.0}{2012/11/16}{Switch the right bracket to a left bracket when the lemma is RTL (needs polyglossia or LuaTeX).}
%    \begin{macrocode}
\def\endashchar{\textnormal{--}}

\newcommand*{\fullstop}{\textnormal{.}}
\def\Xsublinesep@side{\fullstop}

\newcommand*{\rbracket}{\textnormal{%
   \csuse{text\csuse{footnote@lang}}{%
         \ifluatex%
         \ifdefstring{\footnote@luatextextdir}{TRT}{\thinspace[}{\thinspace]}%
            \else%
         \thinspace]%
         \fi}%
   }%
}

%    \end{macrocode}
% \end{macro}
% \end{macro}
% \end{macro}
%
% \subsubsection{Pstart number in footnote}
% \begin{macro}{\printpstart}
% The \protect\cs{printpstart} macro prints the pstart number for a note.
% \changes{v1.18.0}{2015/02/23}{Debug \protect\cs{Xpstart} with parallel pages and columns (eledpar)}
%    \begin{macrocode}
\newcommand{\printpstart}[0]{%
    \ifboolexpr{bool{l@dpairing} or bool{l@dprintingpages} or bool{l@dprintingcolumns}}{%
        \ifledRcol%
            \thepstartR%
        \else%
            \thepstartL%
        \fi%
    }{%
        \thepstart%
    }%
}
%    \end{macrocode}
% 
% \end{macro}
% \subsubsection{Line number printing}
% \begin{macro}{\printlinefootnote}
% The \protect\cs{printlinefootnote} macro is called in each \protect\cs{<type>footfmt} command. 
% It controls whether the line number is printed or not, according to the series options. Its first argument is the information about lines; its second is the series of the footnote.
% The printing of the line number is shared in 
% \protect\cs{printlinefootnotenumbers}.
% \changes{v1.18.0}{2015/02/23}{Code refactoring in \protect\cs{printlinefootnote}: the printing of the numbers are factorized in  \protect\cs{printlinefootnotearea}}
%  \begin{macrocode}
\newcommand{\printlinefootnote}[2]{%
   \l@dp@rsefootspec#1|%
   \iftoggle{Xnumberonlyfirstintwolines@#2}{%
       \edef\lineinfo@{\l@dparsedstartline - \l@dparsedstartsub - \l@dparsedendline - \l@dparsedendsub}%
       }%
       {%
       \edef\lineinfo@{\l@dparsedstartline - \l@dparsedstartsub}%
       }%
   \iftoggle{nonum@}{%Try if the line number must printed for this specific not (by default, yes)
   \hspace{\csuse{Xinplaceofnumber@#2}}% 
   }%
   {%
       {%
           \iftoggle{Xnonumber@#2}%Try if the line number must printed (by default, yes)
           {%
           \hspace{\csuse{Xinplaceofnumber@#2}}%
           }%
           {%
              {\iftoggle{Xnumberonlyfirstinline@#2}% If for this series the line number must be printed only in the first time.
                 {%
                 \ifcsdef{prevline#2}%
                    {%Be sure the \prevline exists.
                    \ifcsequal{prevline#2}{lineinfo@}%Try it
                       {%
                       \ifcsempty{Xsymlinenum@#2}%
                        {%
                            \hspace{\csuse{Xinplaceofnumber@#2}}%
                        }%
                        {\printsymlinefootnotearea{#2}}%
                       }%
                       {%
                        \printlinefootnotearea{#1}{#2}%
                        }%
                    }%
                    {%
                    \printlinefootnotearea{#1}{#2}%
                    }%
              }%
              {%
              \printlinefootnotearea{#1}{#2}%
              }%
              \csxdef{prevline#2}{\lineinfo@}%
           }%
        }%
     }%
   }%
}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\printsymlinefootnotearea}
% This macro prints the space before the line symbol, changes the font, when prints the line symbol and the space after it.
%    \begin{macrocode}
\newcommand{\printsymlinefootnotearea}[1]{%
  \hspace{\csuse{Xbeforesymlinenum@#1}}%
  \csuse{Xnotenumfont@#1}%
  \ifdimequal{\csuse{Xboxsymlinenum@#1}}{\z@}%
     {\csuse{Xsymlinenum@#1}}%
     {\hbox to \csuse{Xboxsymlinenum@#1}%
       {\csuse{Xsymlinenum@#1}\hfill}%
     }%
  \hspace{\csuse{Xaftersymlinenum@#1}}%
}%
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\printlinefootnotearea}
% This macro prints the space before the line number, changes the font, then prints the line number and the space after it.
% It is called by \protect\cs{printlinefootnote}
% depending of the options about repeating line numbers.
% The first argument is line information, the second is the notes series (A, B, C,  etc.)
%    \begin{macrocode}
\newcommand{\printlinefootnotearea}[2]{%
  \printXbeforenumber{#2}%
  \csuse{Xnotenumfont@#2}%
  \boxfootnotenumbers{#1}{#2}%
  \printXafternumber{#2}%
}%
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\boxfootnotenumbers}
% Depending on the user settings, this macro will box line numbers (or not).
% The first argument is line information, the second is the notes series (A, B, C,  etc.)
% The previous \protect\cs{printlinefootnotearea} calls it.
%    \begin{macrocode}
\newcommand{\boxfootnotenumbers}[2]{%
  \ifdimequal{\csuse{Xboxlinenum@#2}}{0pt}{%
       \printlinefootnotenumbers{#1}{#2}%
     }%
     {%
       \hbox to \csuse{Xboxlinenum@#2}%
         {%
         \IfSubStr{RC}{\csuse{Xboxlinenumalign@#2}}{\hfill}{}%
         \printlinefootnotenumbers{#1}{#2}%
         \IfSubStr{LC}{\csuse{Xboxlinenumalign@#2}}{\hfill}{}%
         }%
     }%
}%
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\printlinefootnotenumbers}
% This macro prints, if needed, the pstart number and the line number.
% The first argument is line information, the second is the notes series (A, B, C, etc.)
% The previous \protect\cs{boxlinefootnote} calls it.
%    \begin{macrocode}
\newcommand{\printlinefootnotenumbers}[2]{%
  \xdef\@currentseries{#2}%
  \ifboolexpr{%
   (togl{Xpstart@#2} and bool{numberpstart})%
   or togl{Xpstarteverytime@#2}}%
  {\printpstart}{}%
  \iftoggle{Xstanza@#2}{%
    \ifnumberstanza%
      \printstanza%
      \csuse{Xstanzaseparator@#2}%
    \fi%
  }{}%
  \iftoggle{Xonlypstart@#2}{}{%
    \csuse{Xtxtbeforenumber@#2}%
    \printlines#1||\ifledRcol@\@Rlineflag\fi}%
}%
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\printXbeforenumber}
% This macro prints a space (before the line number) in footnote. 
% It is called by \protect\cs{printlinefootnotearea}.
% Its only argument is the note series (A, B, C, etc.)
%    \begin{macrocode}
\newcommand{\printXbeforenumber}[1]{%
  \hspace{\csuse{Xbeforenumber@#1}}%
}%
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\printXafternumber}
% This macro prints the space, adding eventually a \protect\cs{nobreak},  after the line number, in footnote. 
% It is called by \protect\cs{printlinefootnotearea}.
% Its only argument is the series
%    \begin{macrocode}
\newcommand{\printXafternumber}[1]{%
  \iftoggle{Xnonbreakableafternumber@#1}{\nobreak}{}%
  \hspace{\csuse{Xafternumber@#1}}%
}%
%    \end{macrocode}
% \end{macro}
%
% If we have decided to print the line number in a specific notes, the \protect\cs{printlines} macro prints the line
% numbers for a note---which, in the
% general case, is a rather complicated task.
% The seven parameters of the
% argument are the line numbers as stored in \protect\cs{l@d@nums}, in the
% form described on \reff{linenumbers}: the starting
% page, line, and sub-line numbers, followed by the ending page,
% line, and sub-line numbers, and then the font specifier for
% the lemma.
%
% \edmac' creator have defined six boolean in order to know which component of line number description we have to print:
% \begin{itemize}
% \item \protect\cs{ifl@d@pnum} for page numbers;
% \item \protect\cs{ifl@d@ssub} for starting sub-line;
% \item \protect\cs{ifl@d@elin} for ending line;
% \item \protect\cs{ifl@d@esl} for ending sub-line; and
% \item \protect\cs{ifl@d@dash} for the dash between the starting and ending groups.
% \end{itemize}
% There is no boolean for the line number because it is always printed.
%
% Maïeul Rouquette has added \protect\cs{ifl@d@Xtwolines} and \protect\cs{ifl@d@Xmorethantwolines}
% to print a symbol which stands for ``and subsequent`` when there are two, three or more lines.
% \begin{macro}{\ifl@d@pnum}
% \begin{macro}{\ifl@d@ssub}
% \begin{macro}{\ifl@d@elin}
% \begin{macro}{\ifl@d@esl}
% \begin{macro}{\ifl@d@dash}
% \begin{macro}{\ifl@d@Xtwolines}
% \begin{macro}{\ifl@d@Xmorethantwolines}
%    \begin{macrocode}
\newif\ifl@d@pnum 
\newif\ifl@d@ssub 
\newif\ifl@d@elin
\newif\ifl@d@esl
\newif\ifl@d@dash
\newif\ifl@d@Xtwolines%
\newif\ifl@d@Xmorethantwolines%
%    \end{macrocode}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
%
%
% \begin{macro}{\l@dp@rsefootspec}
% \begin{macro}{\l@dparsedstartpage}
% \begin{macro}{\l@dparsedstartline}
% \begin{macro}{\l@dparsedstartsub}
% \begin{macro}{\l@dparsedendpage}
% \begin{macro}{\l@dparsedendline}
% \begin{macro}{\l@dparsedendsub}
% \changes{v2.5.0}{2015/11/13}{\protect\cs{l@dparsefootspec} deleted, for it is not anymore used since \protect\eledmac release!}
% \protect\cs{l@dp@rsefootspec} parses lines specification and defines macros which hold the numeric values.
% Just a reminder of the arguments: \\
% \verb?\printlines    #1      |  #2  |   #3    |    #4    |  #5  |  #6     |   #7?\\
% \verb?\printlines start-page | line | subline | end-page | line | subline | font?flag 
%    \begin{macrocode}
\def\l@dp@rsefootspec#1|#2|#3|#4|#5|#6|#7|{%
  \gdef\l@dparsedstartpage{#1}%
  \gdef\l@dparsedstartline{#2}%
  \gdef\l@dparsedstartsub{#3}%
  \gdef\l@dparsedendpage{#4}%
  \gdef\l@dparsedendline{#5}%
  \gdef\l@dparsedendsub{#6}%
}
%    \end{macrocode}
% Initialise the several number value macros.
%    \begin{macrocode}
\def\l@dparsedstartpage{0}%
\def\l@dparsedstartline{0}%
\def\l@dparsedstartsub{0}%
\def\l@dparsedendpage{0}%
\def\l@dparsedendline{0}%
\def\l@dparsedendsub{0}%

%    \end{macrocode}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
%
% 
%
% \begin{macro}{\setprintlines}
% 
% The macro \protect\cs{setprintlines} does the work of deciding what numbers should
% be printed. Its arguments are the same as the first 6 of \protect\cs{printlines}.
% \changes{v0.7.0}{2005/02/18}{Added \protect\cs{setprintlines} for use by \protect\cs{printlines}}
%    \begin{macrocode}
\newcommand*{\setprintlines}[6]{%
  \l@d@pnumfalse \l@d@dashfalse 
%    \end{macrocode}
% We print the page numbers only if\/: 1)~we are doing
% the lineation by page, and 2)~the ending page number is different
% from the starting page number.\label{printlines}a
%    \begin{macrocode}
  \ifbypage@
     \ifnum#4=#1 \else
        \l@d@pnumtrue 
        \l@d@dashtrue
     \fi
  \fi
%    \end{macrocode}
%
% We print the ending line number if\/: (1)~we are printing the ending
% page number, or (2)~it is different from the starting line number.
%    \begin{macrocode}
  \ifl@d@pnum \l@d@elintrue \else \l@d@elinfalse \fi
  \ifnum#2=#5 \else
      \l@d@elintrue
      \l@d@dashtrue
  \fi
%    \end{macrocode}
%
% We print the starting sub-line if it is nonzero.
%    \begin{macrocode}
  \l@d@ssubfalse
  \ifnum#3=0 \else
      \l@d@ssubtrue
  \fi
%    \end{macrocode}
%
% We print the ending sub-line if it is nonzero and: (1)~it is different
% from the starting sub-line number, or (2)~the ending line number is
% being printed.
%    \begin{macrocode}
  \l@d@eslfalse
  \ifnum#6=0 \else
      \ifnum#6=#3
         \ifl@d@elin \l@d@esltrue \else \l@d@eslfalse \fi
      \else
         \l@d@esltrue
         \l@d@dashtrue
      \fi
  \fi%
%    \end{macrocode}
% However, if the \protect\cs{Xtwolines} is set for the current series, we do not print the last line number.
%    \begin{macrocode}
  \ifl@d@dash%
    \ifboolexpr{togl{fulllines@} or test{\ifcsempty{Xtwolines@\@currentseries}}}%
      {}%
      {%
      \setistwofollowinglines{#1}{#2}{#4}{#5}%
        \ifboolexpr{%
          (%
               togl {Xtwolinesbutnotmore@\@currentseries}%
               and not% 
                 (%
                  bool {istwofollowinglines@}%              
                 )%
          )%
          or% 
          (%
             (not test{\ifnumequal{#1}{#4}})%
               and togl{Xtwolinesonlyinsamepage@\@currentseries}%
             )%
          }%
          {}%
          {%
          \l@d@dashfalse%
          \l@d@Xtwolinestrue%
          \l@d@elinfalse%
          \l@d@eslfalse%
          \ifcsempty{Xmorethantwolines@\@currentseries}%
            {}%
            {\ifistwofollowinglines@\else%
              \l@d@Xmorethantwolinestrue%
             \fi%
            }%
          }%
      }%
  \fi%
%    \end{macrocode}
% End of \protect\cs{setprintlines}.
%    \begin{macrocode}
}%
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\setistwofollowinglines}
% The \protect\cs{ifistwofollowinglines} boolean, used by the \protect\cs{Xtwolines} and related setting, is set to true by \protect\cs{setistwofollowinglines}. 
% This command takes the following arguments:
% \begin{itemize}
%  \item \verb+#1+ First page number.
%  \item \verb+#2+ First line number.
%  \item \verb+#3+ Last page number.
%  \item \verb+#4+ Last line number.
% \end{itemize}
% If \verb+#3+-\verb+#2+ = 1, then that means the two lines are subsequent, and consequently \protect\cs{ifistwofollowinglines} is set to true.
% However, if we use lineation by page, two given lines can be subsequent if:
% \begin{itemize}
%   \item The first line number is equal to the last line number of the first page.
%   \item The last line number is equal to 1.
%   \item \verb+#3+-\verb+#1+ is equal to 1.
% \end{itemize}
%    \begin{macrocode}
\newif\ifistwofollowinglines@%
\newcommand{\setistwofollowinglines}[4]{%
    \ifcsdef{lastlinenumberon@#1}%
      {\numdef{\tmp}{\csuse{lastlinenumberon@#1}}}%
      {\numdef{\tmp}{0}}%
    \istwofollowinglines@false%
    \ifnumequal{#4-#2}{1}%
    {\istwofollowinglines@true}%
    {\ifbypage@%
      \ifnumequal{#3-#1}{1}%
      {%
      \ifnumequal{#2}{\tmp}%
        {\ifnumequal{#4}{1}{\istwofollowinglines@true}{}}%
        {}%
      }%
      {}%
     \fi%
    }%
}%
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\printlines}
% \changes{v2.5.0}{2015/11/13}{\protect\cs{printlines} takes an eighth argument: the line flag}
% So, we have decided which part of line number sets will be printed depending of these value.
% Now we are ready to print them. 
% If the lineation is by pstart, we print the pstart.
% \changes{v0.15.0}{2012/06/11}{Line numbering can be reset at each pstart.}
% Arguments are 1) start page number 2) start line number 3) start subline number 4) end page number 5) end line number 6) end subline number 7) font specification 8) side flag
%    \begin{macrocode}
\def\printlines#1|#2|#3|#4|#5|#6|#7|#8|{%
  \begingroup%
%    \end{macrocode}
% If we use \LuaTeX, ensure we use good text's direction.
%    \begin{macrocode}
  \ifluatex%
    \edef\@tmp{\the\textdir}%
    \ifdefstring{\@tmp}{TLT}{}{\textdir TLT}%Test in order to prevent spurious space (bug #397)
  \fi%
%    \end{macrocode}
% Decide which part of line number components we will print.
%    \begin{macrocode}
  \setprintlines{#1}{#2}{#3}{#4}{#5}{#6}%
%    \end{macrocode}
% One subtlety left here is when to print a period between
% numbers. But the only instance in which this is tricky is for the
% ending sub-line number: it could come after the starting
% sub-line number (in which case we want only the dash) or after an
% ending line number (in which case we need to insert a period).
% So, first, print the start line number.
%    \begin{macrocode}
  \ifdimequal{\csuse{Xboxstartlinenum@\@currentseries}}{0pt}%
    {\bgroup}%
    {\leavevmode\hbox to \csuse{Xboxstartlinenum@\@currentseries}\bgroup\hfill}%
  \ifl@d@pnum%
    \wrap@edcrossref{\@this@crossref@start}{#1}%
    \csuse{Xsublinesep@\@currentseries}%
  \fi%
  \wrap@edcrossref{\@this@crossref@start}{%
    \linenumrep{#2}%
    \iftoggle{Xlineflag@\@currentseries}{#8}{}%
  }%
  \ifl@d@ssub%
    \csuse{Xsublinesep@\@currentseries}%
    \wrap@edcrossref{\@this@crossref@start}{\sublinenumrep{#3}}%
  \fi
  \egroup%
%    \end{macrocode}
% Then print the dash + end line number, or the range symbol.
% \changes{v0.3.0}{2004/02/14}{Added \protect\cs{linenumr@p} and \protect\cs{sublinenumr@p} 
%        to \protect\cs{printlines}}
% \changes{v1.20.0}{2015/03/22}{Added \protect\cs{ifl@d@Xmorethantwolines} and \protect\cs{ifl@d@Xmorethantwolines} to \protect\cs{printlines}}
%    \begin{macrocode}
  \ifdimequal{\csuse{Xboxendlinenum@\@currentseries}}{0pt}%
    {\bgroup}%
    {\hbox to \csuse{Xboxendlinenum@\@currentseries}\bgroup}%
  \ifl@d@Xtwolines%
    \ifl@d@Xmorethantwolines%
      \csuse{Xmorethantwolines@\@currentseries}%
    \else%
      \csuse{Xtwolines@\@currentseries}%
    \fi%
  \else%
    \ifl@d@dash% 
      \ifdefined\linerangesep@%
        \linerangesep@%
      \else%
        \csuse{Xlinerangeseparator@\@currentseries}%
      \fi%
    \fi%
    \ifl@d@pnum%
       \wrap@edcrossref{\@this@crossref@end}{#4}%
       \csuse{Xsublinesep@\@currentseries}%
    \fi%
    \ifl@d@elin% 
      \wrap@edcrossref{\@this@crossref@end}{%
        \linenumrep{#5}%
        \iftoggle{Xlineflag@\@currentseries}{#8}{}%
       }%
    \fi%
    \ifl@d@esl%
       \ifl@d@elin%
         \csuse{Xsublinesep@\@currentseries}%
       \fi%
       \wrap@edcrossref{\@this@crossref@end}{\sublinenumrep{#6}}%
     \fi%
  \fi%
  \ifdimequal{\csuse{Xboxendlinenum@\@currentseries}}{0pt}%
    {}%
    {\hfill}%Prevent underfull hbox
  \egroup%
  \endgroup%
}%
%    \end{macrocode}
% \end{macro}
% \section{Familiar footnotes}
%
% \subsection{Adjacent footnotes}
%    The original \edmac{} provided users with five series of critical footnotes (\protect\cs{Afootnote} \protect\cs{Bfootnote}  \protect\cs{Cfootnote} \protect\cs{Dfootnote} \protect\cs{Efootnote}),
% and \LaTeX\ provides a single numbered footnote. The \macpackage{} package
% uses the \edmac{} mechanism to provide six series of numbered footnotes.
% 
%    First, though, the \protect\package{footmisc} package has an option whereby
% two or more consecutive \protect\cs{footnote}s have their marks separated
% by commas. This seemed to Peter Wilson such a useful ability that it was provided
% automatically by \eledmac.
%
% Maïeul Rouquette has maintened this feature in \macpackage, despite he thought  that is not directly in relationship with the aim of \macpackage.
%
%
% \begin{macro}{\multiplefootnotemarker}
% \begin{macro}{\multfootsep}
% These macros may have been defined by the \protect\ltxclass{memoir} class,
% are provided by the \protect\package{footmisc} package and perhaps
% by other footnote packages. 
% That is why we use \protect\cs{providecommand} and not \protect\cs{newcommand}.
%    \begin{macrocode}
\providecommand*{\multiplefootnotemarker}{3sp}
\providecommand*{\multfootsep}{\textsuperscript{\normalfont,}}

%    \end{macrocode}
% \end{macro}
% \end{macro}
%
% \begin{macro}{\m@mmf@prepare}
% A pair of self-cancelling kerns. This may have been defined in the 
% \protect\ltxclass{memoir} class.
%    \begin{macrocode}
\providecommand*{\m@mmf@prepare}{%
  \kern-\multiplefootnotemarker
  \kern\multiplefootnotemarker\relax}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\m@mmf@check}
% This may have been defined in the \protect\ltxclass{memoir} class. If it recognises
% the last kern as \protect\cs{multiplefootnotemarker} it typesets \protect\cs{multfootsep}.
%    \begin{macrocode}
\providecommand*{\m@mmf@check}{%
  \ifdim\lastkern=\multiplefootnotemarker\relax
    \edef\@x@sf{\the\spacefactor}%
    \unkern
    \multfootsep
    \spacefactor\@x@sf\relax
  \fi}

%    \end{macrocode}
% \end{macro}
%
% We have to modify \protect\cs{@footnotetext} and \protect\cs{@footnotemark}. However,
% if \protect\ltxclass{memoir} is used the modifications have already been made.
% \changes{v0.4.1}{2004/03/25}{Only change \protect\cs{@footnotetext} and
%                           \protect\cs{@footnotemark} if memoir not used}
%    \begin{macrocode}
\@ifclassloaded{memoir}{}{%
%    \end{macrocode}
% \begin{macro}{\@footnotetext}
% Add \protect\cs{m@mmf@prepare} at the end of \protect\cs{@footnotetext}.
%    \begin{macrocode}
\apptocmd{\@footnotetext}{\m@mmf@prepare}{}{}
%    \end{macrocode}
% \end{macro}
%
% \changes{v2.0.0}{2015/07/19}{Patch \protect\cs{@footnotemark} instead of redefine it}
% \begin{macro}{\@footnotemark}
% Modify \protect\cs{@footnotemark} to cater for adjacent \protect\cs{footnote}s.
%    \begin{macrocode}

\patchcmd{\@footnotemark}
  {\nobreak}
  {\m@mmf@check
  \nobreak
  }
  {}{}
\patchcmd{\@footnotemark}
  {\@makefnmark}
  {\@makefnmark
  \m@mmf@prepare
  }
  {}{}
%    \end{macrocode}
% \end{macro}
% Finished the modifications for the non-memoir case.
%    \begin{macrocode}
}

%    \end{macrocode}
%
% \subsection{Regular footnotes for numbered texts}
% \begin{macro}{\l@doldold@footnotetext}
% \begin{macro}{\@footnotetext}
% In order to enable the regular \protect\cs{footnote}s in numbered text
% we have to play around with its \protect\cs{@footnotetext}, using
% different forms for when in numbered or regular text.
% \changes{v0.5.0}{2004/04/03}{Enabled regular \protect\cs{footnote} in numbered text}
%    \begin{macrocode}
\pretocmd{\@footnotetext}{%
  \ifnumberedpar@
    \edtext{}{\l@dbfnote{#1}}%
  \else
  }{}{}
\apptocmd{\@footnotetext}{\fi}{}{}%
%    \end{macrocode}
% \end{macro}
% \end{macro}
%
% \begin{macro}{\l@dbfnote}
% \begin{macro}{\vl@dbfnote}
% \begin{macro}{\vl@dbfnote}
% \begin{macro}{\footnote}
% \begin{macro}{\get@fnmark}
% \begin{macro}{\get@thisfootnote}
% \protect\cs{l@dbfnote} adds the footnote to the insert list, and
% \protect\cs{vl@dbfnote} calls the original \protect\cs{@footnotetext}.
% \changes{v0.6.0}{2004/11/23}{Changed \protect\cs{l@dbfnote} and \protect\cs{vl@dbfnote} as
% originals could give incorrect markers in the footnotes}
% We also patch \cs{footnote} in order to get the correct footnote numbers when typesetting parallel texts. This is moved into a \cs{get@fnmark} command.
% \changes{v1.4.1}{2012/11/16}{Compatibility of standard footnotes with \eledmac when these footnotes contain any commands.}
%    \begin{macrocode}

\patchcmd%
  {\footnote}%
  {\stepcounter\@mpfn}%
  {%
  \ifl@dpairing%
  \global\advance\footnote@reading by \@ne%
       \get@thisfootnote%
       \get@fnmark{\thisfootnote}%
   \ifcsdef{footnotereading\the\footnote@reading=typeset}%
    {\setcounter{\@mpfn}{\csuse{footnotereading\the\footnote@reading=typeset}}}%
    {\setcounter{\@mpfn}{\footnote@reading}}%
  \else%
    \stepcounter\@mpfn%
  \fi%
  }%
  {}
  {}

\newcommand{\get@thisfootnote}{%
    \ifl@dpairing
      \protected@xdef\thisfootnote{\the\footnote@reading}%
    \else%
      \protected@xdef\thisfootnote{\thefootnote}%
    \fi%
}%

\newcommand{\l@dbfnote}[1]{%
 \get@thisfootnote%
  \gdef\@tag{#1\relax}%
    \ifledRcol%
      \xright@appenditem{%
          \ifdefined\Hy@footnote@currentHref%
            \noexpand\def\noexpand\Hy@footnote@currentHref{\Hy@footnote@currentHref}%
          \fi%
          \noexpand\vl@dbfnote{{\expandonce\@tag}}{\thisfootnote}%
        }%
                         \to\inserts@listR
       \global\advance\insert@countR \@ne%
    \else%
      \xright@appenditem{%
          \ifdefined\Hy@footnote@currentHref%
            \noexpand\def\noexpand\Hy@footnote@currentHref{\Hy@footnote@currentHref}%
          \fi%
          \noexpand\vl@dbfnote{{\expandonce\@tag}}{\thisfootnote}%
       }%
                         \to\inserts@list
      \global\advance\insert@count \@ne%
    \fi
  \ignorespaces%
}%

\newcommand{\get@fnmark}[1]{%
  \ifboolexpr{bool{l@dpairing} or bool{l@dprintingpages} or bool{l@dprintingcolumns}}%
    {%
      \stepcounter{footnote@typeset}%
      \setcounter{footnote}{\c@footnote@typeset}%
        \immediate\write\@mainaux{%
          \global\csdef{footnotereading#1=typeset}{\the\c@footnote@typeset}%
         }%
      \def\@thefnmark{\thefootnote}%
    }%
    {%
      \@namedef{@thefnmark}{#1}%
    }%  
}%

\newcommand{\vl@dbfnote}[2]{%
  \get@fnmark{#2}%
  \@footnotetext{#1}%
}%
%    \end{macrocode}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
%
% \subsection{Footnote formats}
%
% Some of the code for the various formats is remarkably similar to that
% in section~\ref{sec:nfootformat}.
%
% The following macros generally set things up for the `standard' footnote
% format.
%
% \begin{macro}{\prebodyfootmark}
% \begin{macro}{\postbodyfootmark}
% Two convenience macros for use by \protect\cs{...@footnotemark...} macros.
%    \begin{macrocode}
\newcommand*{\prebodyfootmark}{%
  \leavevmode
  \ifhmode
    \edef\@x@sf{\the\spacefactor}%
    \m@mmf@check
    \nobreak
  \fi}
\newcommand{\postbodyfootmark}{%
  \m@mmf@prepare
  \ifhmode\spacefactor\@x@sf\fi\relax}
    
%    \end{macrocode}
% \end{macro}
% \end{macro}
% 
% \subsection{Footnote arrangement}
%  
% \subsubsection{User level macro}
% \begin{macro}{\arrangementX}
% \protect\cs{arrangementX}\oarg{s}\marg{arrangement}
%  command calls, for each series, a specific command which set many counters and commands in order to define specific arrangement.
%
%    \begin{macrocode}
\newcommandx{\arrangementX}[2][1,usedefault]{%
  \def\do##1{%
    \csname arrangementX@#2\endcsname{##1}%
  }%
  \ifstrempty{#1}%
    {%
    \dolistloop{\@series}%
    }%
    {
    \docsvlist{#1}%
    }%
}%
%    \end{macrocode}
% \end{macro}
% \subsubsection{Normal footnotes}
% \begin{macro}{\normal@footnotemarkX}
% \protect\cs{normal@footnotemarkX}\marg{series} sets up the typesetting of the
% marker at the point where the footnote is called for. 
%    \begin{macrocode}
\newcommand*{\normal@footnotemarkX}[1]{%
  \prebodyfootmark
  \wrapped@bodyfootmarkX{#1}%
  \postbodyfootmark}

%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\normalbodyfootmarkX}
% The \protect\cs{normalbodyfootmarkX}\marg{series} \emph{really} typesets the 
% in-text marker. The style is the normal superscript.
%    \begin{macrocode}
\newcommand*{\normalbodyfootmarkX}[1]{%
  \hbox{\textsuperscript{\normalfont\@nameuse{@thefnmark#1}}}}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\normalvfootnoteX}
% \changes{v1.5.1}{2013/08/16}{Fix bug with normal familiar footnotes when mixing RTL and LTR text.}
% \protect\cs{normalvfootnoteX}\marg{series}\marg{text} does the \protect\cs{insert} for
% the \meta{series} and calls the series' \protect\cs{footfmt...} to format the
% \meta{text}.
%    \begin{macrocode}
\notbool{parapparatus@}{\newcommand*}{\newcommand}{\normalvfootnoteX}[2]{%
  \insert\@nameuse{footins#1}\bgroup
    \hsize=\expandafter\dimexpr\csuse{widthX@#1}\relax%
    \noindent\csuse{bhooknoteX@#1}%
    \csuse{notefontsizeX@#1}%
    \footsplitskips
    \ifl@dpairing\ifl@dpaging\else%
      \setnoteswidthliketwocolumnsX@{#1}%
    \fi\fi%
    \setnotesXpositionliketwocolumns@{#1}%
    \spaceskip=\z@skip \xspaceskip=\z@skip
    \csuse{\csuse{footnote@dir}}\@nameuse{footfmt#1}{#1}{#2}\egroup}

%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\mpnormalvfootnoteX}
% The minipage version.
%    \begin{macrocode}
\newcommand*{\mpnormalvfootnoteX}[2]{%
  \get@thisfootnoteX{#1}%
  \get@fnmarkX{#1}{\thisfootnote}%
  \edef\this@footnoteX@reading{\the\csname footnote#1@reading\endcsname}% 
  \global\setbox\@nameuse{mpfootins#1}\vbox{%
    \unvbox\@nameuse{mpfootins#1}
    \noindent\csuse{bhooknoteX@#1}%
    \csuse{notefontsizeX@#1}%
    \hsize\columnwidth
    \@parboxrestore
    \color@begingroup
    \@nameuse{footfmt#1}{#1}{#2}\color@endgroup}}

%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\normalfootfmtX}
% \protect\cs{normalfootfmtX}\marg{series}\marg{text} typesets the footnote text,
% prepended by the marker.
%    \begin{macrocode}
\notbool{parapparatus@}{\newcommand*}{\newcommand}{\normalfootfmtX}[2]{%
 \ifluatex%
    \textdir\footnote@luatextextdir%
    \pardir\footnote@luatexpardir%
    \par%
 \fi%
   \protected@edef\@currentlabel{%
       \@nameuse{@thefnmark#1}%
   }%
  \ledsetnormalparstuffX{#1}%
  \hangindent=\csuse{hangindentX@#1}%
  \everypar{\hangindent=\csuse{hangindentX@#1}}%
  {{\csuse{notenumfontX@#1}\wrapped@footfootmarkX{#1}}\strut%
    #2\strut\par}}

%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\normalfootfootmarkX}
% \protect\cs{normalfootfootmarkX}\marg{series} is called by \protect\cs{normalfootfmtX}
% to typeset the footnote marker in the footer before the footnote text. 
%    \begin{macrocode}
\newcommand*{\normalfootfootmarkX}[1]{%
  \textsuperscript{\@nameuse{@thefnmark#1}}}

%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\normalfootstartX}
% \protect\cs{normalfootstartX}\marg{series} is the \meta{series} footnote 
% starting macro used in the output routine.
%    \begin{macrocode}
\newcommand*{\normalfootstartX}[1]{%
    \ifdimequal{0pt}{\prenotesX@}{}%
      {%
      \iftoggle{prenotesX@}{%
           \togglefalse{prenotesX@}% 
           \skip\csname footins#1\endcsname=%
             \dimexpr\csuse{prenotesX@}+\csuse{afterruleX@#1}\relax%
           }%
          {}%
      }%
  \vskip\skip\csname footins#1\endcsname%
  \leftskip=\z@
  \rightskip=\z@
  \ifl@dpairing\else%
     \hsize=\old@hsize%
  \fi%
  \setnoteswidthliketwocolumnsX@{#1}%
  \setnotesXpositionliketwocolumns@{#1}%
  \print@footnoteXrule{#1}%
}%

%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\normalfootnoteruleX}
% The rule drawn before the footnote series group.
%    \begin{macrocode}
\let\normalfootnoteruleX=\footnoterule

%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\normalfootgroupX}
% \protect\cs{normalfootgroupX}\marg{series} sends the contents of the \meta{series}
% insert box to the output page without alteration.
%    \begin{macrocode}
\newcommand*{\normalfootgroupX}[1]{%
  \csuse{bhookgroupX@#1}%
  \unvbox\@nameuse{footins#1}%
  \hsize=\old@hsize%
  }%

%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\mpnormalfootgroupX}
% The minipage version.
%    \begin{macrocode}
\newcommand*{\mpnormalfootgroupX}[1]{%
  \vskip\skip\@nameuse{mpfootins#1}
  \ifl@dpairing\ifparledgroup%
    \leavevmode\marks\parledgroup@{begin}%
    \marks\parledgroup@series{#1}%
    \marks\parledgroup@type{footnoteX}%
  \fi\fi\normalcolor
  \ifparledgroup%
    \ifl@dpairing%
    \else%
      \setnoteswidthliketwocolumnsX@{#1}%
      \setnotesXpositionliketwocolumns@{#1}%
      \print@footnoteXrule{#1}%
    \fi%
  \else%
    \setnoteswidthliketwocolumnsX@{#1}%
    \setnotesXpositionliketwocolumns@{#1}%
    \print@footnoteXrule{#1}%
  \fi%
  \csuse{bhookgroupX@#1}%
  \unvbox\@nameuse{mpfootins#1}}

%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\normalbfnoteX}
% \changes{v0.7.0}{2005/02/18}{Removed extraneous space from \protect\cs{normalbfnoteX}}
% \changes{v1.4.9}{2013/07/10}{Allow to redefine \protect\cs{thefootnoteX} with \c{alph} when some packages are loaded.}
%    \begin{macrocode}

\newcommand{\normalbfnoteX}[2]{%
  \get@thisfootnoteX{#1}%
    \ifledRcol%
      \ifluatex
          \footnotelang@lua[R]%
      \fi
      \@ifundefined{xpg@main@language}%if polyglossia
        {}%
        {\footnotelang@poly[R]}%
      \xright@appenditem{%
        \noexpand\led@set@index@fornote{#1}%
        \unexpanded{\def\this@footnoteX@reading}{\the\csname footnote#1@reading\endcsname}%
        \noexpand\vbfnoteX{#1}{#2}{\expandonce\thisfootnote}%
        \noexpand\led@reinit@index@fornote%
      }%
                         \to\inserts@listR
       \global\advance\insert@countR \@ne%
    \else%
      \ifluatex
          \footnotelang@lua%
      \fi
      \@ifundefined{xpg@main@language}%if polyglossia
        {}%
        {\footnotelang@poly}%
      \xright@appenditem{%
        \noexpand\led@set@index@fornote{#1}%
        \unexpanded{\def\this@footnoteX@reading}{\the\csname footnote#1@reading\endcsname}%
        \noexpand\vbfnoteX{#1}{#2}{\expandonce\thisfootnote}%
        \noexpand\led@reinit@index@fornote%
      }%
                         \to\inserts@list
      \global\advance\insert@count \@ne%
    \fi
  \ignorespaces}

%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\get@thisfootnoteX}
% The macro \cs{get@thisfootnote} command just saves the footnote number in the \cs{thisfootnote} macro, depending on the use of pairing environments.
%    \begin{macrocode}
\newcommand{\get@thisfootnoteX}[1]{%
    \ifl@dpairing%
      \protected@xdef\thisfootnote{\the\csname footnote#1@reading\endcsname}%
    \else%
      \protected@xdef\thisfootnote{\csuse{thefootnote#1}}%
    \fi%
}%
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\vbfnoteX}
% This command calls the correct footnote-inserting commands.
% 
%    \begin{macrocode}
\newcommand{\vbfnoteX}[3]{%
  \get@fnmarkX{#1}{#3}%
  \@nameuse{regvfootnote#1}{#1}{#2}%
}%

%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\get@fnmarkX}
% This command gets the correct footnote number when typesetting parallel texts.
%    \begin{macrocode}
\newcommand{\get@fnmarkX}[2]{%
  \ifboolexpr{bool{l@dpairing} or bool{l@dprintingpages} or bool{l@dprintingcolumns}}%
    {%
      \stepcounter{footnote#1@typeset}%
      \setcounter{footnote#1}{\value{footnote#1@typeset}}%
      \@namedef{@thefnmark#1}{\csuse{thefootnote#1}}%
        \immediate\write\@mainaux{%
          \global\csdef{footnote#1reading#2=typeset}{\the\csname c@footnote#1@typeset\endcsname}%
         }%
    }%
    {%
      \@namedef{@thefnmark#1}{#2}%
    }%
}
%
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\vnumfootnoteX}
% \changes{v0.7.0}{2005/02/18}{Removed extraneous space from \protect\cs{vnumfootnoteX}}
%    \begin{macrocode}
\newcommand{\vnumfootnoteX}[2]{%
  \ifnumberedpar@
    \edtext{}{\normalbfnoteX{#1}{#2}}%
  \else
    \def\this@footnoteX@reading{\the\csname footnote#1@reading\endcsname}%
    \@nameuse{regvfootnote#1}{#1}{#2}%
  \fi}

%    \end{macrocode}
% \end{macro}
%
%
%
% \begin{macro}{arrangementX@normal}
% \protect\cs{arrangementX@normal}\marg{series} initialises the settings for
% the \meta{series} footnotes. This should always be called for
% each series.
%    \begin{macrocode}
\newcommand*{\arrangementX@normal}[1]{%
  \csgdef{series@displayX#1}{normal}
  \expandafter\let\csname footstart#1\endcsname=\normalfootstartX
  \expandafter\newcount\csname prevpage#1@num\endcsname
  \@namedef{@footnotemark#1}{\normal@footnotemarkX{#1}}
  \@namedef{bodyfootmark#1}{\normalbodyfootmarkX{#1}}
  \expandafter\let\csname regvfootnote#1\endcsname=\normalvfootnoteX
  \expandafter\let\csname vfootnote#1\endcsname=\vnumfootnoteX
  \expandafter\let\csname footfmt#1\endcsname=\normalfootfmtX
  \@namedef{footfootmark#1}{\normalfootfootmarkX{#1}}
  \expandafter\let\csname footgroup#1\endcsname=\normalfootgroupX
  \expandafter\let\csname footnoterule#1\endcsname=\normalfootnoteruleX
  \count\csname footins#1\endcsname=1000
  \csxdef{default@footins#1}{1000}%Use to have note only for one side
  \dimen\csname footins#1\endcsname=\csuse{maxhnotesX@#1}
  \skip\csname footins#1\endcsname=\csuse{beforenotesX@#1}%
  \advance\skip\csname footins#1\endcsname by\csuse{afterruleX@#1}%
%    \end{macrocode}
% Additions for minipages.
%    \begin{macrocode}
  \ifnoledgroup@\else%
    \expandafter\let\csname mpvfootnote#1\endcsname=\mpnormalvfootnoteX
    \expandafter\let\csname mpfootgroup#1\endcsname=\mpnormalfootgroupX
    \count\csname mpfootins#1\endcsname=1000
    \dimen\csname mpfootins#1\endcsname=\csuse{maxhnotesX@#1}
    \skip\csname mpfootins#1\endcsname=\csuse{beforenotesX@#1}%
    \advance\skip\csname mpfootins#1\endcsname by\csuse{afterruleX@#1}%
  \fi
}

%    \end{macrocode}
% \end{macro}
%
% \subsubsection{Two columns footnotes}
%
%    The following macros set footnotes in two columns. It is assumed
% that the length of each footnote is less than the column width.
% 
% \begin{macro}{\arrangementX@twocol}
%    \begin{macrocode}
\newcommand*{\arrangementX@twocol}[1]{%
  \csgdef{series@displayX#1}{twocol}
  \expandafter\let\csname regvfootnote#1\endcsname=\twocolvfootnoteX
  \expandafter\let\csname footfmt#1\endcsname=\twocolfootfmtX
  \expandafter\let\csname footgroup#1\endcsname=\twocolfootgroupX
  \dimen\csname footins#1\endcsname=\csuse{maxhnotesX@#1}%
  \skip\csname footins#1\endcsname=\csuse{beforenotesX@#1}%
  \advance\skip\csname footins#1\endcsname by \csuse{afterruleX@#1}\relax%
  \twocolfootsetupX{#1}
  \ifnoledgroup@\else%
    \expandafter\let\csname mpvfootnote#1\endcsname=\mpnormalvfootnoteX
    \expandafter\let\csname mpfootgroup#1\endcsname=\mptwocolfootgroupX
    \skip\csname mpfootins#1\endcsname=\csuse{beforenotesX@#1}%
    \advance\skip\csname mpfootins#1\endcsname by\csuse{afterruleX@#1}
    \mptwocolfootsetupX{#1}
  \fi%
}

%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\twocolfootsetupX}
% \begin{macro}{\mptwocolfootsetupX}
%  \protect\cs{twocolfootsetupX}\marg{series}
%    \begin{macrocode}
\newcommand*{\twocolfootsetupX}[1]{%
  \count\csname footins#1\endcsname 500
  \csxdef{default@footins#1}{500}%Use this to confine the  notes to one side only
  \multiply\dimen\csname footins#1\endcsname by \tw@}
\newcommand*{\mptwocolfootsetupX}[1]{%
  \count\csname mpfootins#1\endcsname 500
  \multiply\dimen\csname mpfootins#1\endcsname by \tw@}

%    \end{macrocode}
% \end{macro}
% \end{macro}
%
% \begin{macro}{\twocolvfootnoteX}
% \protect\cs{twocolvfootnoteX}\marg{series}
%    \begin{macrocode}
\notbool{parapparatus@}{\newcommand*}{\newcommand}{\twocolvfootnoteX}[2]{%
  \insert\csname footins#1\endcsname\bgroup%
    \hsize=\expandafter\dimexpr\csuse{widthX@#1}\relax%
    \noindent\csuse{bhooknoteX@#1}%
    \csuse{notefontsizeX@#1}%
    \footsplitskips%
    \spaceskip=\z@skip \xspaceskip=\z@skip%
    \@nameuse{footfmt#1}{#1}{#2}\egroup}

%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\twocolfootfmtX}
%  \protect\cs{twocolfootfmtX}\marg{series}
%    \begin{macrocode}
\notbool{parapparatus@}{\newcommand*}{\newcommand}{\twocolfootfmtX}[2]{%
   \protected@edef\@currentlabel{%
       \@nameuse{@thefnmark#1}%
   }%
  \normal@pars%
  \hangindent=\csuse{hangindentX@#1}%
  \everypar{\hangindent=\csuse{hangindentX@#1}}%
  \hsize \csuse{hsizetwocolX@#1}%
 \nottoggle{parindentX@#1}{\parindent=\z@}{}%
  \tolerance=5000\relax%
  \par%
 \@tempdima=\parindent%
 \csuse{colalignX@#1}%
 \parindent=\@tempdima%
  {\csuse{notenumfontX@#1}\wrapped@footfootmarkX{#1}\strut%
    #2\strut\par}\allowbreak}

%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\twocolfootgroupX}
% \begin{macro}{\mptwocolfootgroupX}
% \protect\cs{twocolfootgroupX}\marg{series}
%    \begin{macrocode}
\newcommand*{\twocolfootgroupX}[1]{{\csuse{bhookgroupX@#1}\csuse{notefontsizeX@#1}
  \splittopskip=\ht\strutbox
  \expandafter
  \rigidbalanceX\csname footins#1\endcsname \tw@ \splittopskip}}

\newcommand*{\mptwocolfootgroupX}[1]{{%
  \vskip\skip\@nameuse{mpfootins#1}
  \ifl@dpairing\ifparledgroup%
    \leavevmode\marks\parledgroup@{begin}%
    \marks\parledgroup@series{#1}%
    \marks\parledgroup@type{footnoteX}%
  \fi\fi\normalcolor
  \ifparledgroup%
    \ifl@dpairing%
    \else%
      \setnoteswidthliketwocolumnsX@{#1}%
      \setnotesXpositionliketwocolumns@{#1}%
      \print@footnoteXrule{#1}%
    \fi%
  \else%
    \setnoteswidthliketwocolumnsX@{#1}%
    \setnotesXpositionliketwocolumns@{#1}%
    \print@footnoteXrule{#1}%
  \fi%
  \csuse{bhookgroupX@#1}%
  \splittopskip=\ht\strutbox
  \expandafter
  \rigidbalanceX\csname mpfootins#1\endcsname \tw@ \splittopskip}}

%    \end{macrocode}
% \end{macro}
% \end{macro}
%
% \subsubsection{Three columns footnotes}
%
%    The following macros set footnotes in three columns. It is assumed
% that the length of each footnote is less than the column width.
% 
%
% \begin{macro}{\arrangementX@threecol}
%    \begin{macrocode}
\newcommand*{\arrangementX@threecol}[1]{%
  \csgdef{series@displayX#1}{threecol}
  \expandafter\let\csname regvfootnote#1\endcsname=\threecolvfootnoteX
  \expandafter\let\csname footfmt#1\endcsname=\threecolfootfmtX
  \expandafter\let\csname footgroup#1\endcsname=\threecolfootgroupX
  \dimen\csname footins#1\endcsname=\csuse{maxhnotesX@#1}%
  \skip\csname footins#1\endcsname=\csuse{beforenotesX@#1}%
  \advance\skip\csname footins#1\endcsname by \csuse{afterruleX@#1}\relax%
  \threecolfootsetupX{#1}
  \ifnoledgroup@\else%
    \expandafter\let\csname mpvfootnote#1\endcsname=\mpnormalvfootnoteX
    \expandafter\let\csname mpfootgroup#1\endcsname=\mpthreecolfootgroupX
    \skip\csname mpfootins#1\endcsname=\csuse{beforenotesX@#1}%
    \advance\skip\csname mpfootins#1\endcsname by\csuse{afterruleX@#1}
    \mpthreecolfootsetupX{#1}
  \fi%
}

%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\threecolfootsetupX}
% \begin{macro}{\mpthreecolfootsetupX}
% \protect\cs{threecolfootsetupX}\marg{series}
%    \begin{macrocode}
\newcommand*{\threecolfootsetupX}[1]{%
  \count\csname footins#1\endcsname 333
  \csxdef{default@footins#1}{333}%Use this to confine the  notes to one side only
  \multiply\dimen\csname footins#1\endcsname by \thr@@}
\newcommand*{\mpthreecolfootsetupX}[1]{%
  \count\csname mpfootins#1\endcsname 333
  \multiply\dimen\csname mpfootins#1\endcsname by \thr@@}

%    \end{macrocode}
% \end{macro}
% \end{macro}
%
% \begin{macro}{\threecolvfootnoteX}
% \protect\cs{threecolvfootnoteX}\marg{series}\marg{text}
%    \begin{macrocode}
\notbool{parapparatus@}{\newcommand*}{\newcommand}{\threecolvfootnoteX}[2]{%
  \insert\csname footins#1\endcsname\bgroup%
    \hsize=\expandafter\dimexpr\csuse{widthX@#1}\relax%
    \noindent\csuse{bhooknoteX@#1}%
    \csuse{notefontsizeX@#1}
    \footsplitskips%
    \@nameuse{footfmt#1}{#1}{#2}\egroup}

%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\threecolfootfmtX}
% \protect\cs{threecolfootfmtX}\marg{series}
%    \begin{macrocode}
\notbool{parapparatus@}{\newcommand*}{\newcommand}{\threecolfootfmtX}[2]{%
   \protected@edef\@currentlabel{%
       \@nameuse{@thefnmark#1}%
   }%
  \hangindent=\csuse{hangindentX@#1}%
  \everypar{\hangindent=\csuse{hangindentX@#1}}%
  \normal@pars%
  \hsize \csuse{hsizethreecolX@#1}%
  \nottoggle{parindentX@#1}{\parindent=\z@}{}%
  \tolerance=5000\relax%
  \par%
 \@tempdima=\parindent%
  \csuse{colalignX@#1}%
  \parindent=\@tempdima%
  {\csuse{notenumfontX@#1}\wrapped@footfootmarkX{#1}\strut%
    #2\strut\par}\allowbreak}

%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\threecolfootgroupX}
% \begin{macro}{\mpthreecolfootgroupX}
% \protect\cs{threecolfootgroupX}\marg{series}
%    \begin{macrocode}
\newcommand*{\threecolfootgroupX}[1]{{\csuse{bhookgroupX@#1}\csuse{notefontsizeX@#1}
  \splittopskip=\ht\strutbox
  \expandafter
  \rigidbalanceX\csname footins#1\endcsname \thr@@ \splittopskip}}

\newcommand*{\mpthreecolfootgroupX}[1]{{%
  \vskip\skip\@nameuse{mpfootins#1}
  \ifl@dpairing\ifparledgroup
    \leavevmode\marks\parledgroup@{begin}%
    \marks\parledgroup@series{#1}%
    \marks\parledgroup@type{footnoteX}%
  \fi\fi\normalcolor
  \ifparledgroup%
    \ifl@dpairing%
    \else%
      \setnoteswidthliketwocolumnsX@{#1}%
      \setnotesXpositionliketwocolumns@{#1}%
      \print@footnoteXrule{#1}%
    \fi%
  \else%
    \setnoteswidthliketwocolumnsX@{#1}%
    \setnotesXpositionliketwocolumns@{#1}%
    \print@footnoteXrule{#1}%
  \fi%
  \csuse{bhookgroupX@#1}%
  \splittopskip=\ht\strutbox
  \expandafter
  \rigidbalanceX\csname mpfootins#1\endcsname \thr@@ \splittopskip}}

%    \end{macrocode}
% \end{macro}
% \end{macro}
%
% \subsubsection{Paragraphed footnotes}
%
%    The following macros set footnotes as one paragraph.
% 
% \begin{macro}{\arrangementX@threecol}
% \changes{v1.15.0}{2015/01/12}{Correct bug with paragraphed familiar footnotes setting.}
% \protect\cs{footparagraphX}\marg{series}
%    \begin{macrocode}
\newcommand*{\arrangementX@paragraph}[1]{%
  \csgdef{series@displayX#1}{paragraph}%
  \expandafter\newcount\csname #1prevpage@num\endcsname
  \expandafter\let\csname footstart#1\endcsname=\parafootstartX
  \expandafter\let\csname regvfootnote#1\endcsname=\para@vfootnoteX
  \expandafter\let\csname footfmt#1\endcsname=\parafootfmtX
  \expandafter\let\csname footgroup#1\endcsname=\para@footgroupX
  \expandafter\let\csname footnoterule#1\endcsname=\normalfootnoteruleX
  \count\csname footins#1\endcsname=1000
  \csxdef{default@footins#1}{1000}%Use this to confine the  notes to one side only
  \dimen\csname footins#1\endcsname=\csuse{maxhnotesX@#1}
  \skip\csname footins#1\endcsname=\csuse{beforenotesX@#1}%
  \advance\skip\csname footins#1\endcsname by\csuse{afterruleX@#1}%
  \para@footsetupX{#1}
  \ifnoledgroup@\else
    \expandafter\let\csname mpvfootnote#1\endcsname=\mppara@vfootnoteX
    \expandafter\let\csname mpfootgroup#1\endcsname=\mppara@footgroupX
    \count\csname mpfootins#1\endcsname=1000
    \dimen\csname mpfootins#1\endcsname=\csuse{maxhnotesX@#1}
    \skip\csname mpfootins#1\endcsname=\csuse{beforenotesX@#1}%
    \advance\skip\csname mpfootins#1\endcsname by\csuse{afterruleX@#1}%
  \fi
  }

%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\para@footsetupX}
% \protect\cs{para@footsetupX}\marg{series}
% \changes{v0.2.2}{2003/11/04}{Added \protect\cs{footfudgefiddle} to \protect\cs{para@footsetupX}}
% \changes{v1.13.0}{2014/09/16}{In \protect\cs{para@footsetupX}, use \protect\cs{columnwidth} instead of \protect\cs{hsize}}
%    \begin{macrocode}
\newcommand*{\para@footsetupX}[1]{{\csuse{bhookgroupX@#1}\csuse{notefontsizeX@#1}
  \setnoteswidthliketwocolumnsX@{#1}%
  \ifcsempty{widthX@#1}%
    {}%
    {\columnwidth=\expandafter\dimexpr\csuse{widthX@#1}\relax}%
  \dimen0=\baselineskip
  \multiply\dimen0 by 1024
  \divide\dimen0 by \columnwidth \multiply\dimen0 by \footfudgefiddle\relax%
  \expandafter
  \xdef\csname footfudgefactor#1\endcsname{%
    \expandafter\strip@pt\dimen0 }}}

%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\parafootstartX}
% \protect\cs{parafootstartX}\marg{series}
%    \begin{macrocode}
\newcommand*{\parafootstartX}[1]{%
    \ifdimequal{0pt}{\prenotesX@}{}%
      {%
      \iftoggle{prenotesX@}{%
            \togglefalse{prenotesX@}%
            \skip\csname footins#1\endcsname=%
              \dimexpr\csuse{prenotesX@}+\csuse{afterruleX@#1}\relax%
            }%
          {}%
      }%
  \leftskip=\z@
  \rightskip=\z@
  \nottoggle{parindentX@#1}{\parindent=\z@}{}%
  \vskip\skip\@nameuse{footins#1}%
  \setnoteswidthliketwocolumnsX@{#1}%
  \setnotesXpositionliketwocolumns@{#1}%
  \print@footnoteXrule{#1}%
  }

%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\para@vfootnoteX}
% \begin{macro}{\mppara@vfootnoteX}
% \protect\cs{para@vfootnoteX}\marg{series}\marg{text}
%    \begin{macrocode}
\newcommand*{\para@vfootnoteX}[2]{%
 \insert\csname footins#1\endcsname%
  \bgroup
    \csuse{notefontsizeX@#1}
    \footsplitskips
    \setbox0=\vbox{\hsize=\maxdimen%
      \let\bidi@RTL@everypar\@empty%
      \noindent\csuse{bhooknoteX@#1}%
      \@nameuse{footfmt#1}{#1}{#2}}%
    \setbox0=\hbox{\unvxhX{0}{#1}}%
    \dp0=\z@
    \ht0=\csname footfudgefactor#1\endcsname\wd0
    \box0
    \penalty0
  \egroup}
\newcommand*{\mppara@vfootnoteX}[2]{%
  \get@thisfootnoteX{#1}%
  \get@fnmarkX{#1}{\thisfootnote}%
  \edef\this@footnoteX@reading{\the\csname footnote#1@reading\endcsname}%
  \global\setbox\@nameuse{mpfootins#1}\vbox{%
    \unvbox\@nameuse{mpfootins#1}
    \csuse{notefontsizeX@#1}
    \footsplitskips
    \setbox0=\vbox{\hsize=\maxdimen%
      \let\bidi@RTL@everypar\@empty%
      \noindent\color@begingroup%
      \csuse{bhooknoteX@#1}%
      \@nameuse{footfmt#1}{#1}{#2}\color@endgroup}%
    \setbox0=\hbox{\unvxhX{0}{#1}}%
    \dp0=\z@
    \ht0=\csname footfudgefactor#1\endcsname\wd0
    \box0
    \penalty0}}

%    \end{macrocode}
% \end{macro}
% \end{macro}
% \begin{macro}{\unvxhX}
%    \begin{macrocode}
\newcommand*{\unvxhX}[2]{% 2th is optional for retro-compatibility
  \setbox0=\vbox{\unvbox#1%
    \global\setbox1=\lastbox}%
  \unhbox1
  \unskip            % remove \rightskip,
  \unskip            % remove \parfillskip,
  \unpenalty         % remove \penalty of 10000,
  \hskip\csuse{afternoteX@#2}}   % but add the glue to go between the notes

%    \end{macrocode}
% \end{macro}
% \begin{macro}{\parafootfmtX}
% \protect\cs{parafootfmtX}\marg{series}
%    \begin{macrocode}
\newcommand*{\parafootfmtX}[2]{%
   \protected@edef\@currentlabel{%
       \@nameuse{@thefnmark#1}%
   }%
  \insertparafootsepX{#1}%
  \ledsetnormalparstuff@common%
  {\csuse{notenumfontX@#1}%
   \csuse{notenumfontX@#1}%
   \wrapped@footfootmarkX{#1}%
   \strut%
    #2\penalty-10}}

%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\para@footgroupX}
% \begin{macro}{\mppara@footgroupX}
% \protect\cs{para@footgroupX}\marg{series}
%    \begin{macrocode}
\newcommand*{\para@footgroupX}[1]{%
  \hsize=\expandafter\dimexpr\csuse{widthX@#1}\relax%
  \unvbox\csname footins#1\endcsname
  \ifcsstring{raggedX@#1}{L}{\RaggedLeft}{}%
  \ifcsstring{raggedX@#1}{R}{\RaggedRight}{}%
  \makehboxofhboxes
  \setbox0=\hbox{\unhbox0 \removehboxes}%
  \csuse{bhookgroupX@#1}
  \csuse{notefontsizeX@#1}
  \unhbox0\par}

\newcommand*{\mppara@footgroupX}[1]{{%
  \setnoteswidthliketwocolumnsX@{#1}%
  \vskip\skip\@nameuse{mpfootins#1}
  \ifl@dpairing\ifparledgroup
    \leavevmode%
    \leavevmode\marks\parledgroup@{begin}%
    \marks\parledgroup@series{#1}%
    \marks\parledgroup@type{footnoteX}%
  \fi\fi\normalcolor
  \ifparledgroup%
    \ifl@dpairing%
    \else%
      \setnoteswidthliketwocolumnsX@{#1}%
      \setnotesXpositionliketwocolumns@{#1}%
      \print@footnoteXrule{#1}%
    \fi%
  \else%
      \setnoteswidthliketwocolumnsX@{#1}%
      \setnotesXpositionliketwocolumns@{#1}%
      \print@footnoteXrule{#1}%
  \fi%
  \unvbox\csname mpfootins#1\endcsname
  \ifcsstring{raggedX@#1}{L}{\RaggedLeft}{}%
  \ifcsstring{raggedX@#1}{R}{\RaggedRight}{}%
  \makehboxofhboxes
  \setbox0=\hbox{\unhbox0 \removehboxes}%
  \csuse{bhookgroupX@#1}%
  \csuse{notefontsizeX@#1}
  \unhbox0\par}}

%    \end{macrocode}
% \end{macro}
% \end{macro}
% \paragraph{Insertion of the footnotes separator}
% The command \protect\cs{insertparafootsepX}\marg{series} must be called at the beginning of \protect\cs{parafootftmX}. 
% \begin{macro}{\prevpage@num} 
% \begin{macro}{\Xinsertparafootsep}
%    \begin{macrocode}
\newcommand{\insertparafootsepX}[1]{%
   \ifnumequal{\csuse{prevpage#1@num}}{\page@num}%
     {\csuse{parafootsepX@#1}}%
     {}%
}
%    \end{macrocode}
% \end{macro}
% \end{macro}
% \subsection{Wrapping footnote marks in hyperlink}
% \begin{macro}{\wrapped@footfootmarkX}
% \cs{wrapped@footfootmarkX} prints the footnote mark of the footpage, wrapped in \package{hyperref} package's commands, if needed.
%    \begin{macrocode}
\newcommand{\wrapped@footfootmarkX}[1]{%
  \ifdefined\hypertarget%
    \hyperlink%
        {@bodyfootmark#1@\this@footnoteX@reading}%
        {\@nameuse{footfootmark#1}}%
    \Hy@raisedlink{%
      \hypertarget%
        {@footnotemark#1@\this@footnoteX@reading}%
        {}%
      }%
  \else%
    \@nameuse{footfootmark#1}%
  \fi%
}%
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\wrapped@bodyfootmarkX}
% \cs{wrapped@bodyfootmarkX} prints the footnote mark of the text body, wrapped in \package{hyperref} package's commands, if needed.
%    \begin{macrocode}
\newcommand{\wrapped@bodyfootmarkX}[1]{%
  \ifdefined\hypertarget%
    \hyperlink%
        {@footnotemark#1@\expandafter\the\csname footnote#1@reading\endcsname}%
        {\@nameuse{bodyfootmark#1}}%
    \Hy@raisedlink{%
      \hypertarget%
        {@bodyfootmark#1@\expandafter\the\csname footnote#1@reading\endcsname}%
        {}%
      }%
  \else%
    \@nameuse{bodyfootmark#1}%
  \fi%
}%
%    \end{macrocode}
% \end{macro}
% \section{Code common to both critical and familiar footnote in normal arrangement}
% \protect\cs{par} should always be redefined to \protect\cs{endgraf} within
% the format macro (this is what \protect\cs{normal@pars} does),
% to override tricky material in the main text
% to get the lines numbered automatically (as set up by
% \protect\cs{autopar}, for example).
%
% In the case of footnote arranged in a ``normal'' way,  we also must set some setting for paragraph indent and text direction when using \LuaLaTeX.
%
% That why we have defined \protect\cs{ledsetnormalparstuff@common} in order to make this setting for both familiar and critical notes.
% This command is called by command to make specific setting to critical or familiar footnote.
%
% \begin{macro}{\ledsetnormalparstuff@common}
% \begin{macro}{\Xledsetnormalparstuff}
% \begin{macro}{\ledsetnormalparstuffX}
% 
% \changes{v1.4.0}{2012/11/16}{Direction of footnotes with polyglossia.}
% \changes{v1.21.0}{2015/04/13}{\protect\cs{ledsetnormalparstuff} is deprecated and becomes \protect\cs{ledsetnormalparstuffX} and \protect\cs{Xledsetnormalparstuff}.}
% \changes{v2.1.3}{2015/09/05}{Replaced \protect\cs{noindent} with \protect\cs{parindent} set to 0pt.}
%    \begin{macrocode} 
\newcommand*{\ledsetnormalparstuff@common}{%
  \ifluatex%
     \textdir\footnote@luatextextdir%
   \pardir\footnote@luatexpardir%
  \fi%
  \csuse{\csuse{footnote@dir}}%
  \normal@pars%
  \parfillskip \z@ \@plus 1fil}%

\newcommand*{\Xledsetnormalparstuff}[1]{%
  \ledsetnormalparstuff@common%
  \nottoggle{Xparindent@#1}{\parindent=\z@}{\hspace{\parindent}}%
}%

\newcommand*{\ledsetnormalparstuffX}[1]{%
  \ledsetnormalparstuff@common%
  \nottoggle{parindentX@#1}{\parindent=\z@}{\hspace{\parindent}}%
}%
%    \end{macrocode}
% \end{macro}
% \end{macro}
% \end{macro}
% \section{Footnotes' width for two columns}\label{width2columns}
% We define here some commands which make sense only with \parpackage, but must be called when defining notes parameters.
% These commands change the width of block notes to allow them to have the same size than two parallel columns.
% \begin{macro}{\old@hsize}
% \begin{macro}{\setXnoteswidthliketwocolumns@}
% \begin{macro}{\setnoteswidthliketwocolumnsX@}
% These two commands are called at the beginning of critical or familiar notes groups.
% They set, if the option is enabled, the \protect\cs{hsize}. They are also called at the on the setup for paragraphed notes.
%    \begin{macrocode}

\newdimen\old@hsize%
\AtBeginDocument{\old@hsize=\hsize}%

\newcommand{\setXnoteswidthliketwocolumns@}[1]{%
  \global\let\hsize@fornote=\hsize%
  \global\old@hsize=\hsize%
  \let\old@columwidth=\columnwidth%
  \iftoggle{Xnoteswidthliketwocolumns@#1}%
    {%
    \csuse{setwidthliketwocolumns@\columns@position}%
    \global\let\hsize@fornote=\hsize%
    }%
    {}%
  \let\hsize=\hsize@fornote%
  \let\columnwidth=\old@columwidth%
}%

\newcommand{\setnoteswidthliketwocolumnsX@}[1]{%
  \global\let\hsize@fornote=\hsize%
  \global\old@hsize=\hsize%
  \let\old@columwidth=\columnwidth%
  \iftoggle{noteswidthliketwocolumnsX@#1}%
    {%
    \csuse{setwidthliketwocolumns@\columns@position}%
    \global\let\hsize@fornote=\hsize%
    }%
    {}%
  \let\hsize=\hsize@fornote%
  \let\columnwidth=\old@columwidth%
}%

%    \end{macrocode}
% \end{macro}
% \end{macro}
% \end{macro}
% \begin{macro}{\setXnotespositionliketwocolumns@}
% \begin{macro}{\setnotesXpositionliketwocolumns@}
% These two commands set the position of the critical / familiar
% footnotes, depending on the hooks 
% \verb+Xnoteswidthliketwocolumns+ and \verb+noteswidthliketwocolumnsX+. 
% They call commands which are defined only in \parpackage, because this feature has no sens without \parpackage.
%    \begin{macrocode}
\newcommand{\setXnotespositionliketwocolumns@}[1]{%
  \iftoggle{Xnoteswidthliketwocolumns@#1}{%
    \csuse{setnotespositionliketwocolumns@\columns@position}%
  }{}%
}%

\newcommand{\setnotesXpositionliketwocolumns@}[1]{%
  \iftoggle{noteswidthliketwocolumnsX@#1}{%
    \csuse{setnotespositionliketwocolumns@\columns@position}%
  }{}%
}%

%    \end{macrocode}
% \end{macro}
% \end{macro}
% \section{Footnotes' order}
% \begin{macro}{\fnpos}
% \begin{macro}{\mpfnpos}
% \begin{macro}{\@fnpos}
% \begin{macro}{\@mpfnpos}
% The \protect\cs{fnpos} and \protect\cs{mpfnpos} simply place their arguments in \protect\cs{@fnpos} and \protect\cs{@mpfnpos}, which will be used later in the output routine.
%    \begin{macrocode}
\def\@fnpos{familiar-critical}
\def\@mpfnpos{critical-familiar}
\newcommand{\fnpos}[1]{\xdef\@fnpos{#1}}
\newcommand{\mpfnpos}[1]{\xdef\@mpfnpos{#1}}
%    \end{macrocode}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \section{Footnotes' rule}
% Because the footnotes' rules can be shifted to the right when footnotes are set like two columns, we do not print them directly, but we put them in a \protect\cs{vbox}.   
%
% \begin{macro}{\print@Xfootnoterule}
% \begin{macro}{\print@footnoteXrule}
% \changes{v1.21.0}{2015/04/13}{Code refactoring: the spaces after the footnote rules are directly managed in \protect\cs{print@Xfootnoterule} and \protect\cs{print@footnoteXrule}}
%    \begin{macrocode}
\newcommand{\print@Xfootnoterule}[1]{%
  \vskip-\csuse{Xafterrule@#1}%Because count in \dimen\csuse{#1footins}
  \nointerlineskip%
  \moveleft-\leftskip\vbox{\csuse{#1footnoterule}}%
  \nointerlineskip%
  \vskip\csuse{Xafterrule@#1}%
}%

\newcommand{\print@footnoteXrule}[1]{%
  \vskip-\csuse{afterruleX@#1}%Because count in \dimen\csuse{footins#1}
  \nointerlineskip%
  \moveleft-\leftskip\vbox{\csuse{footnoterule#1}}%
  \nointerlineskip%
  \vskip\csuse{afterruleX@#1}%
}%

%    \end{macrocode}
% \end{macro}
% \end{macro}
% \section{Specific skip for first series of footnotes}\label{skipfirstseries}
% \subsubsection{Overview}
% \protect\cs{Xbeforenotes} inserts a specific skip for the first series of notes in a page.
% As we can't know in advance which series will be the first, we call \protect\cs{prepare@preXnotes} before inserting any critical notes, in order to prevent page number overlapping. 
% \begin{enumerate}
%   \item If it is the first note of the current page, it changes the footnote skip for the series to the value specified to \protect\cs{Xbeforenotes}. It also keeps the series of the note as the first one of the current page.
%   \item If it is not the first note of the current page:
%   \begin{itemize}
%     \item If the current series is printed after the series kept as the first of the current page, then nothing happens.
%     \item If the current series is printed before the series kept as the first of the current page, then it changes the footnote skip of the current series to the value normally used by the series which was marked as the first of the page. It also keeps the current series as the new first one of the current page.
%   \end{itemize}
% \end{enumerate}
% 
%
% For example, suppose the series order is A,B. We call first a \protect\cs{Bfootnote} and a \protect\cs{Afootnote}. The only skips used are, finally, the skip specific to the first series of the page, and the skip for the B series. If we have not called \protect\cs{Afootnote}, the only skip used is the skip specific to the first series of the page.
% 
% That is perfect. 
%
%
% The series skip and the first series of the current page are reset before the footnotes are printed. Then, the footstart macros manage the problem of the first series of the page.
%
% After the rule, the space which is defined by \protect\cs{Xafterrule} does not depend on whether the series is the first one of the page or not. So we use its normal value for each series.
%
% And now, implementation !
% \subsubsection{User level command}
% \begin{macro}{\preXnotes@}
% \begin{macro}{\preXnotes}
% \changes{v1.1.0}{2012/09/25}{New skip \protect\cs{preXnotes@}}
% \changes{v1.2.0}{2012/10/08}{Debug in familiar footnotes (bug introduced by v1.1).}
% If user redefines \protect\cs{preXnotes@}, via \protect\cs{preXnotes} to a value greater than 0~pt,
% this skip will be added before first series notes
% instead of the notes skip.
%    \begin{macrocode}
\newtoggle{preXnotes@}
\toggletrue{preXnotes@}
\newcommand{\preXnotes@}{0pt}
\newcommand*{\preXnotes}[1]{\renewcommand{\preXnotes@}{#1}}
%    \end{macrocode}
% \end{macro}
% \end{macro}
% The same, but for familiar footnotes.
% \begin{macro}{\preXnotes}
% \begin{macro}{\preXnotes@}
%    \begin{macrocode}
\newtoggle{prenotesX@}
\toggletrue{prenotesX@}
\newcommand{\prenotesX@}{0pt}
\newcommand*{\prenotesX}[1]{\renewcommand{\prenotesX@}{#1}}
%    \end{macrocode}
% \end{macro}
% \end{macro}
%
% \subsubsection{Internal commands}
% \begin{macro}{firstXseries@}
% \begin{macro}{prepare@preXnotes}
%    \begin{macrocode}
\gdef\firstXseries@{}
\newcommand{\prepare@preXnotes}[1]{%
  \ifdimequal{0pt}{\preXnotes@}%
  {}%
  {%
    \IfStrEq{\firstXseries@}{}{%
      \global\skip\csuse{#1footins}=\preXnotes@%
      \global\advance\skip\csname #1footins\endcsname by\csuse{Xafterrule@#1}%
      \gdef\firstXseries@{#1}%
    }%
    {%
     \ifseriesbefore{#1}{\firstXseries@}%
       {%
       \global\skip\csuse{#1footins}=\csuse{Xbeforenotes@\firstXseries@}%
       \global\advance\skip\csname #1footins\endcsname by\csuse{Xafterrule@#1}%
       \gdef\firstXseries@{#1}%
       }%
       {}%
    }%
  }%
}
%    \end{macrocode}
% \end{macro}
% \end{macro}
%
% The same thing is required for familiar notes and \protect\cs{prenotesX}.
% \begin{macro}{firstseriesX@}
% \begin{macro}{prepare@prenotesX}
%    \begin{macrocode}
\gdef\firstseriesX@{}
\newcommand{\prepare@prenotesX}[1]{%
  \ifdimequal{0pt}{\prenotesX@}%
  {}%
  {%
    \IfStrEq{\firstseriesX@}{}{%
      \global\skip\csuse{footins#1}=\prenotesX@%
      \global\advance\skip\csname footins#1\endcsname by\csuse{afterruleX@#1}%
      \gdef\firstseriesX@{#1}%
    }%
    {%
     \ifseriesbefore{#1}{\firstseriesX@}%
       {%
       \global\skip\csuse{footins#1}=\csuse{beforenotesX@\firstseriesX@}%
       \global\advance\skip\csname footins#1\endcsname by\csuse{afterruleX@#1}%
       \gdef\firstXseries@{#1}%
       }%
       {}%
    }%
  }%
}
%    \end{macrocode}
% \end{macro}
% \end{macro}
% \section{Endnotes}
% \changes{v1.8.1}{2013/12/15}{Debug endnotes when more than one series is used (change the position where tools for endnotes are defined).}
% \changes{v1.14.0}{2014/10/20}{Debug spurious characters before endnotes.}
% \label{endnotes}\relax
%
% First, check the noend option.
%    \begin{macrocode}
\ifbool{noend@}{}{%Used instead of \ifnoend@ to prevent expansion problem
%    \end{macrocode}
%
% \begin{macro}{\l@dend@open}
% \begin{macro}{\l@dend@close}
% \protect\cs{l@dend@open} and \protect\cs{l@dend@close} are the
% macros that are used to open and close the endnote file. Note that
% all our writing to this file is \protect\cs{immediate}: all page and
% line numbers for the endnotes are generated by the same mechanism
% we use for the footnotes, so that there is no need to defer any
% writing to catch information from the output routine.
% The argument of these two command is the series letter. 
%    \begin{macrocode}
\newcommand{\l@dend@open}[1]{%
  \global\booltrue{l@dend@#1}%
  \expandafter\immediate%
    \expandafter\openout%
      \csname l@d@#1end\endcsname%
      =\jobname.#1end\relax%
}%
\newcommand{\l@dend@close}[1]{%
  \global\boolfalse{l@dend@#1}%
  \expandafter\immediate%
    \expandafter\closeout\csname l@d@#1end\endcsname%
}%

%    \end{macrocode}
% \end{macro}
% \end{macro}
%
% \begin{macro}{\l@dend@stuff}
% \protect\cs{l@dend@stuff} is used by \protect\cs{beginnumbering} to
% do everything that is necessary for the endnotes at the
% start of each section: it opens the \protect\cs{l@d@end} file, if necessary,
% and writes the section number to the endnote file.
%    \begin{macrocode}
\newcommand{\l@dend@stuff}{%
 \def\do##1{%
   \ifbool{l@dend@##1}{}%
     {\l@dend@open{##1}}%
   \expandafter\immediate\expandafter\write\csname l@d@##1end\endcsname{\string\l@d@section{\the\section@num}}%
   }%
 \dolistloop{\@series}%
}%

%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\endprint}
% \begin{macro}{\l@d@section}
% The \protect\cs{endprint} here is nearly identical in its
% functioning to \protect\cs{normalfootfmt}.
%
% The endnote file also contains \protect\cs{l@d@section} commands, which
% supply the section numbers from the main text; standard \macpackage{} does
% nothing with this information, but it is there if you want to write
% custom macros to do something with it.
% \changes{v1.18.0}{2015/02/23}{Option parapparatus works for endnotes.}
% \changes{v1.21.0}{2015/04/13}{\protect\cs{endnotes} take five arguments.}
% \changes{v2.5.0}{2015/11/13}{\protect\cs{endnotes} take six arguments.}
% \changes{v2.7.0}{2015/11/13}{\protect\cs{endnotes} take seven arguments.}
% Arguments are:
% \begin{itemize}
%   \item \verb+#1+ Line numbers and font selection.
%   \item \verb+#2+ Lemma.
%   \item \verb+#3+ Note content.
%   \item \verb+#4+ Series.
%   \item \verb+#5+ Optional argument of \protect\cs{Xendnote}.
%   \item \verb+#6+ Side (L or R).
%   \item \verb+#7+ Label for cross-referencing.
% \end{itemize}
%    \begin{macrocode}
\global\notbool{parapparatus@}{}{\long}\def\endprint#1#2#3#4#5#6#7{{%
  \hangindent=\csuse{Xendhangindent@#4}%
  \ifXendinsertsep@%
    \hskip\csuse{Xendafternote@#4}%
    \csuse{Xendsep@#4}%
  \else%
    \iftoggle{Xendparagraph@#4}%
      {\global\Xendinsertsep@true}%
      {}%
  \fi%
  \xdef\@currentseries{#4}%
  \def\do##1{%
    \setkeys[mac]{truefootnoteoption}{##1}%
  }%
  \notblank{#5}{\docsvlist{#5}}{}%
  \csuse{Xendbhooknote@#4}%
  \csuse{Xendnotefontsize@#4}%
  \IfStrEq{#6}{R}{\ledRcol@true}{}%
  \def\@this@crossref@start{#7:start}%
  \def\@this@crossref@end{#7:end}%
  \printlineendnote{#1}{#4}%
  \IfStrEq{#6}{R}{\ledRcol@false}{}%
  \undef\@this@crossref@start%
  \undef\@this@crossref@end%
  \nottoggle{Xendlemmadisablefontselection@#4}%
    {\select@lemmafont#1|{\csuse{Xendlemmafont@#4}#2}}%
    {{\csuse{Xendlemmafont@#4}#2}}%
  \ifboolexpr{%
    togl {nosep@}%
    or test{\ifcsempty{Xendlemmaseparator@#4}}%
    }%
    {\hskip\csuse{Xendinplaceoflemmaseparator@#4}}%
    {\nobreak%
     \hskip\csuse{Xendbeforelemmaseparator@#4}%
     \csuse{Xendlemmaseparator@#4}%
     \hskip\csuse{Xendafterlemmaseparator@#4}%
    }%
  #3%
  \nottoggle{Xendparagraph@#4}{\par}{}%
  \def\do##1{%
    \setkeys[mac]{falsefootnoteoption}{##1}%
  }%
  \notblank{#5}{\docsvlist{#5}}{}%
}}%

\let\l@d@section=\@gobble

%    \end{macrocode}
% \end{macro}
% \end{macro}
% \begin{macro}{\printlineendnote}
% This macro controls, in endnote, whether the line number is printed or not, according to the series options. Its first argument is the information about lines; its second is the series of the footnote.
%    \begin{macrocode}
\newcommand{\printlineendnote}[2]{%
  \l@dp@rsefootspec#1|%
  \iftoggle{Xendnumberonlyfirstintwolines@#2}{%
       \edef\lineinfo@{\l@dparsedstartpage - \l@dparsedstartline - \l@dparsedstartsub - \l@dparsedendpage - \l@dparsedendline - \l@dparsedendsub}%
       }%
       {%
       \edef\lineinfo@{\l@dparsedstartpage - \l@dparsedstartline - \l@dparsedstartsub}%
       }%
  \ifboolexpr{%
    togl {nonum@}%
    or togl {Xendnonumber@#2}%
    }%
    {\hspace{\csuse{Xendinplaceofnumber@#2}}}%
    {%
      \iftoggle{Xendnumberonlyfirstinline@#2}%
        {\ifcsdef{prevendline#2}%
          {\ifcsequal{prevendline#2}{lineinfo@}%
            {%
            \csuse{Xendbhookinplaceofnumber@#2}%
            \ifcsempty{Xendsymlinenum@#2}%
              {\hspace{\csuse{Xendinplaceofnumber@#2}}}%
              {\printsymlineendnotearea{#2}}%
            \csuse{Xendahookinplaceofnumber@2}%
            }%
            {\printlineendnotearea{#1}{#2}}}%
          {\printlineendnotearea{#1}{#2}}%
        }%
        {\printlineendnotearea{#1}{#2}}%We keep every time line
    \csxdef{prevendline#2}{\lineinfo@}%
    }%
}%
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\printsymlineendnotearea}
%    \begin{macrocode}
\newcommand{\printsymlineendnotearea}[1]{%
  \hspace{\csuse{Xendbeforesymlinenum@#1}}%
  \csuse{Xendnotenumfont@#1}%
  \ifdimequal{\csuse{Xendboxsymlinenum@#1}}{\z@}%
     {\csuse{Xendsymlinenum@#1}}%
     {\hbox to \csuse{Xendboxsymlinenum@#1}%
       {\csuse{Xendsymlinenum@#1}\hfill}%
     }%
  \hspace{\csuse{Xendaftersymlinenum@#1}}%
}%
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\printlineendnotearea}
%
% This macro prints the space before the line number, changes the font, then prints the line number and the space after it.
% It is called by \protect\cs{endprint}
% depending of the options about repeating line numbers.
% The first argument is line information, the second is the notes series (A, B, C,  etc.)
%    \begin{macrocode}
\newcommand{\printlineendnotearea}[2]{%
  \csuse{Xendbhooklinenumber@#2}%
  \hspace{\csuse{Xendbeforenumber@#2}}%
  \bgroup%
    \csuse{Xendnotenumfont@#2}%
    \ifdimequal{\csuse{Xendboxlinenum@#2}}{0pt}%
      {\printendlines#1||\ifledRcol@\@Rlineflag\fi}%
      {\leavevmode%
       \hbox to \csuse{Xendboxlinenum@#2}%
       {%
       \IfSubStr{RC}{\csuse{Xendboxlinenumalign@#2}}{\hfill}{}%
       \printendlines#1||\ifledRcol@\@Rlineflag\fi%
       \IfSubStr{LC}{\csuse{Xendboxlinenumalign@#2}}{\hfill}{}%
      }}%
  \egroup%
  \hspace{\csuse{Xendafternumber@#2}}%
  \csuse{Xendahooklinenumber@#2}%
}%
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\doendnotes}
% \begin{macro}{\ifXendinsertsep@}
% \protect\cs{doendnotes} is
% the command you use to print one series of endnotes; it
% takes one argument: the series letter of the note series you want
% to print.
% \protect\cs{Xendinsertsep@} is set to true at the first note of the series, and to false at the last one.
%    \begin{macrocode}
\newif\ifXendinsertsep@%
\newcommand*{\doendnotes}[1]{%
  \l@dend@close{#1}%
   \begingroup
      \makeatletter
      \expandafter\let\csname #1end\endcsname=\endprint
      \input\jobname.#1end%
      \global\Xendinsertsep@false%
   \endgroup}
%    \end{macrocode}
% \end{macro}
% \end{macro}
% \begin{macro}{\doendnotesbysection}
% \protect\cs{doendnotesbysection} is a variant of the previous macro.
% While \protect\cs{doendnotes} print endnotes for all of numbered sections 
% \protect\cs{doendnotesbysection} print the endnotes for the first numbered section at its first call for a series, then for the second section at its second call for the same series, then for the third section at its third call for the same series, and so on.
%    \begin{macrocode}
\newcommand*{\doendnotesbysection}[1]{%
 \l@dend@close{#1}%
 \global\expandafter\advance\csname #1end@bysection\endcsname by 1%
 \begingroup%
    \makeatletter%
    \def\l@d@section##1{%
      \ifnumequal{##1}{\csname #1end@bysection\endcsname}%
        {\cslet{#1end}{\endprint}}%
        {\cslet{#1end}{\@gobblefive}}%
    }%
    \input\jobname.#1end%
    \global\Xendinsertsep@false%
 \endgroup%
}%
%    \end{macrocode}
% \end{macro}
% We close now the conditional period, which depends on  \cs{ifnoend@}, because the following commands can be used by other commands than those speicific to endnotes.
%    \begin{macrocode}
}%
%    \end{macrocode}
% \begin{macro}{\setprintendlines}
% The \protect\cs{printendlines} macro is similar to \protect\cs{printlines} but is
% for printing endnotes rather than footnotes. 
%
%    The principal difference between foot- and endnotes is that footnotes
% are printed on the page where they are specified but endnotes
% are printed at a different point in the document. We need an indication
% of the source of an endnote; \protect\cs{setprintendlines} provides this
% by always printing the page number. The coding is slightly simpler than
% \protect\cs{setprintlines}.
%
% First of all, we print the second page number only if
% the ending page number is different
% from the starting page number.\label{printendlines}
% \changes{v0.7.0}{2005/02/18}{Added \protect\cs{setprintendlines} for use by
%              \protect\cs{printendlines}}
%    \begin{macrocode}
\newcommand*{\setprintendlines}[6]{%
  \l@d@pnumfalse \l@d@dashfalse 
  \ifnum#4=#1 \else
    \l@d@pnumtrue 
    \l@d@dashtrue
  \fi
%    \end{macrocode}
%
% We print the ending line number if\/: (1)~we are printing the ending
% page number, or (2)~it is different from the starting line number.
%    \begin{macrocode}
  \ifl@d@pnum \l@d@elintrue \else \l@d@elinfalse \fi
  \ifnum#2=#5 \else
      \l@d@elintrue
      \l@d@dashtrue
  \fi
%    \end{macrocode}
%
% We print the starting sub-line if it is nonzero.
%    \begin{macrocode}
  \l@d@ssubfalse
  \ifnum#3=0 \else
      \l@d@ssubtrue
  \fi
%    \end{macrocode}
%
% We print the ending sub-line if it is nonzero and: (1)~it is different
% from the starting sub-line number, or (2)~the ending line number is
% being printed.
%    \begin{macrocode}
  \l@d@eslfalse
  \ifnum#6=0 \else
      \ifnum#6=#3
         \ifl@d@elin \l@d@esltrue \else \l@d@eslfalse \fi
      \else
         \l@d@esltrue
         \l@d@dashtrue
      \fi
  \fi%
%    \end{macrocode}
%    \begin{macrocode}
  \ifl@d@dash%
    \ifboolexpr{togl{fulllines@} or test{\ifcsempty{Xendtwolines@\@currentseries}}}%
      {}%
      {%
      \setistwofollowinglines{#1}{#2}{#4}{#5}%
        \ifboolexpr{%
          (%
               togl {Xendtwolinesbutnotmore@\@currentseries}%
               and not% 
                 (%
                  bool {istwofollowinglines@}%              
                 )%
          )%
          or% 
          (%
             (not test{\ifnumequal{#1}{#4}})%
               and togl{Xendtwolinesonlyinsamepage@\@currentseries}%
             )%
          }%
          {}%
          {%
          \l@d@dashfalse%
          \l@d@Xtwolinestrue%
          \l@d@elinfalse%
          \l@d@eslfalse%
          \ifcsempty{Xendmorethantwolines@\@currentseries}%
            {}%
            {\ifistwofollowinglines@\else%
              \l@d@Xmorethantwolinestrue%
             \fi%
            }%
          }%
      }%
  \fi%
%    \end{macrocode}
% End of \protect\cs{setprintendlines}.
%    \begin{macrocode}
}%
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\printendlines}
% Now we are ready to print it all. 
% \changes{v0.3.0}{2004/02/14}{Added \protect\cs{linenumr@p} and \protect\cs{sublinenumr@p}
%              to \protect\cs{printendlines}}
%    \begin{macrocode}
\def\printendlines#1|#2|#3|#4|#5|#6|#7|#8|{\begingroup
  \setprintendlines{#1}{#2}{#3}{#4}{#5}{#6}%
%    \end{macrocode}
% The only subtlety left here is when to print a period between
% numbers. But the only instance in which this is tricky is for the
% ending sub-line number: it could be coming after the starting
% sub-line number (in which case we want only the dash) or after an
% ending line number (in which case we need to insert a period).
%
% So, first, print the start lines.
%    \begin{macrocode}
  \ifdimequal{\csuse{Xendboxstartlinenum@\@currentseries}}{0pt}%
    {\bgroup}%
    {\leavevmode\hbox to \csuse{Xendboxstartlinenum@\@currentseries}\bgroup\hfill}%
  \wrap@edcrossref{\@this@crossref@start}{\printnpnum{#1}}%
  \ifl@d@dash%
   \ifl@d@pnum%
    \csuse{Xendlineprefixsingle@\@currentseries}%
   \else%
    \ifcsempty{Xendlineprefixmore@\@currentseries}%
      {\csuse{Xendlineprefixsingle@\@currentseries}}
      {\csuse{Xendlineprefixmore@\@currentseries}}%
   \fi%
  \else%
   \csuse{Xendlineprefixsingle@\@currentseries}%
  \fi%
  \wrap@edcrossref{\@this@crossref@start}{\linenumrep{#2}}%
  \iftoggle{Xendlineflag@\@currentseries}{\ifledRcol@\@Rlineflag\fi}{}%
  \ifl@d@ssub%
    \csuse{Xendsublinesep@\@currentseries}% 
    \wrap@edcrossref{\@this@crossref@start}{\sublinenumrep{#3}}%
  \fi%
  \egroup%
%    \end{macrocode}
% And now, print the dash + the end line number, or the line number range symbol.
%    \begin{macrocode}
  \ifdimequal{\csuse{Xendboxendlinenum@\@currentseries}}{0pt}%
    {\bgroup}%
    {\hbox to \csuse{Xendboxendlinenum@\@currentseries}\bgroup}%
  \ifl@d@Xtwolines%
    \ifl@d@Xmorethantwolines%
      \csuse{Xendmorethantwolines@\@currentseries}%
    \else%
      \csuse{Xendtwolines@\@currentseries}%
    \fi%
  \else%
    \ifl@d@dash%
      \ifdefined\linerangesep@%
        \linerangesep@%
      \else%
        \csuse{Xendlinerangeseparator@\@currentseries}%
      \fi%
    \fi%
    \ifl@d@pnum%
     \wrap@edcrossref{\@this@crossref@end}\printnpnum{#4}%
    \fi%
    \ifl@d@elin%
      \ifl@d@pnum\csuse{Xendlineprefixsingle@\@currentseries}\fi%
      \wrap@edcrossref{\@this@crossref@end}{\linenumrep{#5}}%
      \iftoggle{Xendlineflag@\@currentseries}{\ifledRcol@\@Rlineflag\fi}{}%
    \fi%
    \ifl@d@esl%
      \ifl@d@elin% 
        \csuse{Xendsublinesep@\@currentseries}%
      \fi% 
      \wrap@edcrossref{\@this@crossref@end}{\sublinenumrep{#6}}%
    \fi%
  \fi%
  \ifdimequal{\csuse{Xendboxendlinenum@\@currentseries}}{0pt}%
    {}%
    {\hfill}%Prevent underfull hbox
  \egroup%
  \endgroup%
}%

%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\printnpnum}
% A macro to print a page number in an endnote. Should not be override anymore
%    \begin{macrocode}
\newcommand*{\printnpnum}[1]{\csuse{Xendbeforepagenumber@\@currentseries}#1\csuse{Xendafterpagenumber@\@currentseries}}

%    \end{macrocode}
% \end{macro}
%
%
% \section{Generate series of notes}%
% In this section, X means the name of the series (A, B etc.)
% \begin{macro}{\series}
% \protect\cs{series}\protect\cs{series} creates one more new series. It is a public command, which just loops on the private command \protect\cs{newseries@}.
%    \begin{macrocode}
\newcommand{\newseries}[1]{%
    \def\do##1{\newseries@{##1}}%
    \docsvlist{#1}
}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\@series}
% The \protect\cs{series@} macro is an \protect\package{etoolbox} list, which contains the name of all series.
%    \begin{macrocode}
\newcommand{\@series}{}
%    \end{macrocode}
% \end{macro}
% The command \protect\cs{newseries@}\protect\cs{series} creates a new series of the footnote.
% \begin{macro}{\newseries@}
%    \begin{macrocode}
\newcommand{\newseries@}[1]{
%    \end{macrocode}
% \subsection{Test if series is still existing}
%    \begin{macrocode}
    \xifinlist{#1}{\@series}{\led@warn@SeriesStillExist{#1}}%
    {%
%    \end{macrocode}
% \subsection{Init specific to \parpackage}
% When calling \protect\cs{newseries@} after having loaded \parpackage, we need to load specific setting.
%    \begin{macrocode}
      \ifdefined\newseries@par%
        \newseries@par{#1}%
      \fi%
%    \end{macrocode}
% \subsection{For critical footnotes}
% Critical footnotes are those which start with letters.
% We look for the \protect\cs{nocritical} option of \macpackage.
%    \begin{macrocode}
    \unless\ifnocritical@
%    \end{macrocode}
% \subsubsection{Options}
%    \begin{macrocode}
      \newtoggle{Xlineflag@#1}
      \newtoggle{Xparindent@#1}
      \newtoggle{Xlemmadisablefontselection@#1}
      \csgdef{Xhangindent@#1}{0pt}%
      \csgdef{Xragged@#1}{}%
      \csgdef{Xhsizetwocol@#1}{0.45 \hsize}%
      \csgdef{Xhsizethreecol@#1}{.3 \hsize}%
      \csgdef{Xcolalign@#1}{\raggedright}%
      \csgdef{Xnotenumfont@#1}{\normalfont}%
      \csgdef{Xnotefontsize@#1}{\footnotesize}%
      \csgdef{Xbhooknote@#1}{}%
      \csgdef{Xbhookgroup@#1}{}%
      
      \csgdef{Xboxlinenum@#1}{0pt}%
      \csgdef{Xboxlinenumalign@#1}{L}%
      
      \csgdef{Xboxstartlinenum@#1}{0pt}%
      \csgdef{Xboxendlinenum@#1}{0pt}%

      \csgdef{Xboxsymlinenum@#1}{0pt}%
      \newtoggle{Xnumberonlyfirstinline@#1}%
      \newtoggle{Xnumberonlyfirstintwolines@#1}%
      \csgdef{Xtwolines@#1}{}%
      \csgdef{Xmorethantwolines@#1}{}%
      \csgdef{Xsublinesep@#1}{\fullstop}%
      \newtoggle{Xtwolinesbutnotmore@#1}%
      \newtoggle{Xtwolinesonlyinsamepage@#1}%
      \newtoggle{Xonlypstart@#1}%
      \newtoggle{Xpstarteverytime@#1}%
      \newtoggle{Xpstart@#1}%
      \newtoggle{Xstanza@#1}%
      \csgdef{Xstanzaseparator@#1}{}%
      \csgdef{Xsymlinenum@#1}{}%
      \newtoggle{Xnonumber@#1}%
      \csgdef{Xbeforenumber@#1}{0pt}%
      \csgdef{Xtxtbeforenumber@#1}{}%
      \csgdef{Xafternumber@#1}{0.5em}%
      \newtoggle{Xnonbreakableafternumber@#1}%
      \csgdef{Xbeforesymlinenum@#1}{\csuse{Xbeforenumber@#1}}%
      \csgdef{Xaftersymlinenum@#1}{\csuse{Xafternumber@#1}}%
      \csgdef{Xinplaceofnumber@#1}{1em}%
      \global\cslet{Xlemmaseparator@#1}{\rbracket}%
      \csgdef{Xbeforelemmaseparator@#1}{0em}%
      \csgdef{Xafterlemmaseparator@#1}{0.5em}%
      \csgdef{Xinplaceoflemmaseparator@#1}{1em}%
      \csgdef{Xbeforenotes@#1}{1.2em \@plus .6em \@minus .6em}
      \csgdef{Xafterrule@#1}{0pt}
      \csgdef{Xtxtbeforenotes@#1}{}
      \csgdef{Xmaxhnotes@#1}{0.8\vsize}
      \newtoggle{Xnoteswidthliketwocolumns@#1}%
      \csgdef{Xparafootsep@#1}{}%
      \csgdef{Xafternote@#1}{1em plus.4em minus.4em}
      \csgdef{Xlinerangeseparator@#1}{\endashchar}%
      
      \csgdef{Xlemmafont@#1}{}%
      \csgdef{Xwidth@#1}{\hsize}%
%    \end{macrocode}
% \subsubsection{Create inserts, needed to add notes in foot}
% As regards inserts, see chapter 15 of \thetexbook\ by D. Knuth.
%    \begin{macrocode}
      \expandafter\newinsert\csname #1footins\endcsname%
      \unless\ifnoledgroup@%
        \expandafter\newinsert\csname mp#1footins\endcsname%
      \fi%
%    \end{macrocode}
% \subsubsection{Create commands for critical apparatus, \protect\cs{Afootnote}, \protect\cs{Bfootnote} etc.}
% Note the double \# in command: it is because command it is made inside another command.
% \changes{v1.4.0}{2012/11/16}{Remembers the language of the lemma, in order to create a correct direction for the footnote separator.}
% \changes{v1.23.0}{2015/04/29}{Prevent spurious spaces when \protect\cs{Afootnote} and similar commands are followed by spaces (bug added on 1.0.0!).}
%    \begin{macrocode}
      \global\notbool{parapparatus@}{\expandafter\newcommand\expandafter *}{\expandafter\newcommand}\csname #1footnote\endcsname[2][]{%
          \ifnum\@edtext@level>0%
            \begingroup%
            \newcommand{\content}{##2}%
            \ifnumberedpar@%
                \ifledRcol%
                   \ifluatex%
                       \footnotelang@lua[R]%  
                   \fi%
                   \@ifundefined{xpg@main@language}%if polyglossia
                         {}%
                         {\footnotelang@poly[R]}%          
                    \footnoteoptions@{R}{##1}{true}%
                    \xright@appenditem{%
                      \ifbool{indtl@innote}%
                        {\unexpanded{\let\index\nindex}}%
                        {}%
                      \ifbool{indtl@notenumber}%
                        {\unexpanded{\let\index\nindex}}%There is no note number… so
                        {}%
                      \noexpand\Xnote@true%
                      \noexpand\prepare@preXnotes{#1}%
                      \noexpand\prepare@edindex@fornote{\l@d@nums}%
                      \unexpanded{\def\sw@list@inedtext}{\expandafter\unexpanded\expandafter{\sw@inthisedtext}}%The value of the \sw@inthisedtext of current \edtext will be pushed to  \sw@list@inedtext when the notes are expanded.
                      \noexpand\setcounter{stanzaR}{\the\c@stanzaR}%Save stanzaR counter for footnote
                      \unexpanded{\def\@this@crossref@start}{\theedtext:start}%
                      \unexpanded{\def\@this@crossref@end}{\theedtext:end}%
                      \noexpand\csuse{v#1footnote}{#1}%
                       {{\l@d@nums}{\expandonce\@tag}{\expandonce\content}}%
                      \noexpand\Xnote@false% 
                      \unexpanded{\undef\@this@crossref@start}%
                      \unexpanded{\undef\@this@crossref@end}%
                      \ifbool{indtl@innote}%
                        {\unexpanded{\let\index\orig@@index}}%
                        {}%
                      \ifbool{indtl@notenumber}%
                        {\unexpanded{\let\index\orig@@index}}%
                        {}%
                    }\to\inserts@listR
                    \footnoteoptions@{R}{##1}{false}%
                    \global\advance\insert@countR \@ne%
                \else%
                     \ifluatex%
                       \footnotelang@lua%
                     \fi%
                   \@ifundefined{xpg@main@language}%if polyglossia
                         {}%
                         {\footnotelang@poly}%
                    \footnoteoptions@{L}{##1}{true}%
                    \xright@appenditem{%
                      \ifbool{indtl@innote}%
                        {\unexpanded{\let\index\nindex}}%
                        {}%
                      \ifbool{indtl@notenumber}%
                        {\unexpanded{\let\index\nindex}}%There is no note number… so
                        {}%
                      \noexpand\Xnote@true%
                      \noexpand\prepare@preXnotes{#1}%
                      \noexpand\prepare@edindex@fornote{\l@d@nums}%
                      \unexpanded{\def\sw@list@inedtext}{\expandafter\unexpanded\expandafter{\sw@inthisedtext}}%The value of the \sw@inthisedtext of current edtext will be pushed to  \sw@list@inedtext when the notes are expanded.
                      \ifl@dpairing%
                        \noexpand\setcounter{stanzaL}{\the\c@stanzaL}%Save stanzaR counter for footnote
                      \fi%
                      \unexpanded{\def\@this@crossref@start}{\theedtext:start}%
                      \unexpanded{\def\@this@crossref@end}{\theedtext:end}%
                      \noexpand\csuse{v#1footnote}%
                         {#1}%
                         {{\l@d@nums}{\expandonce\@tag}{\expandonce\content}}%
                      \unexpanded{\undef\@this@crossref@start}%
                      \unexpanded{\undef\@this@crossref@end}%
                      \noexpand\Xnote@false%
                      \ifbool{indtl@innote}%
                        {\unexpanded{\let\index\orig@@index}}%
                        {}%
                      \ifbool{indtl@notenumber}%
                        {\unexpanded{\let\index\orig@@index}}%
                        {}%
                     }\to\inserts@list
                    \global\advance\insert@count \@ne%
                    \footnoteoptions@{L}{##1}{false}%
                \fi
            \else
                \csuse{v#1footnote}{#1}{{0|0|0|0|0|0|0}{}{##1}}%
            \fi%
            \endgroup%
          \else%
            \led@err@FootnoteWithoutEdtext%
          \fi%
   \ignorespaces%
          }
%    \end{macrocode}
% We need to be able to modify \macpackage's footnote macros and restore their
%    \begin{macrocode}
      \global\csletcs{#1@@footnote}{#1footnote}
%    \end{macrocode}
% \subsubsection{Set standard display}
%    \begin{macrocode}
      \Xarrangement@normal{#1}%
%    \end{macrocode}
% End of for critical footnotes.
%    \begin{macrocode}
    \fi
%    \end{macrocode}
% \subsection{For familiar footnotes}
% Familiar footnotes are those which end with letters.
% We look for the \verb+nofamiliar+ option of \macpackage.
%    \begin{macrocode}
    \unless\ifnofamiliar@
%    \end{macrocode}
% \subsubsection{Options}
%    \begin{macrocode}
      \newtoggle{parindentX@#1}
      \csgdef{hangindentX@#1}{0pt}%
      \csgdef{raggedX@#1}{}%
      \csgdef{hsizetwocolX@#1}{0.45 \hsize}%
      \csgdef{hsizethreecolX@#1}{.3 \hsize}%
      \csgdef{colalignX@#1}{\raggedright}%
      \csgdef{notenumfontX@#1}{\normalfont}%
      \csgdef{notefontsizeX@#1}{\footnotesize}%
      \csgdef{bhooknoteX@#1}{}%
      \csgdef{bhookgroupX@#1}{}%
      \csgdef{afterruleX@#1}{0pt}
      \csgdef{beforenotesX@#1}{1.2em \@plus .6em \@minus .6em}
      \csgdef{maxhnotesX@#1}{0.8\vsize}%
      \newtoggle{noteswidthliketwocolumnsX@#1}%
      \csgdef{parafootsepX@#1}{}%
      \csgdef{afternoteX@#1}{1em plus.4em minus.4em}
      \csgdef{widthX@#1}{\hsize}%
% End of for familiar footnotes.
% \subsubsection{Create inserts, needed to add notes in foot}
% As regards inserts, see chapter 15 of the TeXBook by D. Knuth.
%    \begin{macrocode}
      \expandafter\newinsert\csname footins#1\endcsname%
      \unless\ifnoledgroup@%
        \expandafter\newinsert\csname mpfootins#1\endcsname%
      \fi%
%    \end{macrocode}
%\subsubsection{Create tools for familiar footnotes (\protect\cs{footnoteX})}
% First, create the \protect\cs{footnoteX} command.
% Note the double \# in command: it is because a command is called inside another command.
%    \begin{macrocode}

      \global\expandafter\newcommand\csname footnote#1\endcsname[1]{%
          \begingroup%
              \prepare@prenotesX{#1}%
              \newcommand{\content}{##1}%
%    \end{macrocode}
% If we are preparing parallel typesetting, we cannot just increase the footnote counter.
% Read \parpackage's handbook about that (\reff{reledpar-familiarfootnotenumber}).
%    \begin{macrocode}
               \global\expandafter\advance\csname footnote#1@reading\endcsname by \@ne%
               \ifl@dpairing%
                  \ifcsdef{footnote#1reading\the\csname footnote#1@reading\endcsname=typeset}%
                    {\setcounter{footnote#1}{\csuse{footnote#1reading\the\csname footnote#1@reading\endcsname=typeset}}}%
                    {\setcounter{footnote#1}{\the\csname footnote#1@reading\endcsname}}%
               \else%
                  \stepcounter{footnote#1}%
               \fi%
%    \end{macrocode}
% And now, the feature not depending of wether we are preparing parallel typesetting
%    \begin{macrocode}
              \protected@csxdef{@thefnmark#1}{\csuse{thefootnote#1}}%
              \nottoggle{nomk@}%Nomk is set to true when using \footnoteXnomk with \parpackage
                 {\csuse{@footnotemark#1}}%
                 {}%
              \ifluatex%
                \xdef\footnote@luatextextdir{\the\textdir}%
                \xdef\footnote@luatexpardir{\the\pardir}%
              \fi%
              \if@ledgroup%
	              \led@set@index@fornote{#1}%
	            \fi%
	            \csuse{vfootnote#1}{#1}{\expandonce\content}\m@mmf@prepare%
              \ifbool{indtl@innote}%
                {\let\index\orig@@index}%
                {}%
              \ifbool{indtl@notenumber}%
                {\let\index\orig@@index}%
                {}%
          \endgroup%
      }
%    \end{macrocode}
% Then define the counters.
% The \LaTeX\ counter \verb+footnoteX+ is the only one manipulated by the user. This is this the one which is printed.
% The \TeX\ counter \cs{footnoteX@reading} is increased at each footnote. It is used for hyperlinks,  for using \package{hyperlink} package, and for getting the correct footnote number when using parallel typesetting (\reff{reledpar-familiarfootnotenumber}).
%    \begin{macrocode}
      \newcounter{footnote#1}
        \global\expandafter\renewcommand\csname thefootnote#1\endcsname{\arabic{footnote#1}}
      \expandafter\newcount\csname footnote#1@reading\endcsname%
%    \end{macrocode}
% Do not forget to initialize series
%    \begin{macrocode}
     \arrangementX@normal{#1}%
  \fi
%    \end{macrocode}
% \subsection{The endnotes}
% \changes{v2.0.0}{2015/07/19}{One endnotes file by series.}  
% Endnotes are commands like \protect\cs{Xendnote}, where X is a series letter.
% First, we check for the \verb+noend+ options.
%    \begin{macrocode}
  \unless\ifnoend@
%    \end{macrocode}
% \subsubsection{The auxiliary file}
% \begin{macro}{\l@d@Xend}
% \begin{macro}{\ifl@dend@X}
% \begin{macro}{\l@dend@Xtrue}
% \begin{macro}{\l@dend@Xfalse}
% Endnotes of all varieties are saved up in a file, one by series, typically named
% \meta{jobname}\file{.Xend}.
% \protect\cs{l@d@end} is the output stream number for
% this file, and \protect\cs{ifl@dend@X} is a flag that is \verb"true" when the file is open.
% 
% 
%    \begin{macrocode}
      \expandafter\newwrite\csname l@d@#1end\endcsname%
      \expandafter\newif\csname ifl@dend@#1\endcsname%
%    \end{macrocode}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \subsubsection{The main macro}
% The \protect\cs{Xendnote} macro functions to
% write one endnote to the \file{.Xend} file. We change
% \protect\cs{newlinechar} so that in the file every space becomes the
% start of a new line; this generally ensures that a long note does not
% exceed restrictions on the length of lines in files.
%    \begin{macrocode}

      \global\expandafter\newcommandx\csname #1endnote\endcsname[2][1,usedefault]{%
         \bgroup%
         \newlinechar='40%
         \global\@noneed@Footnotetrue%
         \newcommand{\content}{##2}%
         \stepcounter{labidx}%
         \expandafter\immediate\expandafter\write\csname l@d@#1end\endcsname{%
           \expandafter\string\csname #1end\endcsname%
           {\ifnumberedpar@\l@d@nums\fi}%
           {\ifnumberedpar@\expandonce\@tag\fi}%
           {\expandonce\content}%
           {#1}%
           {\unexpanded{##1}}%
           {\ifledRcol R\else L\fi}%
           {\theedtext}%
           \@percentchar%
         }%
         \egroup%
         \ignorespaces%
     }%
%    \end{macrocode}
% \protect\cs{Xendnote}  commands called \protect\cs{Xend} commands on to the endnote file; these are analogous to the various
% \verb"footfmt" commands above, and they take the same arguments.
% When we process this file, we want to pick out the notes of one
% series and ignore all the rest. To do that, we equate the \verb"end"
% command for the series we want to \protect\cs{endprint}, and leave the
% rest equated to \protect\cs{@gobblefive}, which just skips over its five
% arguments.
%    \begin{macrocode}

      \global\cslet{#1end}{\@gobblefive}
%    \end{macrocode}
% We need to store the number of times \protect\cs{doendnotesbysection} is called for one series.
%    \begin{macrocode}
   \global\expandafter\newcount\csname #1end@bysection\endcsname%
%    \end{macrocode}
% \subsubsection{The options}
%    \begin{macrocode}
      \csgdef{Xendtwolines@#1}{}%
      \csgdef{Xendmorethantwolines@#1}{}%
      \newtoggle{Xendtwolinesbutnotmore@#1}{}%
      \newtoggle{Xendtwolinesonlyinsamepage@#1}{}%
      \newtoggle{Xendlemmadisablefontselection@#1}%
      \csgdef{Xendnotenumfont@#1}{\normalfont}%
      \csgdef{Xendnotefontsize@#1}{\footnotesize}%
      \csgdef{Xendbhooknote@#1}{}%
      
      \csgdef{Xendsublinesep@#1}{\fullstop}%
      
      \csgdef{Xendbeforenumber@#1}{0pt}
      \csgdef{Xendafternumber@#1}{0.5em}
      
      \csgdef{Xendboxlinenum@#1}{0pt}%
      \csgdef{Xendboxlinenumalign@#1}{L}%
      
      \csgdef{Xendboxstartlinenum@#1}{0pt}%
      \csgdef{Xendboxendlinenum@#1}{0pt}%

      \csgdef{Xendlemmaseparator@#1}{}%
      \csgdef{Xendbeforelemmaseparator@#1}{0em}%
      \csgdef{Xendafterlemmaseparator@#1}{0.5em}%
      \csgdef{Xendinplaceoflemmaseparator@#1}{0.5em}%
      
      \newtoggle{Xendparagraph@#1}%
      \csgdef{Xendafternote@#1}{1em plus.4em minus.4em}%
      \csgdef{Xendsep@#1}{}%
      
      \csgdef{Xendinplaceofnumber@#1}{0pt}%
      \newtoggle{Xendnonumber@#1}%
      
      \csgdef{Xendhangindent@#1}{0pt}%
      \newtoggle{Xendnumberonlyfirstinline@#1}%
      \newtoggle{Xendnumberonlyfirstintwolines@#1}%
 
      \csgdef{Xendbeforesymlinenum@#1}{\csuse{Xendbeforenumber@#1}}%
      \csgdef{Xendaftersymlinenum@#1}{\csuse{Xendafternumber@#1}}%
      \csgdef{Xendsymlinenum@#1}{}%
      \csgdef{Xendboxsymlinenum@#1}{0pt}%

      \csgdef{Xendbhooklinenumber@#1}{}%
      \csgdef{Xendehooklinenumber@#1}{}%
      \csgdef{Xendbhookinplaceofnumber@#1}{}%
      \csgdef{Xendehookinplaceofnumber@#1}{}%
      
      \csgdef{Xendlinerangeseparator@#1}{\endashchar}%
      
      \csgdef{Xendbeforepagenumber@#1}{p.}%
      \csgdef{Xendafterpagenumber@#1}{) }%
      \csgdef{Xendlineprefixsingle@#1}{}%
      \csgdef{Xendlineprefixmore@#1}{}%
      
      \newtoggle{Xendlineflag@#1}
     
      \csgdef{Xendlemmafont@#1}{}%
%    \end{macrocode}
% End of endnotes declaration
%    \begin{macrocode}
  \fi%
%    \end{macrocode}
% Dump series in \protect\cs{@series}
%    \begin{macrocode}
    \listxadd{\@series}{#1}
  }
}% End of \newseries
%    \end{macrocode}
% \end{macro}
% \subsection{Init standards series (A,B,C,D,E)}
%    \begin{macrocode}
\expandafter\newseries\expandafter{\default@series}
%    \end{macrocode}
% \section{Setting series display}
% \subsection{Change series order}
% \changes{v1.1.0}{2012/09/25}{New tools to change order of series}
% \changes{v1.21.0}{2015/04/13}{\protect\cs{seriesatbegin} and \protect\cs{seriesatbegin} more efficient}
% \begin{macro}{\seriesatbegin}
% \protect\cs{seriesatbegin}\marg{s} changes the order of series, to put the series \meta{s} at the beginning of the list.
% The series can be the result of a command.
%    \begin{macrocode}
\newcommand{\seriesatbegin}[1]{%
   \StrDel{\@series}{#1}[\@series]%
   \edef\@new{}%
   \listeadd{\@new}{#1}%
   \listeadd{\@new}{\@series}%
   \xdef\@series{\@new}%
}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\seriesatend}
% \changes{v1.21.0}{2015/04/13}{Fix spurious space in \protect\cs{seriesatend}}
%  And \protect\cs{seriesatend} moves the series to the end of the list.
%    \begin{macrocode}
\newcommand{\seriesatend}[1]{%
   \StrDel{\@series}{#1}[\@series]%
   \edef\@new{}%
   \listeadd{\@new}{\@series}%
   \listeadd{\@new}{#1}%
   \xdef\@series{\@new}%
}
%    \end{macrocode}
% \end{macro}
% \subsection{Test series order}
% \begin{macro}{\ifseriesbefore}
% \protect\cs{ifseriesbefore}\marg{seriesA}\marg{seriesB}\marg{true}\marg{false} expands \meta{true} if \meta{seriesA} is printed before \meta{seriesB}, expands \meta{false} otherwise. 
%    \begin{macrocode}
\newcommand{\ifseriesbefore}[4]{%
 \StrPosition{\@series}{#1}[\@first]%
 \StrPosition{\@series}{#2}[\@second]%
 \ifnumgreater{\@second}{\@first}{#3}{#4}%
}
%    \end{macrocode}
% \end{macro}
% \subsubsection{Get the first series}
% In some specific case, we need to know the first series of the list of series.
% \begin{macro}{\@getfirstseries}
%    \begin{macrocode}
\newcommand{\@getfirstseries}{%
 \ifdefempty{\@series}%
   {\xdef\@firstseries{}}%
   {\StrChar{\@series}{1}[\@firstseries]}%
}%
%    \end{macrocode}
% \end{macro}
% \changes{v1.0.0}{2012/09/15}{New generic commands to customize footnote display.}
% \subsection{Series setting}
% \subsubsection{General way of working}
% The setting's command (like \protect\cs{numberonlyfirstinline}), also called ``hooks'' can be divided in two categories: those which require a string values and those which require a boolean value.
% The first category includes those which require a length value, because we store the length's expression send by user and we evaluate it only in the commands which requires to know the setting.
% The second category require boolean value only when it is set to FALSE.
% Otherwise, we understand the insinuated value is TRUE.
%
% For each ``hook'' command, we store the value in  commands (first category) or a \protect\package{etoolbox}'s toggle (second category) which names are in the form \protect\cs{<hook>@<series>}.
% For example when calling \protect\cs{twolines}\marg{sq.}, we store \verb+sq.+ in commands \protect\cs{twolines@A}, \protect\cs{twolines@B}, \protect\cs{twolines@C}\ldots for each series defined for use with \macpackage, or, if the \oarg{series} optional argument was send, for each series of this argument.
%
% These values are tested in some specific places, scattered in all the code, depending of their effects.
% The default values are defined by the \protect\cs{newseries@} command.
%
%
% In order to prevent code duplication, we have created some generic commands.
% Some of them change the value of any hook send as argument.
% Some other, getting a hook name, generate the user level commands.
%
%
% 
% \subsubsection{Tools to set options}
% \begin{macro}{\settoggle@series} 
% \changes{v1.1.0}{2012/09/25}{\protect\cs{settoggle@series} switch the global value of the toggle, not only the local value.}
% \changes{v1.13.0}{2014/09/16}{\protect\cs{settoggle@series} can take an optional arguments to reload series setup.}
% \protect\cs{settoggle@series}\marg{series}\marg{toggle}\marg{value} is a generic command to switch toggles for some series.
% The arguments are:
% \begin{itemize}
%   \item \verb+#1+ (mandatory): the series for which the hooks should be set. If empty, all the series will be affected.
%   \item \verb+#2+ (mandatory): the name of the hook.
%   \item \verb+#3+ (mandatory): the new value of toggle (true or false).
%   \item \verb+#4+ (optional): if equal to \verb+reload+, reload the footnote setting (call again \protect\cs{Xarrangement} or \protect\cs{arrangementX} or \ldots\ depending of the footnote display).
%   \item \verb+#5+ (optional): if not empty, and if \verb+#1+ is empty, change the hook setting for pseudo-series, as \verb+appref+.
% \end{itemize}
%    \begin{macrocode}
\newcommandx{\settoggle@series}[5][4,5,usedefault]{%
    \def\do##1{%
      \global\settoggle{#2@##1}{#3}%
      \ifstrequal{#4}{critical}{
          \csuse{Xarrangement@\csuse{series@display##1}}{##1}%
      }{}
      \ifstrequal{#4}{familiar}{
          \csuse{arrangementX@\csuse{series@displayX##1}}{##1}%
      }{}
    }%
    \ifstrempty{#1}{%
              \dolistloop{\@series}%
              \ifstrempty{#5}{}{%
                 \docsvlist{#5}%
               }
           }%
           {%
              \docsvlist{#1}%
           }%
}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\setcommand@series} 
% \protect\cs{setcommand@series}\marg{series}\marg{command}\marg{value} is a generic command to store hook's value into commands specific to some  series. 
% The arguments are:
% \begin{itemize}
%   \item \verb+#1+ (mandatory): the series for which the hooks should be set. If empty, all the series will be affected.
%   \item \verb+#2+ (mandatory): the name of the hook.
%   \item \verb+#3+ (mandatory): the new value of the hook/command.
%   \item \verb+#4+ (optional): if equal to \verb+reload+, reload the footnote setting (call \protect\cs{footnormal} or \protect\cs{footparagraph} or \ldots\ depending of the footnote display).
%   \item \verb+#5+ (optional): if not empty, and if \verb+#1+ is empty, change the hook setting for pseudo-series, as \verb+appref+.
% \end{itemize}
%    \begin{macrocode}
\newcommandx{\setcommand@series}[5][4,5,usedefault]{%
    \def\do##1{
        \csgdef{#2@##1}{#3}
      \ifstrequal{#4}{critical}{%
            \csuse{Xarrangement@\csuse{series@display##1}}{##1}%
      }{}
      \ifstrequal{#4}{familiar}{%
          \csuse{arrangementX@\csuse{series@displayX##1}}{##1}%
      }{}%
    }%
    \ifstrempty{#1}{%
              \dolistloop{\@series}%
              \ifstrempty{#5}{}{%
                 \docsvlist{#5}
               }
    }%
    {%
              \docsvlist{#1}%
    }%
}%
%    \end{macrocode}
% \end{macro}
% \subsubsection{Tools to generate options commands}
% \begin{macro}{\newhookcommand@series}
% \protect\cs{newhookcommand@series}\protect\cs{command names} is a generic command to add new commands for hooks, like \protect\cs{Xhsizetwocol}.
% The first argument is the name of the hook, the second a comma-separated list of pseudo-series where the hook can be used, like \verb+appref+ in the case of \protect\cs{Xtwolines}.
% The second argument is also used to create commands named \protect\cs{<hookname><pseudoseries>}, 
% like \protect\cs{Xtwolinesappref}.
% \changes{v1.21.0}{2015/04/13}{\protect\cs{newhookcommand@series} can take an optional argument.}
%    \begin{macrocode}
\newcommandx{\newhookcommand@series}[2][2,usedefault]{%
  \global\expandafter\newcommand\expandafter*\csname #1\endcsname[2][]{%
    \setcommand@series{##1}{#1}{##2}[][#2]%
  }%
  \ifstrempty{#2}{}{%
    \def\do##1{%
      \global\expandafter\newcommand\expandafter*\csname #1##1\endcsname[1]{%
        \csuse{#1}[##1]{####1}%
      }%
    }%
    \docsvlist{#2}%
  }%
}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\newhooktoggle@series}
%\protect\cs{newhooktoggle@series}\protect\cs{command names} is a generic command to add new commands for a new toggle hook, like \protect\cs{Xnumberonlyfirstinline}.
% The second argument is also used to create commands named \protect\cs{<hookname><pseudoseries>}, 
% like \protect\cs{Xtwolinesbutnotmoreappref}.
% \changes{v1.21.0}{2015/04/13}{\protect\cs{newhooktoggle@series} can take an optional argument.}
%    \begin{macrocode}
\newcommandx{\newhooktoggle@series}[2][2,usedefault]{%
  \global\expandafter\newcommandx\expandafter*\csname #1\endcsname[2][1,2={true},usedefault]{%
    \settoggle@series{##1}{#1}{##2}[][#2]%
    }%
  \ifstrempty{#2}{}{%
    \def\do##1{%
      \global\expandafter\newcommand\expandafter*\csname #1##1\endcsname{%
        \csuse{#1}[##1]%
      }%
    }%
    \docsvlist{#2}%
  }%
}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\newhooktoggle@series@reload}
% \changes{v1.13.0}{2014/09/16}{Add \protect\cs{newhookcommand@toggle@reload}}
% \protect\cs{newhookcommand@toggle@reload} does the same thing as \protect\cs{newhooktoggle@series} 
% but the commands created by this macro also reload the series arrangement, depending of type os notes
%    \begin{macrocode}
\newcommand{\newhooktoggle@series@reload}[2]{%
  \global\expandafter\newcommandx\expandafter*\csname #1\endcsname[2][1,2={true},usedefault]{%
    \settoggle@series{##1}{#1}{##2}[#2]%
    }%
}%
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\newhookcommand@series@reload}
% \changes{v1.8.0}{2013/11/24}{Debug \protect\cs{beforenotesX} and  \protect\cs{maxhnotesX} which did not work.}
% \changes{v1.12.0}{2014/08/05}{Debug \protect\cs{beforenotesX} and  \protect\cs{maxhnotesX} which did not work when called after \protect\cs{footparagraphX}.}
% \changes{v1.12.0}{2014/08/05}{Debug \protect\cs{Xbeforenotes} and  \protect\cs{Xmaxhnotes} which did not work when called after \protect\cs{footparagraph}.}
% \protect\cs{newhookcommand@series@reload} does the same thing as \protect\cs{newhookcommand@series} 
% but the commands created by this macro also reload the series' arrangement.
% 
%    \begin{macrocode}
\newcommand{\newhookcommand@series@reload}[2]{%
  \global\expandafter\newcommand\expandafter*\csname #1\endcsname[2][]{%
    \setcommand@series{##1}{#1}{##2}[#2]%
  }%
}
%    \end{macrocode}
% \end{macro}
% \subsubsection{Options for critical notes}
% Before generating the commands that are used to set the critical notes, such as \protect\cs{Xnumberonlyfirstinline}, \protect\cs{Xlemmaseparator} and the like, we check the \verb+nocritical+ option.
%    \begin{macrocode}
\unless\ifnocritical@
  \newhookcommand@series{Xlemmafont}%
  \newhooktoggle@series{Xparindent}
  \newhookcommand@series{Xhangindent}
  \newhookcommand@series{Xragged}
  \newhookcommand@series{Xhsizetwocol}
  \newhookcommand@series{Xhsizethreecol}
  \newhookcommand@series{Xcolalign}%
  \newhookcommand@series{Xnotenumfont}
  \newhookcommand@series{Xbhooknote}
  \newhookcommand@series@reload{Xbhookgroup}{critical}
  \newhookcommand@series{Xboxsymlinenum}%
  \newhookcommand@series{Xsymlinenum}
  \newhookcommand@series{Xbeforenumber}
  \newhookcommand@series{Xtxtbeforenumber}
  \newhookcommand@series{Xafternumber}
  \newhookcommand@series{Xbeforesymlinenum}
  \newhookcommand@series{Xaftersymlinenum}
  \newhookcommand@series{Xinplaceofnumber}
  \newhookcommand@series{Xlemmaseparator}
  \newhookcommand@series{Xbeforelemmaseparator}
  \newhookcommand@series{Xafterlemmaseparator}
  \newhookcommand@series{Xinplaceoflemmaseparator}
  \newhookcommand@series{Xtxtbeforenotes}
  \newhookcommand@series@reload{Xafterrule}{critical}
  \newhooktoggle@series{Xnumberonlyfirstinline}
  \newhooktoggle@series{Xnumberonlyfirstintwolines}
  \newhooktoggle@series{Xnonumber}
  \newhooktoggle@series{Xpstart}
  \newhooktoggle@series{Xpstarteverytime}%
  
  \newhooktoggle@series{Xstanza}%
  \newhookcommand@series{Xstanzaseparator}%

  \newhooktoggle@series{Xonlypstart}
  \newhooktoggle@series{Xnonbreakableafternumber}
  \newhooktoggle@series{Xlemmadisablefontselection}
  \newhookcommand@series@reload{Xmaxhnotes}{critical}
  \newhookcommand@series@reload{Xbeforenotes}{critical}
  \newhooktoggle@series@reload{Xnoteswidthliketwocolumns}{critical}%
  \newhookcommand@series@reload{Xnotefontsize}{critical}
  
  \newhookcommand@series{Xboxlinenum}%
  \newhookcommand@series{Xboxlinenumalign}%

  \newhookcommand@series{Xboxstartlinenum}%
  \newhookcommand@series{Xboxendlinenum}% 
  
  \newhookcommand@series{Xafternote}%
  \newhookcommand@series{Xparafootsep}
  
  \newhookcommand@series@reload{Xwidth}{critical}%
  
  \ifundef{\Xhsize}%
    {%
      \newcommandx{\Xhsize}[2][1,usedefault]{%
        \led@warning@Xhsize@deprecated%
        \Xwidth[#1]{#2}%
      }%
    }%
    {}%
\fi
\newhooktoggle@series{Xlineflag}[appref,SEref]
\newhookcommand@series{Xtwolines}[appref,SEref]
\newhookcommand@series{Xmorethantwolines}[appref,SEref]
\newhookcommand@series{Xsublinesep}[appref,SEref,side]   
\newhooktoggle@series{Xtwolinesbutnotmore}[appref,SEref]
\newhooktoggle@series{Xtwolinesonlyinsamepage}[appref,SEref]
\newhookcommand@series{Xlinerangeseparator}[appref,SEref]
%    \end{macrocode}
% \subsubsection{Options for familiar notes}
% Before generating the optional commands for familiar notes, we check the \protect\cs{nofamiliar} option.
%    \begin{macrocode}
\unless\ifnofamiliar@
  \newhooktoggle@series{parindentX}
  \newhookcommand@series{hangindentX}
  \newhookcommand@series{raggedX}
  \newhookcommand@series{hsizetwocolX}
  \newhookcommand@series{hsizethreecolX}
  \newhookcommand@series{colalignX}%
  \newhookcommand@series{notenumfontX}
  \newhookcommand@series{bhooknoteX}
  \newhookcommand@series@reload{bhookgroupX}{familiar}
  \newhookcommand@series@reload{beforenotesX}{familiar}
  \newhookcommand@series@reload{maxhnotesX}{familiar}
  \newhooktoggle@series@reload{noteswidthliketwocolumnsX}{familiar}%
  \newhookcommand@series@reload{afterruleX}{familiar}
  \newhookcommand@series@reload{notefontsizeX}{familiar}
  \newhookcommand@series{afternoteX}
  \newhookcommand@series{parafootsepX}
  \newhookcommand@series@reload{widthX}{familiar}%
  \ifundef{\hsizeX}%
    {%
      \newcommandx{\hsizeX}[2][1,usedefault]{%
        \led@warning@hsizeX@deprecated%
        \widthX[#1]{#2}%
      }%
    }%
    {}%
\fi
%    \end{macrocode}
% \subsubsection{Options for endnotes}
% Before generating the commands that are used to set the endnotes, such as \protect\cs{Xnumberonlyfirstinline}, \protect\cs{Xlemmaseparator}+ and the like, we check the \verb+noend+ option.
%    \begin{macrocode}
\unless\ifnoend@
  \newhookcommand@series{Xendnotenumfont}
  \newhookcommand@series{Xendlemmafont}%
  \newhookcommand@series{Xendbhooknote}
  
  \newhookcommand@series{Xendboxlinenum}%
  \newhookcommand@series{Xendboxlinenumalign}%
  
  \newhookcommand@series{Xendboxstartlinenum}%
  \newhookcommand@series{Xendboxendlinenum}% 

  \newhookcommand@series{Xendnotefontsize}
  \newhooktoggle@series{Xendlemmadisablefontselection}
  \newhookcommand@series{Xendlemmaseparator}
  \newhookcommand@series{Xendbeforelemmaseparator}
  \newhookcommand@series{Xendafterlemmaseparator}
  \newhookcommand@series{Xendinplaceoflemmaseparator}
  
  \newhookcommand@series{Xendbeforenumber}%
  \newhookcommand@series{Xendafternumber}%
  
  \newhooktoggle@series{Xendparagraph}
  \newhookcommand@series{Xendafternote}
  \newhookcommand@series{Xendsep}
  
  \newhookcommand@series{Xendinplaceofnumber}%
  \newhooktoggle@series{Xendnonumber}%
  
  \newhooktoggle@series{Xendnumberonlyfirstinline}%
  \newhooktoggle@series{Xendnumberonlyfirstintwolines}%
  
  \newhookcommand@series{Xendsymlinenum}%
  \newhookcommand@series{Xendbeforesymlinenum}%
  \newhookcommand@series{Xendaftersymlinenum}%
  \newhookcommand@series{Xendboxsymlinenum}%
  
  \newhookcommand@series{Xendbhooklinenumber}%
  \newhookcommand@series{Xendahooklinenumber}%
  \newhookcommand@series{Xendbhookinplaceofnumber}%
  \newhookcommand@series{Xendahookinplaceofnumber}%

  \newhookcommand@series{Xendhangindent}%
  
  
\fi
\newhooktoggle@series{Xendlineflag}[apprefwithpage,SErefwithpage]
\newhookcommand@series{Xendtwolines}[apprefwithpage,SErefwithpage]
\newhookcommand@series{Xendmorethantwolines}[apprefwithpage,SErefwithpage]   
\newhooktoggle@series{Xendtwolinesbutnotmore}[apprefwithpage,SErefwithpage]
\newhooktoggle@series{Xendtwolinesonlyinsamepage}[apprefwithpage,SErefwithpage]
\newhookcommand@series{Xendlinerangeseparator}[apprefwithpage,SErefwithpage]
\newhookcommand@series{Xendbeforepagenumber}[apprefwithpage,SErefwithpage,SErefonlypage]
\newhookcommand@series{Xendafterpagenumber}[apprefwithpage,SErefwithpagem]
\newhookcommand@series{Xendlineprefixsingle}[apprefwithpage,SErefwithpage]
\newhookcommand@series{Xendlineprefixmore}[apprefwithpage,SErefwithpage]
\newhookcommand@series{Xendsublinesep}[apprefwithpage,SErefwithpage]

%    \end{macrocode}
% \subsection{Hooks for a particular footnote}
% \begin{macro}{\newhooktoggle@specific}
% \cs{newhooktoggle@specific} is a generic command to create boolean hook specific to a note.
%    \begin{macrocode}
\newcommand{\newhooktoggle@specific}[1]{%
  \newtoggle{#1@}%
  \define@key[mac]{truefootnoteoption}{#1}[]{\global\settoggle{#1@}{true}}%When enabling footnote option
  \define@key[mac]{falsefootnoteoption}{#1}[]{\global\settoggle{#1@}{false}}
}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\newhookarg@specific}
% \cs{newhookarg@specific} is a generic command to create argumen hook specific to a note.
%    \begin{macrocode}
\newcommand{\newhookarg@specific}[1]{%
  \define@key[mac]{truefootnoteoption}{#1}{\global\def\linerangesep@{##1}}%When enabling footnote option
  \define@key[mac]{falsefootnoteoption}{#1}{\global\undef\linerangesep@}%When 
}
%    \end{macrocode}
% \end{macro}
% And now, we define some hooks specific to a note.
%    \begin{macrocode}
\newhooktoggle@specific{fulllines}%
\newhooktoggle@specific{nonum}
\newhooktoggle@specific{nosep}
\newhookarg@specific{linerangesep}
%    \end{macrocode}
% \begin{macro}{linerangesep@}
% \cs{linerangesep@} is defined by the option \option{linerangesep} of critical notes to change temporarily the line range separator for a specific line.
% As we have to define it before typesetting the line and undefine it after, we use the family of \package{xkeyval} package's key.
%    \begin{macrocode}
%    \end{macrocode}
%     
%  
% \end{macro}
% \begin{macro}{\nomk@}
%\protect\cs{nomk@} toggle is used by \parpackage{} to remove the footnote mark in the text when using \protect\cs{footnoteXmk}. Read \parpackage handbook.
%    \begin{macrocode}
\newtoggle{nomk@}%
%    \end{macrocode}
% \end{macro}
% \subsection{Alias}
% \begin{macro}{\Xnolemmaseparator}
%\protect\cs{Xnolemmaseparator}\oarg{series} is just an alias for \protect\cs{Xlemmaseparator}\oarg{series}\verb|{}|.
%    \begin{macrocode}
\newcommandx*{\Xnolemmaseparator}[1][1]{\Xlemmaseparator[#1]{}}
%    \end{macrocode}
% \end{macro}
%
%
% \section{Output routine}\label{output}
% 
%
% Now we begin the output routine and associated things.
%
%
% \subsubsection{Page number management}
% \begin{macro}{\pageno}
% \begin{macro}{\advancepageno}
%  \protect\cs{pageno} is a page number, starting at 1, and \protect\cs{advancepageno}
% increments the number.
%    \begin{macrocode}
\countdef\pageno=0 \pageno=1
\newcommand*{\advancepageno}{\ifnum\pageno<\z@ \global\advance\pageno\m@ne
  \else\global\advance\pageno\@ne\fi}

%    \end{macrocode}
% \end{macro}
% \end{macro}
%
%
% \subsubsection{Extra footnotes output}
%
%    With luck we might only have to change \protect\cs{@makecol} and
% \protect\cs{@reinserts} of the \LaTeX's kernel. 
% Since \reledmac, we use \protect\package{etoolbox}'s patching commands instead of overriding. 
% It should provides better compatibility with other package which modify these commands

%
% \begin{macro}{\doxtrafeet}
% \protect\cs{doxtrafeet} is the code extending \protect\cs{@makecol} to cater for
% the extra \macpackage feet. We have two categories of extra footnotes.
% By default, we order the footnote inserts so that the regular footnotes of \LaTeX\ are first,
% then familiar familiar footnotes and finally 
% the critical footnotes.
% \changes{v0.2.1}{2003/09/13}{Renamed \protect\cs{doxtrafeet} to \protect\cs{l@ddoxtrafeet}}
% \changes{v1.9.0}{2014/02/05}{Add \protect\cs{fnpos} to choice the order of footnotes.}
%    \begin{macrocode}
\newcommand*{\l@ddoxtrafeet}{%
  \IfStrEq{familiar-critical}{\@fnpos}
    {\do@feetX\Xdo@feet}%
    {%
    \IfStrEq{critical-familiar}{\@fnpos}%
        {\Xdo@feet\do@feetX}%
        {\do@feetX\Xdo@feet}%
    }%
}%

%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\Xdo@feet}
% \protect\cs{Xdo@feet} is the code extending \protect\cs{@makecol} to cater for
% the extra critical feet. 
% \changes{v0.4.1}{2004/03/06}{Changed \protect\cs{Xdo@feet} code for easier extensions}
%    \begin{macrocode}
\newcommand*{\Xdo@feet}{%
  \setbox\@outputbox \vbox{%
    \unvbox\@outputbox
    \@opXfeet}}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\@opXfeet}
% \begin{macro}{\print@Xnotes}
% The extra critical feet to be added to the output.
% \changes{v0.4.1}{2004/03/06}{Added \protect\cs{@opXfeet}}
% The normal way to add one series,
% \protect\cs{print@Xnotes}, is replaced by \parpackage when using \protect\cs{Pages}.
%    \begin{macrocode}
\newcommand\print@Xnotes[1]{%
  \xdef\@currentseries{#1}%
  \csuse{#1footstart}{#1}%
  \csuse{#1footgroup}{#1}%%
}%
%    \end{macrocode}
% We print all series of notes by looping on them. 
% We check before printing them that they are not voided.
%    \begin{macrocode}
\newcommand*{\@opXfeet}{%
  \unless\ifnocritical@%
    \gdef\firstXseries@{}%
    \def\do##1{%
      \ifvoid\csuse{##1footins}\else%
          \global\skip\csuse{##1footins}=\csuse{Xbeforenotes@##1}%
          \global\advance\skip\csuse{##1footins} by\csuse{Xafterrule@##1}%
          \print@Xnotes{##1}%
       \fi%
      }%
    \dolistloop{\@series}%
  \fi%
}%
%    \end{macrocode}
% \end{macro}
% \end{macro}
%
%
% \begin{macro}{\l@ddodoreinxtrafeet}
% \protect\cs{l@ddodoreinxtrafeet} is the code for catering for the extra footnotes
% within \protect\cs{@reinserts}.
% We use the same category and ordering as in \protect\cs{l@ddoxtrafeet}.
% \changes{v0.2.1}{203/09/13}{Renamed \protect\cs{dodoreinxtrafeet} to \protect\cs{l@ddodoreinxtrafeet}}
%    \begin{macrocode}
\newcommand*{\l@ddodoreinxtrafeet}{%
  \IfStrEq{familiar-critical}{\@fnpos}
    {\@doreinfeetX\X@doreinfeet}%
    {%
    \IfStrEq{critical-familiar}{\@fnpos}%
        {\X@doreinfeet\@doreinfeetX}%
        {\@doreinfeetX\X@doreinfeet}%
    }%
}

%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\X@doreinfeet}
% \protect\cs{X@doreinfeet} is the code for catering for the 
%  extra critical footnotes
% within \protect\cs{@reinserts}. 
%    \begin{macrocode}
\newcommand*{\X@doreinfeet}{%
  \unless\ifnocritical@%
    \def\do##1{%
      \ifvoid\csuse{##1footins}\else%
        \insert\csuse{##1footins}{\unvbox\csuse{##1footins}}%
      \fi}%
    \dolistloop{\@series}
  \fi%
}

%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\print@notesX}
% \begin{macro}{\do@feetX}
% \begin{macro}{\@doreinfeetX}
% We have to add all the new kinds of familiar footnotes to the output
% routine. 
% The normal way to add one series.
% \protect\cs{print@Xnotes} is replaced by \parpackage when using \protect\cs{Pages}.
%    \begin{macrocode}
\newcommand\print@notesX[1]{%
  \xdef\@currentseries{#1}%
  \csuse{footstart#1}{#1}%
  \csuse{footgroup#1}{#1}%
}%
%    \end{macrocode}
% We print all the series of notes by looping on them. 
% We check before printing them that they are not voided.
%    \begin{macrocode}
\newcommand*{\do@feetX}{%
  \unless\ifnofamiliar@%
    \gdef\firstseriesX@{}%
    \setbox\@outputbox \vbox{%
      \unvbox\@outputbox%
      \def\do##1{%
      \ifvoid\csuse{footins##1}\else%
          \global\skip\csuse{footins##1}=\csuse{beforenotesX@##1}%
          \global\advance\skip\csuse{footins##1} by\csuse{afterruleX@##1}%          
          \print@notesX{##1}%
      \fi%
      }%
      \dolistloop{\@series}}%
  \fi%
}%

\newcommand{\@doreinfeetX}{%
  \unless\ifnofamiliar@%  
    \def\do##1{%
      \ifvoid\csuse{footins##1}\else
        \insert%
          \csuse{footins##1}
          {\unvbox\csuse{footins##1}}%
       \fi%
    }%
    \dolistloop{\@series}%
  \fi%
}%

%    \end{macrocode}
% \end{macro}
% \end{macro}
% \end{macro}
%
% \subsubsection{Standard output's commands patching}
% The \protect\ltxclass{memoir} class does not use the `standard' versions of
% \protect\cs{@makecol} and \protect\cs{@reinserts}, due to its sidebar insert.
% We had better add that code if \protect\ltxclass{memoir} is used. (It can
% be awkward dealing with |\if| code within |\if| code, so don't use
% |\ifl@dmemoir| here.)
% \changes{v0.2.1}{2003/09/13}{Major changes to insert code when memoir is loaded}
% \changes{v2.0.0}{2015/07/19}{\protect\cs{@makecol}, \protect\cs{@reinserts} and \protect\cs{@doclearpage} are patched instead of begin redefined}
% \changes{v2.0.0}{2015/07/19}{\protect\cs{doxtrafeeti} becomes \protect\cs{do@feetX};
% \protect\cs{doxtrafeetii} becomes \protect\cs{Xdo@feet};
% \protect\cs{@opxtrafeeti} becomes \protect\cs{@opfeetX};
% \protect\cs{doreinxtrafeetii} becomes \protect\cs{X@doreinfeet};
% \protect\cs{doreinxtrafeeti} becomes \protect\cs{@doreinfeetX}.}
%    \begin{macrocode}
\@ifclassloaded{memoir}{%
%    \end{macrocode}
% \protect\ltxclass{memoir} is loaded so we use \protect\ltxclass{memoir}'s built in hooks.
%    \begin{macrocode}
  \g@addto@macro{\m@mdoextrafeet}{\l@ddoxtrafeet}%
  \g@addto@macro{\m@mdodoreinextrafeet}{\l@ddodoreinxtrafeet}%
  }{%
%    \end{macrocode}
% \protect\ltxclass{memoir} has not been loaded, so patch \protect\cs{@makecol} and 
% \protect\cs{@reinserts}.
%    \begin{macrocode}
  \@ifpackageloaded{fancyhdr}{%
    \patchcmd%
      {\latex@makecol}%
      {\xdef\@freelist{\@freelist\@midlist}}%
      {\xdef\@freelist{\@freelist\@midlist}\l@ddoxtrafeet}%
      {}%
      {\led@error@fail@patch@@makecol}%
    }{%
    \patchcmd%
      {\@makecol}%
      {\xdef\@freelist{\@freelist\@midlist}}%
      {\xdef\@freelist{\@freelist\@midlist}\l@ddoxtrafeet}%
      {}%
      {\led@error@fail@patch@@makecol}%
    }%
    
  \patchcmd%
    {\@reinserts}%
    {\ifvbox}%
    {\l@ddodoreinxtrafeet\ifvbox}%
    {}%
    {\led@error@fail@patch@@reinserts}%
}

%    \end{macrocode}
%
%

%   It turns out that \protect\cs{@doclearpage} also needs modifying.
% \changes{v0.4.1}{2004/03/25}{Added code for changing \protect\cs{@doclearpage}}
% \begin{macro}{\if@led@nofoot}
% We have to check if there are any leftover feet. 
%    \begin{macrocode}
\newif\if@led@nofoot

%    \end{macrocode}
% \end{macro}
%
%    \begin{macrocode}
\@ifclassloaded{memoir}{%
%    \end{macrocode}
% If the \protect\ltxclass{memoir} class is loaded we hook into its modified 
% \verb?\@doclearpage?.
% \begin{macro}{\@mem@extranofeet}
%    \begin{macrocode}
\g@addto@macro{\@mem@extranofeet}{%%
  \def\do#1{%
    \unless\ifnocritical@%
      \ifvoid\csuse{#1footins}\else\@mem@nofootfalse\fi%
    \fi%
    \unless\ifnofamiliar@%
      \ifvoid\csuse{footins#1}\else\@mem@nofootfalse\fi%
    \fi%
    }
  \dolistloop{\@series}%
  }%
}{%
%    \end{macrocode}
% \end{macro}
% As \protect\ltxclass{memoir} is not loaded we have patch \protect\cs{@doclearpage}.
% \begin{macro}{\@led@testifnofoot}
% \begin{macro}{\@doclearpage}
%    \begin{macrocode}
\newcommand*{\@led@testifnofoot}{%
  \@led@nofoottrue%
  \ifvoid\footins\else%
    \@led@nofootfalse%
  \fi%
  \def\do##1{%
    \unless\ifnocritical@%
      \ifvoid\csuse{##1footins}\else%
        \@led@nofootfalse%
      \fi%
    \fi%
    \unless\ifnofamiliar@%    
      \ifvoid\csuse{footins##1}\else%
        \@led@nofootfalse%
      \fi%
    \fi%
  }%
  \dolistloop{\@series}%
}%

\pretocmd%
 {\@doclearpage}%
 {\@led@testifnofoot}%
 {}%
 {\led@error@fail@patch@@doclearpage}%
 
\patchcmd%
 {\@doclearpage}%
 {\ifvoid\footins}%
 {\if@led@nofoot}%
 {}%
 {\led@error@fail@patch@@doclearpage}%

}

%    \end{macrocode}
% \end{macro}
% \end{macro}
%
%
% \section{Cross referencing}
% \label{xref}\relax
%
% 
%
% You can mark a place in the text using a command of the form
% \protect\cs{edlabel}\marg{foo}, and later refer to it using the label
% \meta{foo} by typing \protect\cs{edpageref}\marg{foo}, or \protect\cs{lineref}\marg{foo} or
% \protect\cs{sublineref}\marg{foo} or \protect\cs{pstartref}. These reference commands will produce,
% respectively, the page, line sub-line and pstart on which the
% \protect\cs{edlabel}\marg{foo} command occurred.
%
% The reference macros warn you if a reference is made to an
% undefined label. 
% If \marg{foo} has been used as a label before,
% the \protect\cs{edlabel}\marg{foo} command will issue a complaint; subsequent
% \protect\cs{edpageref} and \protect\cs{edlineref} commands will refer to the
% latest occurrence of \protect\cs{edlabel}\marg{foo}.
%
% \begin{macro}{\labelref@list}
% Set up a new list, \protect\cs{labelref@list}, to hold the page, line and
% sub-line numbers for each label.
%    \begin{macrocode}
\list@create{\labelref@list}
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\zz@@@}
% A convenience macro to zero two labeling counters in one go.
% \changes{v0.2.1}{2003/08/26}{Minor change to \protect\cs{zz@@@}}
%    \begin{macrocode}
\newcommand*{\zz@@@}{000|000} % set two counters to zero in one go

%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\edlabel}
% The \protect\cs{edlabel} command first writes a \protect\cs{@lab} macro to
% the \protect\cs{linenum@out} file.  It then checks to see that the
% \protect\cs{labelref@list} actually has something in it (if not, it
% creates a dummy entry), and pops the next value for the current
% label, storing it in \protect\cs{label@refs}. Finally it defines the
% label to be \protect\cs{empty} so that any future check will turn up
% the fact that it has been used.\footnote{The remaining macros
% in this section were kindly revised by Wayne
% Sullivan,\index{Sullivan, Wayne}  who
% substantially improved their efficiency and flexibility.}
%
% This version of the original \edmac{} \protect\cs{label} uses \protect\cs{@bsphack}
% and \protect\cs{@esphack} to eliminate extra space problems and also use the \LaTeX\ 
% write methods for the \file{.aux} file.
%
%    Jesse Billett\footnote{(\url{jdb43@cam.ac.uk}) via the \texttt{ctt}
% thread `ledmac cross referencing', 25 August 2003.}
% found that the original code could be off by several pages. This version,
% hopefully cures that, and also allows for non-arabic page numbering.
% 
% \changes{v0.2.1}{2003/08/26}{Tweaked \protect\cs{edlabel} to get correct page numbers}
% \changes{v0.14.0}{2012/04/04}{Tweaked \protect\cs{edlabel} to get correct line number if the command is first element of a paragraph.}
% \changes{v1.18.0}{2015/02/23}{\protect\cs{edlabel} is now defined only one time for both \eledmac and \eledpar}
% \changes{v2.5.0}{2015/11/13}{Fix bug when calling\protect\cs{edlabel} in a footnotes of the rightside}
%    \begin{macrocode}
\newcommand*{\edlabel}[1]{%
  \ifl@dpairing\ifautopar%
    \strut%
  \fi\fi%
  \@bsphack%
  \ifboolexpr{bool{ledRcol} or bool{ledRcol@}}{%
    \ifXnote@%
     \protected@write\@auxout{}%
      {\string\l@dmake@labelsR\space\thepage|\l@dparsedstartline|\l@dparsedstartsub|\the\c@pstartR|{#1}}%
      \ifdef{\hypertarget}%
        {\Hy@raisedlink{\hypertarget{#1}{}}}%
        {}%
    \else%
      \write\linenum@outR{\string\@lab}%
      \ifx\labelref@listR\empty%
        \xdef\label@refs{\zz@@@}%
      \else%
        \gl@p\labelref@listR\to\label@refs%
      \fi%
      \ifvmode%
          \advancelabel@refs%
      \fi%
%    \end{macrocode}
% Use code from the kernel \protect\cs{label} command to write the correct
% page number.
% Also define an hypertarget if \protect\package{hyperref} package is loaded.
%    \begin{macrocode}
      \protected@write\@auxout{}%
        {\string\l@dmake@labelsR\space\thepage|\label@refs|\the\c@pstartR|{#1}}%
      \ifdef{\hypertarget}%
        {\Hy@raisedlink{\hypertarget{#1}{}}}%
        {}%
    \fi%
  }{%
    \ifXnote@%
       \protected@write\@auxout{}%
        {\string\l@dmake@labels\space\thepage|\l@dparsedstartline|\l@dparsedstartsub|\the\c@pstart|{#1}}%
        \ifdef{\hypertarget}%
          {\Hy@raisedlink{\hypertarget{#1}{}}}%
          {}%
    \else%
      \write\linenum@out{\string\@lab}%
      \ifx\labelref@list\empty%
        \xdef\label@refs{\zz@@@}%
      \else%
        \gl@p\labelref@list\to\label@refs%
      \fi%
      \ifvmode%
          \advancelabel@refs%
      \fi%
      \protected@write\@auxout{}%
        {\string\l@dmake@labels\space\thepage|\label@refs|\the\c@pstart|{#1}}%
        \ifdef{\hypertarget}%
          {\Hy@raisedlink{\hypertarget{#1}{}}}%
          {}%
    \fi%
  }%
\@esphack}%

%    \end{macrocode}
% \end{macro}
%
%
%\begin{macro}{\advancelabel@refs}
%\begin{macro}{\labelrefsparseline}
%\begin{macro}{\labelrefsparsesubline}
% \changes{v1.4.1}{2012/11/16}{Fix bug with \protect\cs{edlabel}.}
%In cases where \protect\cs{edlabel} is the first element in a paragraph, we have a problem with line counts, because line counts change only at the first horizontal box of the paragraph. 
%Hence, we need to test \protect\cs{edlabel} if it occurs at the start of a paragraph.  To do so, we use \protect\cs{ifvmode}. If the test is true, we must advance by one unit the amount of text we write into the \verb].aux] file. 
% We do so using \protect\cs{advancelabel@refs} command.  
%    \begin{macrocode}
\newcounter{line}%
\newcounter{subline}%
\newcommand{\advancelabel@refs}{%
    \setcounter{line}{\expandafter\labelrefsparseline\label@refs}%
    \stepcounter{line}%
    \ifsublines@%
        \setcounter{subline}{\expandafter\labelrefsparsesubline\label@refs}%
        \stepcounter{subline}{1}%
        \def\label@refs{\theline|\thesubline}%
    \else%
        \def\label@refs{\theline|0}%
    \fi%
}
\def\labelrefsparseline#1|#2{#1}
\def\labelrefsparsesubline#1|#2{#2}
%    \end{macrocode}
% \end{macro}
% \end{macro}
% \end{macro}
% \begin{macro}{\l@dmake@labels}
% The \protect\cs{l@dmake@labels} macro gets executed when the labels file is
% read. For each label it defines a macro, whose name is made up
% partly from the label you supplied, that contains the page, line
% and sub-line numbers.  But first it checks to see whether the
% label has already been used (and complains if it has).
%
% The initial use of \protect\cs{newcommand} is to catch if \protect\cs{l@dmake@labels}
% has been previously defined (by a class or package).
%
% \verb+#1+ page number, \verb+#2+ line number, \verb-#3- sub-line number, \verb+#4+ pstart number, \verb+#5+ label.
%
%    \begin{macrocode}
\newcommand*{\l@dmake@labels}{}
\def\l@dmake@labels#1|#2|#3|#4|#5{%
  \expandafter\ifx\csname the@label#5\endcsname \relax\else
    \led@warn@DuplicateLabel{#5}%
  \fi
  \expandafter\gdef\csname the@label#5\endcsname{#1|#2|#3|#4|\relax}%
  \ignorespaces}

%    \end{macrocode}
% \end{macro}
%
%  \LaTeX\ reads the \verb+aux+ file at both the beginning and end of
% the document, so we have to switch off duplicate label checking
% after the first time the file is read.
%
%    \begin{macrocode}
\AtBeginDocument{%
  \def\l@dmake@labels#1|#2|#3|#4|#5{}%
}

%    \end{macrocode}
%
% \begin{macro}{\@lab}
% The \protect\cs{@lab} command, which appears in the \protect\cs{linenum@out} file,
% appends the current values of page, line and sub-line to the
% \protect\cs{labelref@list}. These values are defined by the earlier
% \protect\cs{@page}, \protect\cs{@nl}, and the \protect\cs{sub@on} and \protect\cs{sub@off} commands
% appearing in the \protect\cs{linenum@out} file.
%
% \LaTeX\ uses the \texttt{page} counter for page numbers. However,
% it appears that this is not the right place to grab the page number.
% That task is now done in the \protect\cs{edlabel} macro. This version
% of \protect\cs{@lab} appends just the current line and sub-line numbers
% to \protect\cs{labelref@list}.
% \changes{v0.2.1}{2003/08/26}{Removed page setting from \protect\cs{@lab}}
% \changes{v0.3.0}{2004/02/14}{Replaced \protect\cs{the}\protect\cs{line@num} by
%                          \protect\cs{linenumr@p}\protect\cs{line@num} in
%                          \protect\cs{@lab}, and similar for sub-lines}
%    \begin{macrocode}

\newcommand*{\@lab}{%
  \ifledRcol
    \xright@appenditem{\linenumr@p{\line@numR}|%
      \ifsublines@ \sublinenumr@p{\subline@numR}\else 0\fi}%
      \to\labelref@listR
  \else
    \xright@appenditem{\linenumr@p{\line@num}|%
      \ifsublines@ \sublinenumr@p{\subline@num}\else 0\fi}%
      \to\labelref@list
  \fi}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\applabel}
% \protect\cs{applabel}, if called in \protect\cs{edtext} will insert automatically both a start and an end label for the current edtext lines.
%    \begin{macrocode}
\newcommand*{\applabel}[1]{%
  \ifnum\@edtext@level>0%  
%    \end{macrocode}
% Label should not be already defined.
%    \begin{macrocode}
      \ifcsundef{the@label#1}{%
        \csdef{the@label#1}{applabel}%
       }%
       {%
         \led@warn@DuplicateLabel{#1 (applabel)}%
       }%
%    \end{macrocode}
% Parse the \protect\cs{edtext} line numbers.
%    \begin{macrocode}      
     \expandafter\l@dp@rsefootspec\l@d@nums|%
%    \end{macrocode}
% Use the \LaTeX\  standard hack for label. 
%    \begin{macrocode}
     \@bsphack%
%    \end{macrocode}
% And now, write the data in the auxiliary file.
%    \begin{macrocode}
      \ifledRcol%
        \protected@write\@auxout{}%
          {\string\l@dmake@labelsR\space\l@dparsedstartpage|\l@dparsedstartline|\l@dparsedstartsub|\the\c@pstartR|{#1:start}}%
        \ifdef{\hypertarget}%
          {\Hy@raisedlink{\hypertarget{#1:start}{}}}%
          {}%
        \protected@write\@auxout{}%
          {\string\l@dmake@labelsR\space\l@dparsedendpage|\l@dparsedendline|\l@dparsedendsub|\the\c@pstartR|{#1:end}}%
      \else%
        \protected@write\@auxout{}%
          {\string\l@dmake@labels\space\l@dparsedstartpage|\l@dparsedstartline|\l@dparsedstartsub|\the\c@pstart|{#1:start}}%
        \ifdef{\hypertarget}%
          {\Hy@raisedlink{\hypertarget{#1:start}{}}}%
          {}%
        \protected@write\@auxout{}%
          {\string\l@dmake@labels\space\l@dparsedendpage|\l@dparsedendline|\l@dparsedendsub|\the\c@pstart|{#1:end}}%
      \fi%
%    \end{macrocode}
% Use the \LaTeX\ standard hack for label. 
%    \begin{macrocode}
      \@esphack%
%    \end{macrocode}
% Warning if \protect\cs{applabel} is called outside of \protect\cs{edtext}.
%    \begin{macrocode}  
  \else%
    \led@warn@AppLabelOutEdtext{#1}%
  \fi%
%    \end{macrocode}
% End of \protect\cs{applabel}
%    \begin{macrocode}
}%
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\edlabelS}
% \begin{macro}{\edlabelE}
% \begin{macro}{\edlabelSE}
% \cs{edlabelS} and \cs{edlabelE} are just used to mark the beginning and the end of a passage.
%    \begin{macrocode}
\newcommand{\edlabelS}[1]{%
  \edlabel{#1:start}%
}
\newcommand{\edlabelE}[1]{%
  \edlabel{#1:end}%
}
\newcommand{\edlabelSE}[1]{%
  \edlabelS{#1}%
  \edlabelE{#1}%
}
%    \end{macrocode}
% \end{macro}
% \end{macro}
% \begin{macro}{\wrap@edcrossref}
% \changes{v1.12.1}{2014/08/06}{Fix spurious spaces.}
% \changes{v1.12.7}{2014/09/07}{\protect\cs{wrap@edcrossref} is now robust}
% \protect\cs{wrap@edcrossref} is called around all \macpackage crossref commands, except those which start with x. 
% It adds the hyperlink.
%    \begin{macrocode}
\newrobustcmd{\wrap@edcrossref}[2]{%
  \ifdef{\hyperlink}%
    {\hyperlink{#1}{#2}}%
    {#2}%
}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\edpageref}
% \begin{macro}{\xpageref}
% If the specified label exists, \protect\cs{edpageref} gives its page number.
% 
% For this reference command, as for the other two, a special
% version with prefix \verb"x" is provided for use in places where the
% command is to be scanned as a number, as in \protect\cs{linenum}. These
% special versions have two limitations: they do not print error
% messages if the reference is unknown, and they can't appear as
% the first label or reference command in the file; you must ensure
% that a \protect\cs{edlabel} or a normal reference command appears first, or
% these x-commands will always return zeros.
% 
% \LaTeX\ already defines a \protect\cs{pageref}, so changing the name
%  to \protect\cs{edpageref}.
%    \begin{macrocode}
\newcommand*{\edpageref}[1]{\l@dref@undefined{#1}\wrap@edcrossref{#1}{\l@dgetref@num{1}{#1}}}
\newcommand*{\xpageref}[1]{\l@dgetref@num{1}{#1}}

%    \end{macrocode}
% \end{macro}
% \end{macro}
%
% \begin{macro}{\edlineref}
% \begin{macro}{\xlineref}
% \changes{v1.16.1}{2015/02/05}{\protect\cs{lineref} is not defined if defined by some other package, like lineno.  
% \Eledmac provides \protect\cs{edlineref} instead.}
% \changes{v2.5.0}{2015/11/13}{\protect\cs{xlineref} does not include anymore the side flag. Use \protect\cs{xflagref} to get it. Not that \protect\cs{edlineref} still contains the flag.}
% If the specified label exists, \protect\cs{lineref} gives its line number.
%    \begin{macrocode}
\newcommand*{\edlineref}[1]{\l@dref@undefined{#1}\wrap@edcrossref{#1}{\l@dgetref@num{2}{#1}\xflagref{#1}}}%
\newcommand*{\xlineref}[1]{\l@dgetref@num{2}{#1}}%

%    \end{macrocode}
% \end{macro}
% \end{macro}
%
% \begin{macro}{\sublineref}
% \begin{macro}{\xsublineref}
% If the specified label exists, \protect\cs{sublineref} gives its sub-line number.
%    \begin{macrocode}
\newcommand*{\sublineref}[1]{\l@dref@undefined{#1}\wrap@edcrossref{#1}{\l@dgetref@num{3}{#1}}}
\newcommand*{\xsublineref}[1]{\l@dgetref@num{3}{#1}}

%    \end{macrocode}
% \end{macro}
% \end{macro}
%
% \begin{macro}{\pstarteref}
% \begin{macro}{\xpstartref}
% If the specified label exists, \protect\cs{pstartref} gives its pstart number.
%    \begin{macrocode}
\newcommand*{\pstartref}[1]{\l@dref@undefined{#1}\wrap@edcrossref{#1}{\l@dgetref@num{4}{#1}}}
\newcommand*{\xpstartref}[1]{\l@dgetref@num{4}{#1}}

%    \end{macrocode}
% \end{macro}
% \end{macro}
% \begin{macro}{\xflagref}
% \cs{xflagref} finds the side flag of any ref defined with \cs{edlabel}.
%    \begin{macrocode}
\newcommand*{\xflagref}[1]{\l@dgetref@num{5}{#1}}
%    \end{macrocode}
% \end{macro}
% The next three macros are used by the referencing commands above,
% and do the job of extracting the right numbers from the label
% macro that contains the page, line, and sub-line number.
%
% \begin{macro}{\l@dref@undefined}
% The \protect\cs{l@dref@undefined} macro is called when you refer to a label with
% the normal referencing macros. Its argument is a label, and it
% just checks that the label has been defined.
% 
%    \begin{macrocode}
\newcommand*{\l@dref@undefined}[1]{%
  \expandafter\ifx\csname the@label#1\endcsname\relax
    \led@warn@RefUndefined{#1}%
  \fi}

%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\l@dgetref@num}
% Next, \protect\cs{l@dgetref@num} fetches the number we want.  It has two
% arguments: the first is simply a digit, specifying whether to
% fetch a page (1), line (2),  sub-line (3), (4) pstart number or (5) side flag.  (This
% switching is done by calling \protect\cs{l@dlabel@parse}.) The second argument
% is the label-macro, which because of the \protect\cs{@lab} macro above is
% defined to be a string of the type \verb"123|456|789".
%    \begin{macrocode}
\newcommand*{\l@dgetref@num}[2]{%
  \expandafter
  \ifx\csname the@label#2\endcsname \relax
    000%
  \else
    \expandafter\expandafter\expandafter
    \l@dlabel@parse\csname the@label#2\endcsname|#1%
  \fi}

%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\l@dlabel@parse}
% Notice that we slipped another \verb"|" delimiter into the
% penultimate line of \protect\cs{l@dgetref@num}, to
% keep the `switch-number' separate from the reference numbers.  This
% \verb"|" is used as another parameter delimiter by \protect\cs{l@dlabel@parse},
% which extracts the appropriate number from its first arguments.
% The \verb"|"-delimited arguments consist of the expanded label-macro
% (three reference numbers), followed by the switch-number (1,
% 2, 3 or 4) which defines which of the earlier fiver numbers to
% pick out. (It was earlier given as the first argument of
% \protect\cs{l@dgetref@num}.)
%    \begin{macrocode}
\newcommand*{\l@dlabel@parse}{}
\def\l@dlabel@parse#1|#2|#3|#4|#5|#6{%
  \ifcase #6%
  \or #1%
  \or #2%
  \or #3%
  \or #4%
  \or #5%
  \fi}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\xxref}
% \changes{v1.19.0}{2015/03/06}{\protect\cs{xxref} works also with right side numbers, when \protect\cs{@Rlineflag} is not empty.}
% \changes{v1.20.0}{2015/03/22}{Debug \protect\cs{xxref} when not loading \eledpar (fix bug added in 1.19.0).}
% The \protect\cs{xxref} command takes two arguments, both of which are
% labels, e.g., \protect\cs{xxref}\verb+{mouse}{elephant}+.  It first does some
% checking to make sure that the labels do exist (if one does not,
% those numbers are set to zero).  Then it calls \protect\cs{linenum} and sets
% the beginning page, line, and sub-line numbers to those of the
% place where \protect\cs{label}\verb+{mouse}+ was placed, and the ending
% numbers to those at \verb+{elephant}+.  The point of this is
% to be able to manufacture footnote line references to passages
% which cannot be specified in the normal way as the first argument
% to \protect\cs{edtext} for one reason or another.  Using \protect\cs{xxref} in the
% second argument of \protect\cs{edtext} lets you set things up at least
% semi-automatically.
%    \begin{macrocode}
\newcommand*{\xxref}[2]{%
  {%
   \expandafter\ifx\csname the@label#1\endcsname \relax%
     \expandafter\let\csname the@@label#1\endcsname\zz@@@%
    \else%
      \expandafter\def\csname the@@label#1\endcsname{\l@dgetref@num{1}{#1}|\l@dgetref@num{2}{#1}|\l@dgetref@num{3}{#1}}%
   \fi%
   \expandafter\ifx\csname the@label#2\endcsname \relax%
     \expandafter\let\csname the@@label#2\endcsname\zz@@@%
   \else%
      \expandafter\def\csname the@@label#2\endcsname{\l@dgetref@num{1}{#2}|\l@dgetref@num{2}{#2}|\l@dgetref@num{3}{#2}}%
   \fi%
   \letcs{\@tempa}{the@@label#1}%
   \letcs{\@tempb}{the@@label#2}%
   \linenum{\@tempa|%
    \@tempb}}}%

%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\appref}
% \begin{macro}{\apprefwithpage}
% \begin{macro}{\SEref}
% \begin{macro}{\SErefwithpage}
% \begin{macro}{\SErefwithpage}
% \protect\cs{appref}, \cs{SEref}, \cs{apprefwithpage}, \cs{SErefwithpage} and \cs{SEonlypage}    print crossref to some start / end lines defined by specific commands.
% It prints the lines as they should be printed in the apparatus (critical notes for not suffixed versions, endnotes for suffixed versions).
% 
% Here we define hooks similar to some those related to critical footnotes or endnotes.
%
% So, first declare the default value of the hooks for the pseudo-series. 
% Also declare the internal toggle which are switch by \macpackage{}.
%    \begin{macrocode}
\def\Xtwolines@appref{}%
\def\Xtwolines@SEref{}%

\def\Xmorethantwolines@appref{}%
\def\Xmorethantwolines@SEref{}%

\def\Xlinerangeseparator@appref{\endashchar}%
\def\Xlinerangeseparator@SEref{\endashchar}%

\def\Xsublinesep@appref{\fullstop}%
\def\Xsublinesep@SEref{\fullstop}%

\newtoggle{Xtwolinesbutnotmore@appref}%
\newtoggle{Xtwolinesbutnotmore@SEref}%

\newtoggle{Xtwolinesonlyinsamepage@appref}%

\newtoggle{Xtwolinesonlyinsamepage@SEref}%

\newtoggle{Xlineflag@appref}%
\toggletrue{Xlineflag@appref}%Here exception
\newtoggle{Xlineflag@SEref}%
\toggletrue{Xlineflag@SEref}%%Here exception

\def\Xendtwolines@apprefwithpage{}%
\def\Xendtwolines@SErefwithpage{}%

\def\Xendmorethantwolines@apprefwithpage{}%
\def\Xendmorethantwolines@SErefwithpage{}%

\def\Xendlinerangeseparator@apprefwithpage{\endashchar}
\def\Xendlinerangeseparator@SErefwithpage{\endashchar}
\def\Xendlinerangeseparator@SErefonlypage{\endashchar}

\def\Xendbeforepagenumber@apprefwithpage{p.}%
\def\Xendbeforepagenumber@SErefwithpage{p.}%
\def\Xendbeforepagenumber@SEonlypage{p.}%

\def\Xendafterpagenumber@apprefwithpage{) }%
\def\Xendafterpagenumber@SErefwithpage{) }%


\def\Xendlineprefixsingle@apprefwithpage{}%
\def\Xendlineprefixsingle@SErefwithpage{}%

\def\Xendlineprefixmore@apprefwithpage{}%
\def\Xendlineprefixmore@SErefwithpage{}%

\newtoggle{Xendtwolinesbutnotmore@apprefwithpage}%
\newtoggle{Xendtwolinesbutnotmore@SErefwithpage}%

\def\Xendsublinesep@apprefwithpage{\fullstop}%
\def\Xendsublinesep@SErefwithpage{\fullstop}%

\newtoggle{Xendtwolinesonlyinsamepage@apprefwithpage}%
\newtoggle{Xendtwolinesonlyinsamepage@SErefwithpage}%

\newtoggle{Xendlineflag@apprefwithpage}
\toggletrue{Xendlineflag@apprefwithpage}%Here, exception
\newtoggle{Xendlineflag@SErefwithpage}
\toggletrue{Xendlineflag@SErefwithpage}%Here, exception

%    \end{macrocode}
% Note that some of these hooks are declared but no user command can change their values. Such hooks are not pertinent for \verb+appref+ and \verb+apprefwithpage+ pseudo-series, but their values are nonetheless tested in some  macros.
%    \begin{macrocode}

\xdef\Xboxstartlinenum@appref{0pt}
\xdef\Xboxstartlinenum@SEref{0pt}

\xdef\Xboxendlinenum@appref{0pt}
\xdef\Xboxendlinenum@SEref{0pt}

\xdef\Xendboxstartlinenum@apprefwithpage{0pt}
\xdef\Xendboxstartlinenum@SErefwithpage{0pt}

\xdef\Xendboxendlinenum@apprefwithpage{0pt}
\xdef\Xendboxendlinenum@SErefwithpage{0pt}

%    \end{macrocode}
% Now, declare the default values of \protect\cs{@apprefprefixsingle} and \protect\cs{@apprefprefixmore}, \cs{@SErefprefix}, \cs{@SErefprefixmore} and the commands which defines them.
% \changes{v2.5.0}{2015/11/13}{Debug \protect\cs{setapprefprefixsingle}}
%    \begin{macrocode}
\newcommand\@apprefprefixsingle{}%
\newcommand\@SErefprefixsingle{}%

\newcommand\@apprefprefixmore{}%
\newcommand\@SErefprefixmore{}%

\newcommand{\setapprefprefixsingle}[1]{%
  \gdef\@apprefprefixsingle{#1}%
}
\newcommand{\setSErefprefixsingle}[1]{%
  \gdef\@SErefprefixsingle{#1}%
}

\newcommand{\setapprefprefixmore}[1]{%
  \gdef\@apprefprefixmore{#1}%
}
\newcommand{\setSErefprefixmore}[1]{%
  \gdef\@SErefprefixmore{#1}%
}

%    \end{macrocode}
% And not \cs{setSErefonlypageprefixsingle} and \cs{setSErefonlypageprefixmore}. 
%    \begin{macrocode}
\let\setSErefonlypageprefixsingle\XendbeforepagenumberSErefonlypage%
\newcommand{\setSErefonlypageprefixmore}[1]{%
  \gdef\SErefonlypage@prefixmore{#1}%
}%
%    \end{macrocode}
% \changes{v1.23.0}{2015/05/18}{Debug \protect\cs{Xendtwolines}, \protect\cs{Xendmorethantwolines}, \protect\cs{Xendtwolinesbutnotmore} and \protect\cs{Xendtwolinesonlyinsamepage} when using \protect\cs{apprefwithpage}.}
% And now, the main commands: \protect\cs{appref}, \protect\cs{apprefwithpage}, \cs{SEref} and \cs{SErefwithpage}.
% These commands call \cs{refformated@} and \protect\cs{refformatedwithpage}, which calls \cs{printlines} and \cs{printendlines} . That is why we have previously declared all hooks values tested inside these last commands.
%    \begin{macrocode}

\newcommandx{\appref}[2][1,usedefault]{\refformated@{#1}{#2}{appref}}
\newcommandx{\SEref}[2][1,usedefault]{\refformated@{#1}{#2}{SEref}}

\newcommandx{\apprefwithpage}[2][1,usedefault]{\refformatedwithpage@{#1}{#2}{appref}}
\newcommandx{\SErefwithpage}[2][1,usedefault]{\refformatedwithpage@{#1}{#2}{SEref}}
\newcommandx{\SErefonlypage}[2][1,usedefault]{\refformatedonlypage@{#1}{#2}{SEref}}


\newcommand{\refformated@}[3]{%
  \def\do##1{%
    \setkeys[mac]{truefootnoteoption}{##1}%
  }%
 \notblank{#1}{\docsvlist{#1}}{}%
 \xdef\@currentseries{#3}%
 \ifcsempty{@#3prefixmore}%
   {\@apprefprefixsingle}%
   {%
     \IfEq{\xlineref{#2:start}}{\xlineref{#2:end}}%
       {\csuse{@#3prefixsingle}}%
       {\csuse{@#3prefixmore}}%
   }%
 \ifboolexpr{%
   test{\ifcsundef{the@label#2:start}}%
   or test{\ifcsundef{the@label#2:end}}%
  }%
   {\led@warn@pairRefUndefined{#2}\nfss@text{\reset@font\bfseries ??}}%
   {%
    \def\@this@crossref@start{#2:start}%
    \def\@this@crossref@end{#2:end}%
    \printlines\xpageref{#2:start}|\xlineref{#2:start}|\xsublineref{#2:start}|\xpageref{#2:end}|\xlineref{#2:end}|\xsublineref{#2:end}|\relax|\xflagref{#2:start}|%
    \undef\@this@crossref@end%
    \undef\@this@crossref@start%   
   }%
  \def\do##1{%
    \setkeys[mac]{falsefootnoteoption}{##1}%
  }%
 \notblank{#1}{\docsvlist{#1}}{}%
}%

\newcommand{\refformatedwithpage@}[3]{%
  \def\do##1{%
    \setkeys[mac]{truefootnoteoption}{##1}%
  }%
 \notblank{#1}{\docsvlist{#1}}{}%
 \xdef\@currentseries{#3withpage}%
 \ifboolexpr{%
   test{\ifcsundef{the@label#2:start}}%
   or test{\ifcsundef{the@label#2:end}}%
  }%
   {\led@warn@pairRefUndefined{#2}\nfss@text{\reset@font\bfseries ??}}% 
   {%
   \def\@this@crossref@start{#2:start}%
   \def\@this@crossref@end{#2:end}%
   \printendlines\xpageref{#2:start}|\xlineref{#2:start}|\xsublineref{#2:start}|\xpageref{#2:end}|\xlineref{#2:end}|\xsublineref{#2:end}|\relax|\xflagref{#2:start}|%
    \undef\@this@crossref@end%
    \undef\@this@crossref@start%
   }%
  \def\do##1{%
    \setkeys[mac]{falsefootnoteoption}{##1}%
  }%
 \notblank{#1}{\docsvlist{#1}}{}%
}%

\newcommand{\refformatedonlypage@}[3]{%
  \def\do##1{%
    \setkeys[mac]{truefootnoteoption}{##1}%
  }%
 \notblank{#1}{\docsvlist{#1}}{}%
 \xdef\@currentseries{#3onlypage}%
 \ifboolexpr{%
   test{\ifcsundef{the@label#2:start}}%
   or test{\ifcsundef{the@label#2:end}}%
  }%
   {\led@warn@pairRefUndefined{#2}\nfss@text{\reset@font\bfseries ??}}% 
   {\ifnumequal{\xpageref{#2:end}}{\xpageref{#2:start}}%
       {%
       \printnpnum{%
         \wrap@edcrossref{#2:start}{\xpageref{#2:start}}%
         }%
       }%
     {%
      \ifcsvoid{#3onlypage@prefixmore}%
        {}%
        {\csletcs{Xendbeforepagenumber@#3onlypage}{#3onlypage@prefixmore}}%
      \ifdefined\linerangesep@%
        \printnpnum{%
          \wrap@edcrossref{#2:start}{\xpageref{#2:start}}%
          \linerangesep@%
          \wrap@edcrossref{#2:end}{\xpageref{#2:end}}%
        }%
      \else%
        \printnpnum{%
          \wrap@edcrossref{#2:start}{\xpageref{#2:start}}%
          \csuse{Xendlinerangeseparator@\@currentseries}%
          \wrap@edcrossref{#2:end}{\xpageref{#2:end}}%
        }%
      \fi%   
     }%
   }%
  \def\do##1{%
    \setkeys[mac]{falsefootnoteoption}{##1}%
  }%
 \notblank{#1}{\docsvlist{#1}}{}%
}%
%    \end{macrocode}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \begin{macro}{\edmakelabel}
% Sometimes the \protect\cs{edlabel} command cannot be used to specify
% exactly the page and line desired; you can use the \protect\cs{edmakelabel} macro
% make your own label.  For example, if you insert
% \protect\cs{edmakelabel}\verb+{elephant}{10|25|0}+ you will have created a
% new label, and a later call to \protect\cs{edpageref}\verb+{elephant}+ would
% print `10' and \protect\cs{lineref}\verb+{elephant}+ would print `25'.
% The sub-line number here is zero.
% \protect\cs{edmakelabel} takes a label, followed by a page and a line number(s)
% as arguments.
% \LaTeX\ defines a \protect\cs{makelabel} macro which is used in lists.
%          Peter Wilson has changed the name to \protect\cs{edmakelabel}. 
%    \begin{macrocode}
\newcommand*{\edmakelabel}[2]{\expandafter\xdef\csname the@label#1\endcsname{#2}}

%    \end{macrocode}
% (If you are only going to refer to such a label using
% \protect\cs{xxref}, then you can omit entries in the same way as with
% \protect\cs{linenum} (see \reff{linenumdef} and
% \reff{linenumbers}), since \protect\cs{xxref} makes a call to
% \protect\cs{linenum} in order to do its work.)
% \end{macro}
%
%
%
% \section{Side notes}
%
%    Regular \protect\cs{marginpar}s do not work inside numbered text\,---\,they
% do not produce any note but do put an extra unnumbered blank line into
% the text.
%
% \begin{macro}{\@xympar}
% Changing \protect\cs{@xympar} a little at least ensures that \protect\cs{marginpar}s
% in numbered text do not disturb the flow.
% \changes{v0.5.0}{2004/04/01}{Eliminated \protect\cs{marginpar} disturbance}
% \changes{v2.0.0}{2104/06/28}{Patching \protect\cs{@xympar} instead of redefining it}
%
%    \begin{macrocode}
\pretocmd{\@xympar}%
  {\ifnumberedpar@
    \led@warn@NoMarginpars
    \@esphack
  \else}%
  {}%
  {}%

\apptocmd{\@xympar}%
  {\fi}%
  {}
  {}

%    \end{macrocode}
% \end{macro}
%
%  We provide side notes as replacement for \protect\cs{marginpar} in numbered text.
% \changes{v0.5.0}{2004/04/03}{Added left and right side notes}
% \changes{v0.5.1}{2004/04/10}{Added moveable side note}
%
% \begin{macro}{\sidenote@margin}
% \begin{macro}{\sidenotemargin}
% \begin{macro}{\l@dgetsidenote@margin}
% These are the sidenote equivalents to \protect\cs{line@margin} and \protect\cs{linenummargin}
% for specifying which margin. The default is the right margin (opposite to
% the default for line numbers).
% \protect\cs{l@dgetsidenote@margin} returns the number associated to side note margin:
% \begin{description}
%   \item[left]: 0
%    \item[right]: 1
%    \item[outer]: 2
%    \item[inner]: 3
% \end{description}
% \changes{v0.5.1}{2004/04/10}{Added \protect\cs{sidenotemargin} and \protect\cs{sidenote@margin}}
% \changes{v0.7.0}{2005/02/23}{Added \protect\cs{l@dgetsidenote@margin}}
% \changes{v1.12.0}{2014/08/05}{\protect\cs{sidenotemargin} is now directly defined in \protect\package{eledmac} to be able to manage \protect\package{eledpar}.}
%    \begin{macrocode}
\newcount\sidenote@margin
\newcommand*{\sidenotemargin}[1]{{%
  \l@dgetsidenote@margin{#1}%
  \ifnum\@l@dtempcntb>\m@ne
    \ifledRcol
      \global\sidenote@marginR=\@l@dtempcntb
    \else
      \global\sidenote@margin=\@l@dtempcntb
    \fi
  \fi}}
\newcommand*{\l@dgetsidenote@margin}[1]{%
  \def\@tempa{#1}\def\@tempb{left}%
  \ifx\@tempa\@tempb
    \@l@dtempcntb \z@
  \else
    \def\@tempb{right}%
    \ifx\@tempa\@tempb
      \@l@dtempcntb \@ne
    \else
      \def\@tempb{outer}%
      \ifx\@tempa\@tempb
        \@l@dtempcntb \tw@
      \else
        \def\@tempb{inner}%
        \ifx\@tempa\@tempb
          \@l@dtempcntb \thr@@
        \else
          \led@warn@BadSidenotemargin
          \@l@dtempcntb \m@ne
        \fi
      \fi
    \fi
  \fi}
\sidenotemargin{right}

%    \end{macrocode}
% \end{macro}
% \end{macro}
% \end{macro}
%
% \begin{macro}{\l@dlp@rbox}
% \begin{macro}{\l@drp@rbox}
% We need two boxes to store sidenote texts.
%    \begin{macrocode}
\newbox\l@dlp@rbox
\newbox\l@drp@rbox

%    \end{macrocode}
% \end{macro}
% \end{macro}
%
%
% \begin{macro}{\ledlsnotewidth}
% \begin{macro}{\ledrsnotewidth}
% \begin{macro}{\ledlsnotesep}
% \begin{macro}{\ledrsnotesep}
% \begin{macro}{\ledlsnotefontsetup}
% \begin{macro}{\ledrsnotefontsetup}
% These specify the width of the left/right boxes (initialised to
% \protect\cs{marginparwidth}), their distance from
% the text (initialised to \protect\cs{linenumsep}), and the fonts used. 
%    \begin{macrocode}
\newdimen\ledlsnotewidth \ledlsnotewidth=\marginparwidth
\newdimen\ledrsnotewidth \ledrsnotewidth=\marginparwidth
\newdimen\ledlsnotesep \ledlsnotesep=\linenumsep
\newdimen\ledrsnotesep \ledrsnotesep=\linenumsep
\newcommand*{\ledlsnotefontsetup}{\raggedleft\footnotesize}
\newcommand*{\ledrsnotefontsetup}{\raggedright\footnotesize}

%    \end{macrocode}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
%
%
% \begin{macro}{\ledleftnote}
% \begin{macro}{\ledrightnote}
% \begin{macro}{\ledinnernote}
% \begin{macro}{\ledouterote}
% \begin{macro}{\ledsidenote}
% \protect\cs{ledleftnote}, \protect\cs{ledrightnote}, \protect\cs{ledinnernote}, \protect\cs{ledouternote} are the
% user commands for left, right, inner and outer sidenotes.
% The two last one are just alias for the two first one, depending of the page number.
% \protect\cs{ledsidenote}\marg{text} is the command for a moveable sidenote.
%    \begin{macrocode}
\newcommand*{\ledleftnote}[1]{\edtext{}{\l@dlsnote{#1}}}
\newcommand*{\ledrightnote}[1]{\edtext{}{\l@drsnote{#1}}}

\newcommand*{\ledinnernote}[1]{%
  \ifodd\c@page% Do not use \page@num, because it is not yet calculated when command is called
    \ledleftnote{#1}%
  \else%
    \ledrightnote{#1}%
  \fi%
}

\newcommand*{\ledouternote}[1]{%
  \ifodd\c@page% Do not use \page@num, because it is not yet calculated when command is called
    \ledrightnote{#1}%
  \else%
    \ledleftnote{#1}%
  \fi%
}

\newcommand*{\ledsidenote}[1]{\edtext{}{\l@dcsnote{#1}}}
%    \end{macrocode}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
%
%
% \begin{macro}{\l@dlsnote}
% \begin{macro}{\l@drsnote}
% \begin{macro}{\l@dcsnote}
% \changes{v1.12.0}{2014/08/05}{\protect\cs{l@dlsnote},\protect\cs{l@drsnote} and \protect\cs{l@dcsnote} defined only one time, in \eledmac, including needs for eledpar case.}.
% The `footnotes' for left, right, and moveable sidenotes. The whole 
% scheme is reminiscent of the critical footnotes code.
%    \begin{macrocode}
\newif\ifrightnoteup
  \rightnoteuptrue

\newcommand*{\l@dlsnote}[1]{%
  \begingroup%
  \newcommand{\content}{#1}%
  \ifnumberedpar@
    \ifledRcol%
      \xright@appenditem{\noexpand\vl@dlsnote{\expandonce\content}}%
                         \to\inserts@listR
      \global\advance\insert@countR \@ne%
    \else%
      \xright@appenditem{\noexpand\vl@dlsnote{\expandonce\content}}%
                         \to\inserts@list
      \global\advance\insert@count \@ne%
    \fi
  \fi\ignorespaces\endgroup}

\newcommand*{\l@drsnote}[1]{%
  \begingroup%
  \newcommand{\content}{#1}%
  \ifnumberedpar@
    \ifledRcol%
      \xright@appenditem{\noexpand\vl@drsnote{\expandonce\content}}%
                         \to\inserts@listR
       \global\advance\insert@countR \@ne%
    \else%
      \xright@appenditem{\noexpand\vl@drsnote{\expandonce\content}}%
                         \to\inserts@list
      \global\advance\insert@count \@ne%
    \fi
  \fi\ignorespaces\endgroup}

\newcommand*{\l@dcsnote}[1]{%
  \begingroup%
  \newcommand{\content}{#1}%
  \ifnumberedpar@
    \ifledRcol%
      \xright@appenditem{\noexpand\vl@dcsnote{\expandonce\content}}%
                         \to\inserts@listR
       \global\advance\insert@countR \@ne%
    \else%
      \xright@appenditem{\noexpand\vl@dcsnote{\expandonce\content}}%
                         \to\inserts@list
      \global\advance\insert@count \@ne%
    \fi
  \fi\ignorespaces\endgroup}

%    \end{macrocode}
% \end{macro}
% \end{macro}
% \end{macro}
%
% \begin{macro}{\vl@dlsnote}
% \begin{macro}{\vl@drsnote}
% \begin{macro}{\vl@dcsnote}
% Put the left/right text into boxes, but just save the moveable text.
% \protect\cs{l@dcsnotetext}, \protect\cs{l@dcsnotetext@l} and \protect\cs{l@dcsnotetext@r} are \protect\package{etoolbox}'s  lists which will store the content of side notes.
% We store the content in lists, because we need to loop later on them, in case many sidenote co-exist for the same line.
% That is there some special test to do, in order to:
% \begin{itemize}
%   \item Store the content of \protect\cs{ledsidenote} to \protect\cs{l@dcsnotetext} in any cases.
%   \item Store the content of \protect\cs{rightsidenote} to:
%         \begin{itemize}
%             \item \protect\cs{l@dcsnotetext} if \protect\cs{ledsidenote} is to be put on right.
%             \item \protect\cs{l@dcsnotetext@r} if \protect\cs{ledsidenote} is to be put on left.
%         \end{itemize}
%   \item Store the content of \protect\cs{leftsidenote} to:
%         \begin{itemize}
%             \item \protect\cs{l@dcsnotetext} if \protect\cs{ledsidenote} is to be put on left.
%             \item \protect\cs{l@dcsnotetext@l} if \protect\cs{ledsidenote} is to be put on right.
%         \end{itemize}
% \end{itemize}
%    \begin{macrocode}
\newcommand*{\vl@dlsnote}[1]{%
  \ifledRcol@%
    \@l@dtempcntb=\sidenote@marginR%
    \ifnum\@l@dtempcntb>\@ne%
      \advance\@l@dtempcntb by\page@numR%
    \fi%
  \else%
    \@l@dtempcntb=\sidenote@margin%
    \ifnum\@l@dtempcntb>\@ne%
      \advance\@l@dtempcntb by\page@num%
    \fi%
  \fi%
  \ifodd\@l@dtempcntb%
    \listgadd{\l@dcsnotetext@l}{#1}%
  \else%
    \listgadd{\l@dcsnotetext}{#1}%
  \fi
}
\newcommand*{\vl@drsnote}[1]{%
  \ifledRcol@%
    \@l@dtempcntb=\sidenote@marginR%
    \ifnum\@l@dtempcntb>\@ne%
      \advance\@l@dtempcntb by\page@numR%
    \fi%
  \else%
    \@l@dtempcntb=\sidenote@margin%
    \ifnum\@l@dtempcntb>\@ne%
      \advance\@l@dtempcntb by\page@num%
    \fi%
  \fi%
  \ifodd\@l@dtempcntb%
    \listgadd{\l@dcsnotetext}{#1}%
  \else%
    \listgadd{\l@dcsnotetext@r}{#1}%
  \fi%
}
\newcommand*{\vl@dcsnote}[1]{\listgadd{\l@dcsnotetext}{#1}}

%    \end{macrocode}
% \end{macro}
% \end{macro}
% \end{macro}
%
%
% \begin{macro}{\setl@dlp@rbox}
% \begin{macro}{\setl@drpr@box}
% \protect\cs{setl@dlprbox}\marg{lednums}\marg{tag}\marg{text} puts \meta{text}
% into the \protect\cs{l@dlp@rbox} box. And similarly for the right side box.
% It is these boxes that finally
% get displayed in the margins.
%    \begin{macrocode}
\newcommand*{\setl@dlp@rbox}[1]{%
  {\parindent\z@\hsize=\ledlsnotewidth\ledlsnotefontsetup
   \global\setbox\l@dlp@rbox
   \ifleftnoteup
     =\vbox to\z@{\vss #1}%
   \else
     =\vbox to 0.70\baselineskip{\strut#1\vss}%
   \fi}}
\newcommand*{\setl@drp@rbox}[1]{%
  {\parindent\z@\hsize=\ledrsnotewidth\ledrsnotefontsetup
   \global\setbox\l@drp@rbox
   \ifrightnoteup
     =\vbox to\z@{\vss#1}%
   \else
     =\vbox to0.7\baselineskip{\strut#1\vss}%
   \fi}}
\newif\ifleftnoteup
  \leftnoteuptrue
%    \end{macrocode}
% \end{macro}
% \end{macro}
%
% \begin{macro}{\@sidenotesep}
% This macro is used to separate sidenotes of the same line.
%    \begin{macrocode}
\newcommand{\setsidenotesep}[1]{\gdef\@sidenotesep{#1}}
\newcommand{\@sidenotesep}{, }
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\affixside@note}
% This macro puts any moveable sidenote text into the left or right sidenote
% box, depending on which margin it is meant to go in. It's a very much
% stripped down version of \protect\cs{affixlin@num}.
%
% Before do it, we concatenate all moveable sidenotes of the line, using \protect\cs{@sidenotesep} as separator.
% It is the result that we put on the sidenote.
% \changes{v1.4.1}{2012/11/16}{Remove spurious spaces.}
%    \begin{macrocode}
\newcommand*{\affixside@note}{%
    \def\sidenotecontent@{}%
    \numgdef{\itemcount@}{0}%
    \def\do##1{%
        \ifnumequal{\itemcount@}{0}%
            {%
            \appto\sidenotecontent@{##1}}% Not print not separator before the 1st note
            {\appto\sidenotecontent@{\@sidenotesep ##1}%
            }%
            \numgdef{\itemcount@}{\itemcount@+1}%
    }%
    \dolistloop{\l@dcsnotetext}%
    \ifnumgreater{\itemcount@}{1}{\led@err@ManySidenotes}{}%
%    \end{macrocode}
% And we do the same for left and right notes (not movable).
% \begin{macrocode}
  \gdef\@templ@d{}%
  \gdef\@templ@n{\l@dcsnotetext\l@dcsnotetext@l\l@dcsnotetext@r}%
  \ifx\@templ@d\@templ@n \else%
    \if@twocolumn%
      \if@firstcolumn%
        \setl@dlp@rbox{##1}{\sidenotecontent@}%
      \else%
        \setl@drp@rbox{\sidenotecontent@}%
      \fi%
    \else%
      \@l@dtempcntb=\sidenote@margin%
      \ifnum\@l@dtempcntb>\@ne%
        \advance\@l@dtempcntb by\page@num%
      \fi%
      \ifodd\@l@dtempcntb%
        \setl@drp@rbox{\sidenotecontent@}%
        \gdef\sidenotecontent@{}%
        \numgdef{\itemcount@}{0}%
        \dolistloop{\l@dcsnotetext@l}%
        \ifnumgreater{\itemcount@}{1}{\led@err@ManyLeftnotes}{}%
        \setl@dlp@rbox{\sidenotecontent@}%
      \else%
        \setl@dlp@rbox{\sidenotecontent@}%
        \gdef\sidenotecontent@{}%
        \numgdef{\itemcount@}{0}%
        \dolistloop{\l@dcsnotetext@r}%
        \ifnumgreater{\itemcount@}{1}{\led@err@ManyRightnotes}{}%
        \setl@drp@rbox{\sidenotecontent@}%
      \fi%
    \fi%
  \fi%
}
%    \end{macrocode}
% \end{macro}%
%
%
%
%
% \section{Minipages and such}
%
%    We can put footnotes into minipages. The preparatory code has
% been set up earlier, all that remains is to ensure that it is available 
% inside a minipage box. This requires some alteration to the kernel code,
% specifically the \protect\cs{@iiiminipage} and \protect\cs{endminipage} macros.
% We will arrange this so that additional series can be easily added.
%
% \begin{macro}{\l@dfeetbeginmini}
% \begin{macro}{\l@dfeetendmini}
% \changes{v1.9.0}{2014/02/05}{Add \protect\cs{mpfnpos} to choice the order of footnotes in minipage / ledgroup.}
% These will be the hooks in \protect\cs{@iiiminpage} and \protect\cs{endminipage}.
% 
% They can be extended to handle other things if necessary.
% \changes{v0.4.0}{2004/02/29}{Added \protect\cs{l@dfeetbeginmini}, \protect\cs{l@dfeetendmini}
%                           and all their supporting code}
%    \begin{macrocode}
\ifnoledgroup@\else%
\newcommand*{\l@dfeetbeginmini}{\@ledgrouptrue\l@dedbeginmini\l@dfambeginmini}
\newcommand*{\l@dfeetendmini}{%
    \IfStrEq{critical-familiar}{\@mpfnpos}%
        {\l@dedendmini\l@dfamendmini}%
        {%
            \IfStrEq{familiar-critical}{\@mpfnpos}%
                {\l@dfamendmini\l@dedendmini}%
                {\l@dedendmini\l@dfamendmini}%
        }%
    }%
%    \end{macrocode}
% \end{macro}
% \end{macro}
%
% \begin{macro}{\l@dedbeginmini}
% \begin{macro}{\l@dedendmini}
% These handle the initiation and closure of critical footnotes in a
% minipage environment. 
%    \begin{macrocode}
\newcommand*{\l@dedbeginmini}{%
  \unless\ifnocritical@%
    \def\do##1{\csletcs{v##1footnote}{mpv##1footnote}}%
    \dolistloop{\@series}%
  \fi%
  }
\newcommand*{\l@dedendmini}{%
  \unless\ifnocritical@%
    \ifl@dpairing%
      \ifledRcol%
        \flush@notesR%
      \else%
        \flush@notes%
      \fi%
    \fi
    \def\do##1{%
      \ifvoid\csuse{mp##1footins}\else%
        \ifl@dpairing\ifparledgroup%
          \ifledRcol%
            \dimgdef{\parledgroup@beforenotesR}{\parledgroup@beforenotesR+\skip\@nameuse{mp##1footins}}%
          \else%
             \dimgdef{\parledgroup@beforenotesL}{\parledgroup@beforenotesL+\skip\@nameuse{mp##1footins}}%
          \fi%
         \fi\fi%
         \csuse{mp##1footgroup}{##1}%
    \fi}%
    \dolistloop{\@series}%
  \fi%
}%

%    \end{macrocode}
% \end{macro}
% \end{macro}
%
% \begin{macro}{\l@dfambeginmini}
% \begin{macro}{\l@dfamendmini}
% These handle the initiation and closure of familiar footnotes in a
% minipage environment. 
%    \begin{macrocode}
\newcommand*{\l@dfambeginmini}{%
 \unless\ifnofamiliar@%
   \def\do##1{\csletcs{vfootnote##1}{mpvfootnote##1}}%
     \dolistloop{\@series}%
 \fi%
}%

\newcommand*{\l@dfamendmini}{%
 \unless\ifnofamiliar@%
   \def\do##1{%
     \ifvoid\csuse{mpfootins##1}\else%
     \csuse{mpfootgroup##1}{##1}%
   \fi}%
   \dolistloop{\@series}%
 \fi%
}%
%    \end{macrocode}
% \end{macro}
% \end{macro}
%
% \begin{macro}{\@iiiminipage}
% This is our extended form of the kernel \protect\cs{@iiiminipage} defined in
% \file{ltboxes.dtx}.
% \changes{v0.4.0}{2004/02/29}{Modified kernel \protect\cs{@iiiminipage} and 
%                          \protect\cs{endminipage} to cater for critical footnotes}
% \changes{v2.0.0}{2015/07/19}{Patch \protect\cs{@iiiminipage} instead of redefining it.} 
%    \begin{macrocode}
\patchcmd%
  {\@iiiminipage}%
  {\let\@footnotetext\@mpfootnotetext}%
  {\let\@footnotetext\@mpfootnotetext\l@dfeetbeginmini}%
  {}%
  {\led@error@fail@patch@@iiiminipage}%
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\endminipage}
% This is our extended form of the kernel \protect\cs{endminipage} defined in
% \file{ltboxes.dtx}.
% \changes{v2.0.0}{2015/07/19}{Patch \protect\cs{endminipage} instead of redefining it.} 
%    \begin{macrocode}
\patchcmd%
  {\endminipage}%
  {\footnoterule}%
  {\footnoterule\l@advance@parledgroup@beforenormalnotes}%
  {}%
  {\led@error@fail@patch@endminipage}
  
\patchcmd%
  {\endminipage}%
  {\@minipagefalse}%
  {\l@dfeetendmini\@minipagefalse}%
  {}%
  {\led@error@fail@patch@endminipage}

%    \end{macrocode}
% \end{macro}
% \begin{macro}{\l@dunboxmpfoot}%
% \begin{macro}{\l@advance@parledgroup@beforenormalnotes}%
% \changes{v0.7.0}{2005/02/18}{Added \protect\cs{l@dunboxmpfoot} containing
%              some common code}
% \changes{v2.0.0}{2015/07/19}{Some conde of \protect\cs{l@dumboxmpfoot} moved to \protect\cs{l@advance@parledegroup@beforenormalnotes}}
% \protect\cs{@ldunboxmpfoot} insert normal footnotes for ledgroup.
%    \begin{macrocode}
\newcommand*{\l@dunboxmpfoot}{%
    \vskip\skip\@mpfootins
    \normalcolor
    \footnoterule
    \l@advance@parledgroup@beforenormalnotes
    \unvbox\@mpfootins%
} 
%    \end{macrocode}
% When using parallel ledgroup, we need to store the vertical space added before footnote, in order to compensate them between left and right pages.
%    \begin{macrocode}
\newcommand{\l@advance@parledgroup@beforenormalnotes}{%
  \ifparledgroup
    \ifl@dpairing
      \ifledRcol
          \dimgdef{\parledgroup@beforenotesR}{\parledgroup@beforenotesR+\skip\@mpfootins}
      \else
          \dimgdef{\parledgroup@beforenotesL}{\parledgroup@beforenotesL+\skip\@mpfootins}
      \fi
    \fi
  \fi
}
%    \end{macrocode}
% \end{macro}
% \end{macro}
%
% \begin{environment}{ledgroup}
% This environment puts footnotes at the end, even if that happens to
% be in the middle of a page, or crossing a page boundary. It is a sort
% of unboxed, fixed width minipage.
% \changes{v0.4.0}{2004/02/29}{Added ledgroup environment}
%    \begin{macrocode}

\newenvironment{ledgroup}{%
  \resetprevpage@num%
  \def\@mpfn{mpfootnote}\def\thempfn{\thempfootnote}\c@mpfootnote\z@%
  \let\@footnotetext\@mpfootnotetext
  \l@dfeetbeginmini%
}{%
  \par
  \unskip
  \ifvoid\@mpfootins\else
    \l@dunboxmpfoot
  \fi
  \l@dfeetendmini%
  \@ledgroupfalse%
}


%    \end{macrocode}
% \end{environment}
%
% \begin{environment}{ledgroupsized}
% \verb?\begin{ledgroupsized}?\oarg{pos}\marg{width} \\
% This environment puts footnotes at the end, even if that happens to
% be in the middle of a page, or crossing a page boundary. It is a sort
% of unboxed, variable \meta{width} minipage. The optional \meta{pos}
% controls the sideways position of numbered text.
% \changes{v0.4.0}{2004/02/29}{Added ledgroupsized environment}
% \changes{v0.5.1}{2004/04/10}{Only change \protect\cs{hsize} in ledgroupsized 
%        environment otherwise page number can be in wrong place}
%    \begin{macrocode}
\newenvironment{ledgroupsized}[2][l]{%
%    \end{macrocode}
% Set the various text measures.
%    \begin{macrocode}
  \hsize #2\relax
%    \end{macrocode}
% Initialize fills for centering.
%    \begin{macrocode}
  \let\ledllfill\hfil
  \let\ledrlfill\hfil
  \def\@tempa{#1}\def\@tempb{l}%
%    \end{macrocode}
% Left adjusted numbered lines
%    \begin{macrocode}
      \ifx\@tempa\@tempb
    \let\ledllfill\relax
  \else
    \def\@tempb{r}%
    \ifx\@tempa\@tempb
%    \end{macrocode}
% Right adjusted numbered lines
%    \begin{macrocode}
      \let\ledrlfill\relax
    \fi
  \fi
%    \end{macrocode}
% Set up the footnoting.
%    \begin{macrocode}
  \def\@mpfn{mpfootnote}\def\thempfn{\thempfootnote}\c@mpfootnote\z@
  \let\@footnotetext\@mpfootnotetext
  \l@dfeetbeginmini%
}{%
  \par
  \unskip
  \ifvoid\@mpfootins\else
    \l@dunboxmpfoot
  \fi
  \l@dfeetendmini%
}

%    \end{macrocode}
% \end{environment}
%
% Close the \protect\cs{ifnoledgroup@}\protect\cs{else}.
%    \begin{macrocode}
\fi%
%    \end{macrocode}
% \begin{macro}{\ifledgroupnotesL@}
% \begin{macro}{\ifledgroupnotesR@}
% These boolean tests check if we are in the notes of a ledgroup.  
% If we are, we do not number the lines.
% It could be useful for parallel ledgroup of \parpackage.
% 
%    \begin{macrocode}
\newif\ifledgroupnotesL@
\newif\ifledgroupnotesR@
%    \end{macrocode}
% \end{macro}
% \end{macro}
% \section{Indexing}
% \changes{v1.5.0}{2013/07/11}{Correct indexing when the call is made in critical notes.}
% \changes{v1.8.0}{2014/07/21}{If \protect\package{imakeidx} and \protect\package{hyperref} are loaded, adds hyperref in the index.}
% \changes{v1.8.5}{2014/08/28}{Debug indexing in right column, with eledpar.}
% Here is some code for indexing using page and line numbers.
%
% \subsection{Looking on package order}
% First, ensure that \protect\package{imakeidx} or \protect\package{indextools} is loaded \emph{before} \protect\package{eledmac}.
% \changes{v1.12.0}{2014/08/05}{Ensure that \protect\package{imakeidx} is loaded \emph{before} \protect\package{eledmac}}
%    \begin{macrocode}
\AtBeginDocument{%
  \unless\ifl@imakeidx%
    \@ifpackageloaded{imakeidx}{\led@error@ImakeidxAfterEledmac}{}%
  \fi%
  \unless\ifl@indextools%
    \@ifpackageloaded{indextools}{\led@error@indextoolsAfterEledmac}{}%
  \fi%
}
%    \end{macrocode}
% \subsection{Auxiliary macros for \cs{edindex}}
% \begin{macro}{\pagelinesep}
% \begin{macro}{\edindexlab}
% \begin{macro}{\c@labidx}
% In order to get a correct line number we have to use the label/ref
% mechanism. These macros are for that.
%    \begin{macrocode}
\newcommand{\pagelinesep}{-}
\newcommand{\edindexlab}{$&}
\newcounter{labidx}
\setcounter{labidx}{0}

%    \end{macrocode}
% \end{macro}
% \end{macro}
% \end{macro}
%
% \begin{macro}{\doedindexlabel}
% This macro sets an \protect\cs{edlabel}.
%    \begin{macrocode}
\newcommand{\doedindexlabel}{%
  \stepcounter{labidx}%
  \edlabel{\edindexlab\thelabidx}%
}

%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\thepageline}
% This macro makes up the page/line number combo from the label/ref.
% The associated counter is never directly used, but it is required in order to not have any error message with \cs{edgls}.
%    \begin{macrocode}
\newcounter{pageline}%
\renewcommand{\thepageline}{%
  \thepage%
  \pagelinesep%
  \xlineref{\edindexlab\thelabidx}%
}
%    \end{macrocode}
% \end{macro}
% 
% \begin{macro}{\thestartpageline}
% \begin{macro}{\theendpageline}
% These macros make up the page/line start/end number when the \protect\cs{edindex} command is called in critical notes.
%    \begin{macrocode}
\newcommand{\thestartpageline}{%
  \l@dparsedstartpage%
  \pagelinesep%
  \l@dparsedstartline%
}
\newcommand{\theendpageline}{%
  \l@dparsedendpage%
  \pagelinesep%
  \l@dparsedendline%
}
%    \end{macrocode}
% \end{macro}
% \end{macro}
%
% \subsection{Code specific to \cs{edindex} in critical footnotes}
% \begin{macro}{\if@edindex@fornote@true}
% This boolean test is switching at the beginning of each critical note,
% to allow index referring to this note.
%    \begin{macrocode}
\newif\if@edindex@fornote@
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\prepare@edindex@fornote}
% This macro is called at the beginning of each critical note.
% It switches some parameters, 
% to allow index referring to this note, with reference to page and line number.
% It also defines \protect\cs{@ledinnote@command} which will be printed as an encapsulating command after the \verb+|+.
%    \begin{macrocode}
\newcommand{\prepare@edindex@fornote}[1]{%
    \l@dp@rsefootspec#1|%
    \@edindex@fornote@true%
}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\get@edindex@ledinnote@command}
% The \protect\cs{get@edindex@ledinnote@command} macro defines
% a \protect\cs{@ledinnote@command} command which is added as an attribute (text inserted after \verb+|+) of the next index entry.
%
% Consequently, we write the definition of the location reference attribute in the \verb+.xdy+ file.
%    \begin{macrocode}
\newcommand{\get@edindex@ledinnote@command}{%
  \ifxindy@%
    \gdef\@ledinnote@command{%
      ledinnote\thelabidx%
    }%
    \ifxindyhyperref@%
      \immediate\write\eledmac@xindy@out{%
        (define-attributes ("ledinnote\thelabidx"))^^J
        \space\space(markup-locref^^J
          \eledmacmarkuplocrefdepth^^J
          :open "\string\ledinnote[\edindexlab\thelabidx]{\@index@command}{"^^J
          :close "}"^^J
          :attr "ledinnote\thelabidx"^^J
          )
        }%
    \else%
      \immediate\write\eledmac@xindy@out{%
        (define-attributes ("ledinnote\thelabidx"))^^J
        \space\space(markup-locref^^J
          \eledmacmarkuplocrefdepth^^J
          :open "\string\ledinnote{\@index@command}{"^^J
          :close "}"^^J
          :attr "ledinnote\thelabidx"^^J
          )
        }%
    \fi%
%    \end{macrocode}
% If we do not use \verb+xindy+ option, \protect\cs{@ledinnote@command} will produce
% something like \verb+ledinnote{formattingcommand}+.
%    \begin{macrocode}
  \else%
    \gdef\@ledinnote@command{%
       ledinnote[\edindexlab\thelabidx]{\@index@command}%
    }%
  \fi%
}
%    \end{macrocode}
% \end{macro}
% \subsection{Analysis of command in indexed text}
% \begin{macro}{\get@index@command}
% This macro is used to analyze if a text to be indexed has a command after a \verb+|+.
% \changes{v1.8.0}{2014/07/21}{Debug \protect\cs{get@index@command} and compatibility with \protect\package{hyperref} package.}
%    \begin{macrocode}
\def\get@index@command#1|#2+{%
  \gdef\@index@txt{#1}%
  \gdef\@index@command{#2}%
  \xdef\@index@parenthesis{}%
  \IfBeginWith{\@index@command}{(}{%
    \StrGobbleLeft{\@index@command}{1}[\@index@command@]%
    \global\let\@index@command\@index@command@%
    \xdef\@index@parenthesis{(}%
    }{}%
  \IfBeginWith{\@index@command}{)}{%
    \StrGobbleLeft{\@index@command}{1}[\@index@command@]%
    \global\let\@index@command\@index@command@%
    \xdef\@index@parenthesis{)}%
    }{}%
}
%    \end{macrocode}
% \end{macro}
% \subsection{Code for the formatted index}
% \begin{macro}{\ledinnote}
% \changes{v1.22.0}{2015/04/25}{\protect\cs{ledinnote} takes a first optional argument, which is the label for hyperlinks.}
% \begin{macro}{\ledinnotehyperpage}
% \begin{macro}{\ledinnotemark}
% \changes{v1.21.0}{2015/04/13}{Add \protect\cs{ledinnotemark}.}
% These macros are used to specify that an index reference points to a note.
% Arguments of \protect\cs{ledinnote}  are: \verb+#1+ (optional): the label for the hyperlink, \verb+#2+: command applied to the number, \verb+#3+: the number itself.
%    \begin{macrocode}
\newcommandx{\ledinnote}[3][1,usedefault]{%
  \ifboolexpr{%
    test{\ifdefequal{\iftrue}{\ifHy@hyperindex}}%
    or%
    bool {xindyhyperref@}%
    }%
    {%
    \csuse{#2}{\hyperlink{#1}{\ledinnotemark{#3}}}%
    }%
    {%
    \csuse{#2}{\ledinnotemark{#3}}%
    }%
}%
\newcommand{\ledinnotehyperpage}[2]{\csuse{#1}{\ledinnotemark{\hyperpage{#2}}}}%
\newcommand{\ledinnotemark}[1]{#1\emph{n}}%
%    \end{macrocode}
% \end{macro}
% \end{macro}
% \end{macro}
% \subsection{Main code}
% \changes{v2.0.0}{2015/07/19}{Suppress indexing command specific to \protect\ltxclass{memoir}.}
% \Eledmac and \ledmac were using the specific indexing tools of the \protect\ltxclass{memoir} in order to allow multiple index.
% However, \eledmac used \protect\package{imakeidx} or \protect\package{indextools}  tools when one these two package was loaded.
% This system forced to maintained a double code, which was not very useful.
% Since \reledmac, we use only the \protect\package{imakeidx} or \protect\package{indextools}  tools.
%
%    The \protect\package{memoir} class provides more flexible indexing than the
% standard classes. We need different code if the \protect\package{memoir}
% class is being used, except if \protect\package{imakeidx} or \protect\package{indextools} is used.
% \begin{macro}{\edindex}
% \changes{v0.4.1}{2003/03/29}{Let eledmac take advantage of memoir's indexing}
% \changes{v1.5.0}{2013/07/11}{Compatibility with \protect\package{imakeidx} package, and possibility to use multiple index with \protect\cs{edindex}.}
% \changes{v1.12.0}{2014/08/05}{Use correctly default index when \protect\package{imakeidx} is loaded.}
% \changes{v1.14.0}{2014/10/27}{Let eledmac take advantage of imakeidx even when memoir class is used}
% \begin{macro}{\@wredindex}
% Write the index information to the \file{idx} file.
%    \begin{macrocode}
\newcommandx{\@wredindex}[2][1=\expandonce\jobname,usedefault]{%#1 = the index name, #2 = the text
  \ifl@imakeidx%
    \if@edindex@fornote@%
      \IfSubStr[1]{#2}{|}{\get@index@command#2+}{\get@index@command#2|+}%
      \get@edindex@ledinnote@command%
      \expandafter\imki@wrindexentry{#1}{\@index@txt|(\@ledinnote@command}{\thestartpageline}%
      \expandafter\imki@wrindexentry{#1}{\@index@txt|)\@ledinnote@command}{\theendpageline}%
    \else%
      \get@edindex@hyperref{#2}%
      \imki@wrindexentry{#1}{\@index@txt\@edindex@hyperref}{\thepageline}%
    \fi%
  \else%
    \if@edindex@fornote@%
      \IfSubStr[1]{#2}{|}{\get@index@command#2+}{\get@index@command#2|+}%
      \get@edindex@ledinnote@command%
      \expandafter\protected@write\@indexfile{}%
	{\string\indexentry{\@index@txt|(\@ledinnote@command}{\thestartpageline}
	}%
      \expandafter\protected@write\@indexfile{}%
	{\string\indexentry{\@index@txt|)\@ledinnote@command}{\theendpageline}
       }%
    \else%
      \protected@write\@indexfile{}%
	{\string\indexentry{#2}{\thepageline}
	}%
    \fi%
   \fi%
   \endgroup
   \@esphack%
}
%    \end{macrocode}
% Need to add the definition of \protect\cs{edindex} to \protect\cs{makeindex}, and initialise
% \protect\cs{edindex} to do nothing.
%    \begin{macrocode}
\pretocmd{\makeindex}{%
  \def\edindex{\@bsphack
  \doedindexlabel
  \begingroup
  \@sanitize
  \@wredindex}}{}{}
\newcommand{\edindex}[1]{\@bsphack\@esphack}
%    \end{macrocode}
% \end{macro}
% \end{macro}
%
% \subsection{Hyperlink}
% \begin{macro}{\hyperlinkformat}
% \protect\cs{hyperlinkformat} command is to be used to have both a internal hyperlink and a format, when indexing.
%    \begin{macrocode}
\newcommand{\hyperlinkformat}[3]{%
  \ifstrempty{#1}%
    {\hyperlink{#2}{#3}}%
    {\csuse{#1}{\hyperlink{#2}{#3}}%
  }}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\hyperlinkR}
% \protect\cs{hyperlinkR} command is to be used to create a internal hyperlink and \protect\cs{ledRflag}, when indexing.
%    \begin{macrocode}
\newcommand{\hyperlinkR}[2]{%
 \hyperlink{#1}{#2\@Rlineflag}%
}%

%    \end{macrocode}
% \end{macro}
% \begin{macro}{\hyperlinkformatR}
% \protect\cs{hyperlinkformatR} command is to be used to create a internal hyperlink, a format and a \protect\cs{@Rlineflag}, when indexing.
%    \begin{macrocode}
\newcommand{\hyperlinkformatR}[3]{%
  \hyperlinkformat{#1}{#2}{#3\@Rlineflag}%
}%

%    \end{macrocode}
% \end{macro}
% \begin{macro}{\get@edindex@hyperref}
% \begin{macro}{\@edindex@hyperref}
% \changes{v1.12.5}{2014/08/28}{Debug \protect\cs{edindex} when \protect\package{hyperref} is not loaded}
% \protect\cs{get@edindex@hyperref} is to be used to define the \protect\cs{@edindex@hyperref} macro, which, in index, links to the point where the index was called (with \protect\package{hyperref}.
% \changes{v1.18.0}{2014/08/21}{Fix spurious space with \protect\cs{edindex} when using \protect\package{imakeidx}/\protect\package{indextools} + hyperref.}
% \changes{v1.21.0}{2015/0}{Look at the hyperindex option of hyperref before inserting hyperref}
%    \begin{macrocode}
\newcommand{\get@edindex@hyperref}[1]{%
%    \end{macrocode}
% We have to disable temporary spaces to work through a \protect\package{xstring} bug (or feature?)
%    \begin{macrocode}
  \edef\temp@{%
  \catcode`\ =9 %space need for catcode
  \detokenize{#1}%For active character in unicode
  \catcode`\ =10 % space need for catcode
  }%
%    \end{macrocode}
% Now, we define \protect\cs{@edindex@hyperref} if the \verb+hyperindex+ of \protect\package{hyperref} is enabled.
%    \begin{macrocode}
  \ifdefequal{\iftrue}{\ifHy@hyperindex}{%
    \IfSubStr{\temp@}{|}%
      {\get@index@command#1+%
      \ifledRcol%
        \gdef\@edindex@hyperref{|\@index@parenthesis %space kept
        hyperlinkformatR{\@index@command}%
        {\edindexlab\thelabidx}}%
      \else%
        \gdef\@edindex@hyperref{|\@index@parenthesis %space kept
        hyperlinkformat{\@index@command}%
        {\edindexlab\thelabidx}}%
      \fi%
      }%
      {\get@index@command#1|+%
       \ifledRcol%
        \gdef\@edindex@hyperref{|hyperlinkR{\edindexlab\thelabidx}}%
       \else%
        \gdef\@edindex@hyperref{|hyperlink{\edindexlab\thelabidx}}%
       \fi%
      }%
    }%
%    \end{macrocode}
%    \begin{macrocode}
% If we use both xindy and hyperref, first get the \protect\cs{index@command} command.
% Then define \protect\cs{@edindex@hyperref} in the form \verb+eledmacXXX+
%    \begin{macrocode}
    {\ifxindyhyperref@%     
      \IfSubStr{\temp@}{|}%
        {\get@index@command#1+}%
        {\get@index@command#1|+}%
     \gdef\@edindex@hyperref{|eledmac\thelabidx}%
%    \end{macrocode}
% If we start a reference range by a opening parenthesis,
% store the \protect\cs{thelabidx} for the current \protect\cs{edindex}, then define \protect\cs{@edindex@hyperref} in the form \verb+|(eledmac\thelabidx+.
%    \begin{macrocode}
      \IfStrEq{\@index@parenthesis}{(}%
        {%
        \csxdef{xindyparenthesis@\@index@txt}{\thelabidx}%
        \gdef\@edindex@hyperref{|(eledmac\thelabidx}%
        }%
        {}%
%    \end{macrocode}
% This \protect\cs{thelabidx} will be called back at the closing parenthesis, to have the same number in  
% \protect\cs{@edindex@hyperref} command that we had at the opening parenthesis.
% \protect\cs{@edindex@hyperref} start by a closing parenthesis, then followed by \verb+eledmacXXX+ where \verb+XXX+ is the \protect\cs{thelabidx} of the opening \protect\cs{edindex}.
%    \begin{macrocode}
      \IfStrEq{\@index@parenthesis}{)}%
        {%
        \xdef\@edindex@hyperref{|)eledmac\csuse{xindyparenthesis@\@index@txt}}%
        \global\csundef{xindyparenthesis@\@index@txt}%
        }%
%    \end{macrocode}
% Write in the .xdy file the attributes of the location. 
%    \begin{macrocode}
        {%
        \immediate\write\eledmac@xindy@out{%
          (define-attributes ("eledmac\thelabidx"))^^J
          \space\space(markup-locref^^J
            \eledmacmarkuplocrefdepth^^J
            :open "\string\hyperlink%
                   \ifledRcol R\fi%
                   {\edindexlab\thelabidx}%
                   {\ifdefempty{\@index@command}%
                     {}%
                     {\@backslashchar\@index@command}%
                   {"^^J
            :close "}}"^^J
            :attr "eledmac\thelabidx"^^J
            )
          }%
        }%
%    \end{macrocode}
% And now, in any other case.
%    \begin{macrocode}
    \else%
      \gdef\@index@txt{#1}%
      \gdef\@edindex@hyperref{}%
    \fi%
    }%
}
%    \end{macrocode}
% \end{macro}
% \end{macro}
% \changes{v1.14.0}{2014/10/27}{Delete previous override of \protect\cs{l@d@@wrindexhyp} at the beginning of a document when hyperref is not loaded.}
%
% \subsection{`innote' and `notenumber' option of \package{indextols} package}
% \begin{macro}{\led@set@index@fornote}
% The \cs{led@set@index@fornote} is called when a familiar footnote is inserted --- and not when it is read --- and changes the \cs{index} command depending of the option of the \package{indextools} package.
% Its only argument is the note series.
%    \begin{macrocode}
\newcommand{\led@set@index@fornote}[1]{%
  \ifbool{indtl@innote}%
    {\let\index\nindex}%
    {}%
  \ifbool{indtl@notenumber}%
    {%
    \renewcommand{\index}[2][\indtl@jobname]{%
      \orig@@index[##1]{%
        ##2|innotenumber{\csuse{thefootnote#1}}%
        }%
      }%
    }%
    {}%
}%
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\led@reinit@index@fornote}
% The \cs{led@reinit@index@fornote} just reset the default value of \cs{index}.
%    \begin{macrocode}
\newcommand{\led@reinit@index@fornote}{%
  \ifbool{indtl@innote}%
    {\let\index\orig@@index}%
    {}%
 \ifbool{indtl@notenumber}%
  {\let\index\orig@@index}%
  {}%
}%
%    \end{macrocode}
% \end{macro}
% \section{Glossaries}
% Here, we define the \cs{gls}-Like commands prefixed by \verb+ed+.
% \begin{macro}{\edgls}
%    \begin{macrocode}
\DeclareRobustCommandx{\edgls}[3][1,3,usedefault]{%
  \doedindexlabel%
  \gls[counter=pageline,#1]{#2}[#3]%
}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\edGls}
%    \begin{macrocode}
\DeclareRobustCommandx{\edGls}[3][1,3,usedefault]{%
  \doedindexlabel%
  \Gls[counter=pageline,#1]{#2}[#3]%
}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\edGLS}
%    \begin{macrocode}
\DeclareRobustCommandx{\edGLS}[3][1,3,usedefault]{%
  \doedindexlabel%
  \GLS[counter=pageline,#1]{#2}[#3]%
}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\edglspl}
%    \begin{macrocode}
\DeclareRobustCommandx{\edglspl}[3][1,3,usedefault]{%
  \doedindexlabel%
  \glspl[counter=pageline,#1]{#2}[#3]%
}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\edGlspl}
%    \begin{macrocode}
\DeclareRobustCommandx{\edGlspl}[3][1,3,usedefault]{%
  \doedindexlabel%
  \Glspl[counter=pageline,#1]{#2}[#3]%
}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\edGLSpl}
%    \begin{macrocode}
\DeclareRobustCommandx{\edGLSpl}[3][1,3,usedefault]{%
  \doedindexlabel%
  \GLSpl[counter=pageline,#1]{#2}[#3]%
}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\edglsdisp}
%    \begin{macrocode}
\DeclareRobustCommandx{\edglsdisp}[3][1,3,usedefault]{%
  \doedindexlabel%
  \glsdisp[counter=pageline,#1]{#2}[#3]%
}
%    \end{macrocode}
% \end{macro}
% \section{Verse}
%
% The original code is principally Wayne Sullivan's\index{Sullivan, Wayne} 
% code from \edstanza.
% However, the code has been many time modified by Maïeul Rouquette in order to obtain new features and improved compatibility with \parpackage.
%
% \subsection{Hanging symbol management}
%
% \begin{macro}{\@hangingsymbol}
% \begin{macro}{\sethangingsymbol}
% \begin{macro}{\ifinstanza}
% The macro \protect\cs{@hangingsymbol} is used to insert a symbol on each hanging of verses. It is set by user level macro \protect\cs{sethangingsymbol}.
%
% For example,  in french typographie the symbol is `['. We obtain it by the next code:
%\begin{verbatim}
%\sethangingsymbol{[\,}
%\end{verbatim}
% The \protect\cs{ifinstanza} boolean is used to be sure that we are in a stanza part.
%    \begin{macrocode}
\def\@hangingsymbol{}
\newcommand*{\sethangingsymbol}[1]{%
  \gdef\@hangingsymbol{#1}%
}%
\newif\ifinstanza
%    \end{macrocode}
% \end{macro}
% \end{macro}
% \end{macro}
% \begin{macro}{\inserthangingymbol}
% \begin{macro}{\ifinserthangingsymbol}
% The boolean \protect\cs{ifinserthangingsymbol} is set to TRUE when \protect\cs{@lock} is greater than 1, i.e. when we are not in the first line of a verse. The switch of \protect\cs{ifinserthangingsymbol} is  made in \protect\cs{do@line} before the printing of line but after the line number calculation.
%\changes{v0.15.0}{2012/06/11}{New management of hangingsymbol insertion, preventing undesirable insertions.}
%\changes{v0.17.0}{2012/08/03}{New new management of hangingsymbol insertion, preventing undesirable insertions.}
% \changes{v1.6.1}{2013/10/27}{Hang verse is now not automatically flush right.}
%    \begin{macrocode}
\newif\ifinserthangingsymbol
\newcommand{\inserthangingsymbol}{%
\ifinserthangingsymbol%
   \ifinstanza%
      \@hangingsymbol%
   \fi%
\fi%
}
%    \end{macrocode}
% \end{macro}
% \end{macro}
% \subsection{Using \& character}
% \begin{macro}{\ampersand}
% Within a stanza the \verb?\&? macro is going to be usurped.
% We need an
% alias in case an \& needs to be typeset in a stanza. Define it rather
% than letting it in case some other package has already defined it.
%    \begin{macrocode}
\newcommand*{\ampersand}{\char`\&}

%    \end{macrocode}
% \end{macro}
% 
% \subsection{Code category setting}
% \begin{macro}{\stanza@count}
% \begin{macro}{\stanzaindentbase}
% Before we can define the main macros we need to save and reset
% some category codes. To save the current values we use
% \protect\cs{next} and \protect\cs{body} from the \protect\cs{loop} macro.
%    \begin{macrocode}
  \chardef\body=\catcode`\@
  \catcode`\@=11
  \chardef\next=\catcode`\&
  \catcode`\&=\active

%    \end{macrocode}
% \subsection{Stanza count and indent}
% A count register is allocated for counting lines in a stanza; also allocated
% is a dimension register which is used to specify the base value for
% line indentation; all stanza indentations are multiples of this
% value. The default value of \protect\cs{stanzaindentbase} is 20pt.
%    \begin{macrocode}
  \newcount\stanza@count
  \newlength{\stanzaindentbase}
  \setlength{\stanzaindentbase}{20pt}

%    \end{macrocode}
% \end{macro}
% \end{macro}
%
% \begin{macro}{\strip@szacnt}
% \begin{macro}{\setstanzavalues}
% The indentations of stanza lines are non-negative integer multiples of the
% unit called
% \protect\cs{stanzaindentbase}. To make it easier for the user to specify these
% numbers, some list macros are defined. These take numerical values
% in a list separated by commas and assign the values to special control
% sequences using \protect\cs{mathchardef}. Though this does limit the range
% from 0 to 32767, it should suffice for most applications,
% including \emph{penalties}, which will be discussed below.
%    \begin{macrocode}
\def\strip@szacnt#1,#2|{\def\@tempb{#1}\def\@tempa{#2|}}
\newcommand*{\setstanzavalues}[2]{\def\@tempa{#2,,|}%
        \stanza@count\z@
     \def\next{\expandafter\strip@szacnt\@tempa
            \ifx\@tempb\empty\let\next\relax\else
            \expandafter\mathchardef\csname #1@\number\stanza@count
            @\endcsname\@tempb\relax
            \advance\stanza@count\@ne\fi\next}%
      \next}

%    \end{macrocode}
% \end{macro}
% \end{macro}
% \begin{macro}{\setstanzaindents}
% \begin{macro}{\setstanzapenalties}
% In the original \edmac, \protect\cs{setstanzavalues}\verb+{sza}+\marg{...} had to be called to
% set the indents, and similarly \protect\cs{setstanzavalues}\verb+{szp}+\marg{...}.
% to set the penalties. 
% \protect\cs{setstanzaindents} and \protect\cs{setstanzapenalties} macros are a convenience to give
% the user one less thing to worry about (misspelling the first argument).
%
%    \begin{macrocode}
\newcommand*{\setstanzaindents}[1]{\setstanzavalues{sza}{#1}}
\newcommand*{\setstanzapenalties}[1]{\setstanzavalues{szp}{#1}}
%
%    \end{macrocode}
% \end{macro}
% \end{macro}
% \begin{macro}{\managestanza@modulo}
% Since version 0.13, the \verb+stanzaindentsrepetition+ counter  can be used when the indentation is repeated every n verses.
% The \protect\cs{managestanza@modulo} is a command which modifies the counter stanza@modulo. The command adds 1 to stanza@modulo, but if stanza@modulo is equal to the stanzaindentsrepetition counter, the command restarts it.
%\changes{v0.13.0}{2011/11/08}{New stanzaindentsrepetition counter to repeat stanza indents every \emph{n} verses.}
% % \changes{v1.5.1}{2013/08/16}{Correct stanzaindentsrepetition counter}
%    \begin{macrocode}
\newcounter{stanzaindentsrepetition}
\newcount\stanza@modulo

\newcommand*{\managestanza@modulo}[0]{%
    \advance\stanza@modulo\@ne%
    \ifnum\stanza@modulo>\value{stanzaindentsrepetition}%
     \stanza@modulo\@ne%
    \fi%
}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\stanzaindent}
% \begin{macro}{\stanzaindent*}
% The macro \protect\cs{stanzaindent}, when called at the beginning of a verse, changes the indentation normally defined for this verse by \protect\cs{setstanzaindent}.
% The starred version skips the current verse for the repetition of stanza indent.
%    \begin{macrocode}
\newcommand{\stanzaindent}[1]{%
  \hspace{\dimexpr#1\stanzaindentbase-\parindent\relax}%
  \ignorespaces%
}%
\WithSuffix\newcommand\stanzaindent*[1]{%
  \stanzaindent{#1}%
  \global\advance\stanza@modulo-\@ne%
  \ifnum\stanza@modulo=0%
    \global\stanza@modulo=\value{stanzaindentsrepetition}%
  \fi%
  \ignorespaces%
}%
%    \end{macrocode}
% \end{macro}
% \end{macro}
% \subsection{Numbering stanza}
% Here, macro for numbering stanza.
% First, the stanza counter.
% \begin{macro}{\thestanza}
%    \begin{macrocode}
\newcounter{stanza}
\renewcommand{\thestanza}{%
  \textbf{\arabic{stanza}}%
}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\ifnumberstanza}
% Then, macro to activate automatically numbering of stanza.
%    \begin{macrocode}
\newif\ifnumberstanza%
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\@insertstanzanumber}
% Now, macro called at the first line of of verse of a stanza.
%    \begin{macrocode}
\newcommand{\@insertstanzanumber}[0]{%
  \ifnumberstanza%
    \ifl@dpairing%
      \ifledRcol% 
      \stanzanumwrapper{\thestanzaR}%
      \else%
      \stanzanumwrapper{\thestanzaL}%
      \fi%
    \else%
      \stanzanumwrapper{\thestanza}%
    \fi%
    \setline{1}%
  \fi%
}%
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\@advancestanzanumber}
% Also a command to advance the counter of stanza.
%    \begin{macrocode}
\newcommand{\@advancestanzanumber}[0]{%
  \ifnumberstanza%
    \ifl@dpairing%
      \ifledRcol% 
        \addtocounter{stanzaR}{1}%
      \else%
        \addtocounter{stanzaL}{1}%
      \fi%
    \else%
      \addtocounter{stanza}{1}%
    \fi%
  \fi%
}%
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\stanzanumwrapper}
% And finally, the wrapper for stanza number
%    \begin{macrocode}
\newcommand{\stanzanumwrapper}[1]{%
  \flagstanza{#1}%
}%
%    \end{macrocode}
% \end{macro}
% \subsection{Stanza number in note}
% Here, the command called when printing stanza number in notes.
%    \begin{macrocode}
\newcommand{\printstanza}[0]{%
   \ifboolexpr{bool{l@dpairing} or bool{l@dprintingpages} or bool{l@dprintingcolumns}}{%
        \ifledRcol@%
            \thestanzaR%
        \else%
            \thestanzaL%
        \fi%
    }{%
        \thestanza%
    }%
}
%    \end{macrocode}
% \subsection{Main work}
% \begin{macro}{\stanza@line}
% \begin{macro}{\stanza@hang}
% \begin{macro}{\sza@penalty}
% Now we arrive at the main works. \protect\cs{stanza@line} sets the
% indentation for the line and starts a numbered paragraph---each
% line is treated as a paragraph. \protect\cs{stanza@hang} sets the
% hanging indentation to be used if the stanza line requires
% more than one print line. 

%If it is known that each stanza line
% will fit on one print line, it is advisable to set the
% hanging indentation to zero. \protect\cs{sza@penalty} places the
% specified penalty following each stanza line. 
% By default, this
% facility is turned off so that no penalty is included. However,
% the user may initiate these penalties to indicate good and bad
% places in the stanza for page breaking.
%    \begin{macrocode}
\newcommandx{\stanza@line}[1][1]{
    \ifnum\value{stanzaindentsrepetition}=0
        \parindent=\csname sza@\number\stanza@count
                 @\endcsname\stanzaindentbase
    \else
        \parindent=\csname sza@\number\stanza@modulo
                 @\endcsname\stanzaindentbase
        \managestanza@modulo
    \fi
    \pstart[#1]\stanza@hang\ignorespaces}
\xdef\stanza@hang{\noexpand\leavevmode\noexpand\startlock
            \hangindent\expandafter
            \noexpand\csname sza@0@\endcsname\stanzaindentbase
            \hangafter\@ne}        
\def\sza@penalty{\count@\csname szp@\number\stanza@count @\endcsname
         \ifnum\count@>\@M\advance\count@-\@M\penalty-\else
         \penalty\fi\count@}
%    \end{macrocode}
% \end{macro}
% \end{macro}
% \end{macro}
%
% \begin{macro}{\@startstanza}
% \begin{macro}{\stanza}
% \changes{v1.12.0}{2014/08/05}{Add \protect\cs{newverse} macro, \protect\cs{falseverse} deprecated.}
% \changes{v1.12.0}{2014/08/05}{\protect\cs{Stanza} can have an optional argument: content to be printed before.}
% \changes{v1.12.0}{2014/08/05}{\ampersand can have an optional argument: content to be printed after.}
% \changes{v1.20.0}{2015/03/22}{\ampersand\ and \textbackslash\ampersand\ can be preceded by spaces.}
% \begin{macro}{\@stopstanza}
% \begin{macro}{\newverse}
% \changes{v1.6.0}{2013/10/09}{Add \protect\cs{falseverse} macro.}
% Now we have the components of the \protect\cs{stanza} macro,
% which appears at the start of a group of lines. This macro
% initializes the count and checks to see if hanging indentation
% and penalties are to be included. Hanging indentation suspends
% the line count, so that the enumeration is by verse line
% rather than by print line. If the print line count is desired,
% invoke \protect\cs{let}\protect\cs{startlock}\protect\cs{relax} and do the same for
% \protect\cs{endlock}. Here and above we have used \protect\cs{xdef} to
% make the stored macros take up a bit less space, but it also
% makes them more obscure to the reader. Lines of the stanza are
% delimited by ampersands \&. 
% The last line of the stanza must
% end with \verb+\&+. 
%
%
%
%    \begin{macrocode}
\xdef\@startstanza[#1]{%
   \noexpand\instanzatrue\expandafter
   \begingroup%
   \catcode`\noexpand\&\active%
   \global\stanza@count\@ne\stanza@modulo\@ne
   \noexpand\ifnum\expandafter\noexpand
   \csname sza@0@\endcsname=\z@\let\noexpand\stanza@hang\relax
   \let\noexpand\endlock\relax\noexpand\else\interlinepenalty
   \@M\rightskip\z@ plus 1fil\relax\noexpand\fi\noexpand\ifnum
   \expandafter\noexpand\csname szp@0@\endcsname=\z@
   \let\noexpand\sza@penalty\relax\noexpand\fi%
   \def\noexpand&{%
         \noexpand\newverse[][]}%
   \def\noexpand\&{\noexpand\@stopstanza}%
   \noexpand\@advancestanzanumber%
   \noexpand\stanza@line[#1]\noexpand\@insertstanzanumber%
   \let\par\relax\ignorespaces%No paragraph in verses
}

\newcommandx{\stanza}[1][1,usedefault]{\@startstanza[#1]}

\newcommandx{\@stopstanza}[1][1,usedefault]{%
  \unskip%
  \endlock%
  \pend[#1]%
  \endgroup%
  \instanzafalse%
}

\newcommandx*{\newverse}[2][1,2,usedefault]{%
  \unskip%
  \endlock\pend[#1]\sza@penalty\global%
  \advance\stanza@count\@ne\stanza@line[#2]%
  }

%    \end{macrocode}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \begin{macro}{\flagstanza}
% Use \verb?\flagstanza[len]{text}? at the start of a line to put \texttt{text} 
% a distance \texttt{len} before the start of the line. The default for
% \texttt{len} is \verb?\stanzaindentbase?.
%    \begin{macrocode}
\newcommand*{\flagstanza}[2][\stanzaindentbase]{%
  \hskip -#1\llap{#2}\hskip #1\ignorespaces}

%    \end{macrocode}
% \end{macro}
% 
% \subsection{Restore catcode and penalties}
% The ampersand \& is used to mark the end of each stanza line, except the
% last, which is marked with \verb+\&+. This means that \verb+\halign+ may
% not be used directly within a stanza line. This does not affect macros
% involving alignments defined outside \verb+\stanza  \&+. Since these
% macros usurp the control sequence \verb+\&+, the replacement
% \verb+\ampersand+ is defined to be used if this symbol is needed in a
% stanza. Also we reset the modified category codes and initialize the
% penalty default.
%    \begin{macrocode}
  \catcode`\&=\next
  \catcode`\@=\body
  \setstanzavalues{szp}{0}

%    \end{macrocode}
%
%
%
%
% \section{Arrays and tables}
% \subsection{Preamble: macro as environment}
%
%
%    The following is borrowed, and renamed, from the \protect\package{amsmath}
% package. See also the CTT thread `eeq and amstex', 1995/08/31, started
% by Keith Reckdahl and ended definitively by David M. Jones.
%
%
% Several of the [math] macros scan their body twice. This means we must 
% collect all text in the body of an environment form before calling
% the macro.
%
% \begin{macro}{\@emptytoks}
% This is actually defined in the \protect\package{amsgen} package.
%    \begin{macrocode}
\newtoks\@emptytoks

%    \end{macrocode}
% \end{macro}
%
% The rest is from \protect\package{amsmath}.
%
% \begin{macro}{\l@denvbody}
% A token register to contain the body.
%    \begin{macrocode}
\newtoks\l@denvbody

%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\addtol@denvbody}
% |\addtol@denvdody{arg}| adds |arg| to the token register |\l@denvbody|.
%    \begin{macrocode}
\newcommand{\addtol@denvbody}[1]{%
  \global\l@denvbody\expandafter{\the\l@denvbody#1}}

%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\l@dcollect@body}
% The macro \protect\cs{l@dcollect@body} starts the scan for the \protect\cs{end}\marg{env} command
% of the current environment. It takes a macro name as argument. This macro
% is supposed to take the whole body of the environment as its argument.
% For example, given |cenv#1{...}| as a macro that processes |#1|, then
% the environment form, |\begin{env}| would call |\l@dcollect@body\cenv|.
% 
%    \begin{macrocode}
\newcommand{\l@dcollect@body}[1]{%
  \l@denvbody{\expandafter#1\expandafter{\the\l@denvbody}}%
  \edef\processl@denvbody{\the\l@denvbody\noexpand\end{\@currenvir}}%
  \l@denvbody\@emptytoks \def\l@dbegin@stack{b}%
  \begingroup
    \expandafter\let\csname\@currenvir\endcsname\l@dcollect@@body
    \edef\processl@denvbody{\expandafter\noexpand\csname\@currenvir\endcsname}%
    \processl@denvbody%
    }%

%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\l@dpush@begins}
% When adding a piece of the current environment's contents to \protect\cs{l@denvbody},
% we scan it to check for additional \protect\cs{begin} tokens, and add a `b' to the
% stack for any that we find.
%    \begin{macrocode}
\def\l@dpush@begins#1\begin#2{%
  \ifx\end#2\else b\expandafter\l@dpush@begins\fi}

%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\l@dcollect@@body}
% \protect\cs{l@dcollect@@body} takes two arguments: the first will consist of all text
% up to the next |\end| command, and the second will be the \protect\cs{end} command's
% argument. If there are any extra \protect\cs{begin} commands in the body text, 
% a marker is pushed onto a stack by the \protect\cs{l@dpush@begins} function. 
% Empty state for this stack means we have reached the \protect\cs{end} that matches 
% our original \protect\cs{begin}. Otherwise we need to include the \protect\cs{end} and its 
% argument in the material we are adding to the environment body accumulator.
%    \begin{macrocode}
\def\l@dcollect@@body#1\end#2{%
  \edef\l@dbegin@stack{\l@dpush@begins#1\begin\end 
                       \expandafter\@gobble\l@dbegin@stack}%
  \ifx\@empty\l@dbegin@stack
    \endgroup
    \@checkend{#2}%
    \addtol@denvbody{#1}%
  \else
    \addtol@denvbody{#1\end{#2}}%
  \fi
  \processl@denvbody % A little tricky! Note the grouping
}
    
%    \end{macrocode}
% \end{macro}
%
%    There was a question on CTT about how to use \protect\cs{collect@body} for a macro
% taking an argument. The following is part of that thread.
% \begin{verbatim}
% From: Heiko Oberdiek <oberdiek@uni-freiburg.de>
% Newsgroups: comp.text.tex
% Subject: Re: Using \collect@body with commands that take >1 argument
% Date: Fri, 08 Aug 2003 09:03:20 +0200
% 
% eed132@psu.edu (Evan) wrote:
% > I'm trying to make a new Latex environment that acts like the>
%  \colorbox command that is part of the color package. I looked through
% > the FAQ and ran across this bit about using the \collect@body command
% > that is part of AMSLaTeX:
% > http://www.tex.ac.uk/cgi-bin/texfaq2html?label=cmdasenv
% > 
% > It almost works. If I do something like the following:
% >   \newcommand{\redbox}[1]{\colorbox{red}{#1}}
% > 
% >   \makeatletter
% >   \newenvironment{redbox}{\collect@body \redbox}{}
% 
% You will get an error message: Command \redbox already defined.
% Thus you must rename either the command \redbox or the environment
% name.
% 
% >   \begin{coloredbox}{blue}
% >     Yadda yadda yadda... this is on a blue background...
% >   \end{coloredbox}
% > and can't figure out how to make the \collect@body take this. 
% 
% >   \collect@body \colorbox{red}
% >   \collect@body {\colorbox{red}}
% 
% The argument of \collect@body has to be one token exactly.
% 
% \documentclass{article}
% \usepackage{color}
% \usepackage{amsmath}
% 
% \newcommand{\redbox}[1]{\colorbox{red}{#1}}
% \makeatletter
% \newenvironment{coloredbox}[1]{%
%   \def\next@{\colorbox{#1}}%
%   \collect@body\next@
% }{}
% 
% % ignore spaces at begin and end of environment
% \newenvironment{coloredboxII}[1]{%
%   \def\next@{\mycoloredbox{#1}}%
%   \collect@body\next@
% }{}
% \newcommand{\mycoloredbox}[2]{%
%   \colorbox{#1}{\ignorespaces#2\unskip}%
% }
% 
% % support of optional color model argument
% \newcommand\coloredboxIII\endcsname{}
% \def\coloredboxIII#1#{%
%   \@coloredboxIII{#1}%
% }
% \def\@coloredboxIII#1#2{%
%   \def\next@{\mycoloredboxIII{#1}{#2}}%
%   \collect@body\next@
% }
% \newcommand{\mycoloredboxIII}[3]{%
%   \colorbox#1{#2}{\ignorespaces#3\unskip}%
% }
% 
% \makeatother
% 
% \begin{document}
%   Black text before
%   \begin{coloredbox}{blue}
%    Hello World
%   \end{coloredbox}
%   Black text after
% 
%   Black text before
%   \begin{coloredboxII}{blue}
%    Hello World
%   \end{coloredboxII}
%   Black text after
% 
%   Black text before
%   \begin{coloredboxIII}[rgb]{0,0,1}
%    Hello World
%   \end{coloredboxIII}
%   Black text after
% 
% \end{document}
% 
% Yours sincerely
%   Heiko <oberdiek@uni-freiburg.de>
% \end{verbatim}
%
%
% \subsection{Tabular environments}
% This is based on the work by Herbert Breger\index{Breger, Herbert}
%  in developing \file{tabmac.tex}. 
%
% The original \file{tabmac.tex} file was void of comments or any explanatory
% text other than the above notice. The algorithm is Breger's. Peter Wilson have made
% some cosmetic changes to the original code and reimplemented some things
% so they are more LaTeX-like. All the commentary are from Peter Wilson, as are any mistake
% or errors.
%
% However, Maïeul Rouquette has modified code in order to add new features of \eledmac and \reledmac.
% \subsubsection{Disabling and restoring commands}
% \begin{macro}{\l@dtabnoexpands}
% More no expansion for critical and familiar footnotes in tabular environment.
%
%    \begin{macrocode}
\newcommand*{\l@dtabnoexpands}{%
  \let\rtab=0%
  \let\ctab=0%
  \let\ltab=0%
  \let\rtabtext=0%
  \let\ltabtext=0%
  \let\ctabtext=0%
  \let\edbeforetab=0%
  \let\edaftertab=0%
  \let\edatleft=0%
  \let\edatright=0%
  \let\edvertline=0%
  \let\edvertdots=0%
  \let\edrowfill=0%
}

%    \end{macrocode}
% \end{macro}
% \begin{macro}{\disable@familiarnotes}
% \begin{macro}{\restore@familiarnotes}
% Macros to disable and restore familiar notes, to prevent them from printing multiple times in edtabularx and edarrayx environments. 
%    \begin{macrocode}
\newcommand{\disable@familiarnotes}{%
  \unless\ifnofamiliar@%
    \def\do##1{%
        \csletcs{footnote@@##1}{footnote##1}%
        \expandafter\renewcommand \csname footnote##1\endcsname[1]{%
          \protected@csxdef{@thefnmark##1}{\csuse{thefootnote##1}}%
          \csuse{@footnotemark##1}%
        }%
    }%
    \dolistloop{\@series}%
  \fi%
}%
\newcommand{\restore@familiarnotes}{%
  \unless\ifnofamiliar@%
    \def\do##1{%
        \csletcs{footnote##1}{footnote@@##1}%
    }%
    \dolistloop{\@series}%
  \fi%
}%

%    \end{macrocode}
% \end{macro}
% \end{macro}
% \begin{macro}{\disable@sidenotes}
% \begin{macro}{\restore@sidenotes}
% The sames, for side notes.
%    \begin{macrocode}
\newcommand{\disable@sidenotes}{%
  \let\@@ledrightnote\ledrightnote%
  \let\@@ledleftnote\ledleftnote%
  \let\@@ledsidenote\ledsidenote%
  \let\ledrightnote\@gobble%
  \let\ledleftnote\@gobble%
  \let\ledsidenote\@gobble%
}%
\newcommand{\restore@sidenotes}{%
  \let\ledrightnote\@@ledrightnote%
  \let\ledleftnote\@@ledleftnote%
  \let\ledsidenote\@@ledsidenote%
}%
%    \end{macrocode}
% \end{macro}
% \end{macro}
% \begin{macro}{\disable@notes}
% \begin{macro}{\restore@notes}
% Disable/restore side and familiar notes.
%    \begin{macrocode}
\newcommand{\disable@notes}{%
  \disable@sidenotes%
  \disable@familiarnotes%
}%
\newcommand{\restore@notes}{%
  \restore@sidenotes%
  \restore@familiarnotes%
}%
%    \end{macrocode}
% \end{macro}
% \end{macro}
% \begin{macro}{\EDTEXT}
% \begin{macro}{\xedtext}
% We need to be able to modify the \protect\cs{edtext} macros
% and also restore their original definitions.
%    \begin{macrocode}
\let\EDTEXT=\edtext
\newcommand{\xedtext}[2]{\EDTEXT{#1}{#2}}
%    \end{macrocode}
% \end{macro}
% \end{macro}
%
% \begin{macro}{\EDLABEL}
% \begin{macro}{\xedlabel}
% We need to be able to modify and restore the \protect\cs{edlabel} macro.
%    \begin{macrocode}
\let\EDLABEL=\edlabel
\newcommand*{\xedlabel}[1]{\EDLABEL{#1}}
%    \end{macrocode}
% \end{macro}
% \end{macro}
%
%
% \begin{macro}{\EDINDEX}
% \begin{macro}{\xedindex}
% \begin{macro}{\nulledindex}
% Macros supporting modification and restoration of \protect\cs{edindex}.
%    \begin{macrocode}
\let\EDINDEX=\edindex
\newcommand{\xedindex}{\@bsphack%
  \@ifnextchar [{\l@d@index}{\l@d@index[\jobname]}}
\newcommand{\nulledindex}[2][\jobname]{\@bsphack\@esphack}

%    \end{macrocode}
% \end{macro}
% \end{macro}
% \end{macro}
%
%
% \begin{macro}{\@line@@num}
% Macro supporting restoration of |\linenum|.
%    \begin{macrocode}
\let\@line@@num=\linenum
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\l@dgobblearg}
% \protect\cs{l@dgobbleoptarg}\oarg{arg}\marg{arg} replaces these two arguments (first is optional) by \protect\cs{relax}.
% \changes{v1.12.5}{2014/08/28}{\protect\cs{l@dgobblearg} becomes \protect\cs{l@dgobbeloptarg}}
%    \begin{macrocode}
\newcommand*{\l@dgobbleoptarg}[2][]{\relax}%

%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\Relax}
% \begin{macro}{\NEXT}
%    \begin{macrocode}
\let\Relax=\relax
\let\NEXT=\next

%    \end{macrocode}
% \end{macro}
% \end{macro}
% \begin{macro}{\l@dmodforedtext}
% \begin{macro}{\l@drestoreforedtext}
% Modify and restore various macros for when |\edtext| is used.
% \changes{v1.12.5}{2014/08/28}{Debug optional arguments of \protect\cs{Xfootnote} in tabular context}
%    \begin{macrocode}
\newcommand{\l@dmodforedtext}{%
  \let\edtext\relax
  \def\do##1{\global\csletcs{##1footnote}{l@dgobbleoptarg}}%
  \dolistloop{\@series}%
  \let\edindex\nulledindex
  \let\linenum\@gobble}
\newcommand{\l@drestoreforedtext}{%
  \def\do##1{\global\csletcs{##1footnote}{##1@@footnote}}
  \dolistloop{\@series}%
  \let\edindex\xedindex}
%    \end{macrocode}
% \end{macro}
% \end{macro}
%
% \begin{macro}{\l@dnullfills}
% \begin{macro}{\l@drestorefills}
% Nullify and restore some column fillers, etc.
%    \begin{macrocode}
\newcommand{\l@dnullfills}{%
  \def\edlabel##1{}%
  \def\edrowfill##1##2##3{}%
}
\newcommand{\l@drestorefills}{%
  \def\edrowfill##1##2##3{\@EDROWFILL@{##1}{##2}{##3}}%
}

%    \end{macrocode}
% \end{macro}
% \end{macro}
%
%
% \begin{macro}{\letsforverteilen}
% Gathers some lets and other code that is common to the |*verteilen*| macros.
%    \begin{macrocode}
\newcommand{\letsforverteilen}{%
  \let\edtext\xedtext
  \let\edindex\xedindex
  \def\do##1{\global\csletcs{##1footnote}{##1@@footnote}}
  \dolistloop{\@series}%
  \let\linenum\@line@@num
  \hilfsskip=\l@dcolwidth%
  \advance\hilfsskip by -\wd\hilfsbox
  \def\edlabel##1{\xedlabel{##1}}}

%    \end{macrocode}
% \end{macro}
% \begin{macro}{\disablel@dtabfeet}
% \begin{macro}{\enablel@dtabfeet}
% Declarations for using  or using \protect\cs{edtext} inside
% tabulars.
% The default at this point is for \protect\cs{edtext}.
%    \begin{macrocode}
\newcommand\disablel@dtabfeet{\l@dmodforedtext}%
\newcommand\enablel@dtabfeet{\l@drestoreforedtext}%
%    \end{macrocode}
% \end{macro}
% \end{macro}
% \subsubsection{Counters, boxes and lengths}
% \begin{macro}{\l@dampcount}
% \begin{macro}{\l@dcolcount}
% \protect\cs{l@dampcount} is a counter for the \& column dividers and
% \protect\cs{l@dcolcount} is a counter for the columns. 
%    \begin{macrocode}
\newcount\l@dampcount
  \l@dampcount=1\relax
\newcount\l@dcolcount
  \l@dcolcount=0\relax

%    \end{macrocode}
% \end{macro}
% \end{macro}
%
% \begin{macro}{\hilfsbox}
% \begin{macro}{\hilfsskip}
% \begin{macro}{\Hilfsbox}
% \begin{macro}{\hilfscount}
% Some (temporary) helper items.
%    \begin{macrocode}
\newbox\hilfsbox
\newskip\hilfsskip
\newbox\Hilfsbox
\newcount\hilfscount

%    \end{macrocode}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% 
% 30 columns should be adequate (compared to the original 60).
% These are the column widths. (Originally these were German spelled numbers
% e.g., |\eins|, |\zwei|, etc).
%    \begin{macrocode}
\newdimen\dcoli
\newdimen\dcolii
\newdimen\dcoliii
\newdimen\dcoliv
\newdimen\dcolv
\newdimen\dcolvi
\newdimen\dcolvii
\newdimen\dcolviii
\newdimen\dcolix
\newdimen\dcolx
\newdimen\dcolxi
\newdimen\dcolxii
\newdimen\dcolxiii
\newdimen\dcolxiv
\newdimen\dcolxv
\newdimen\dcolxvi
\newdimen\dcolxvii
\newdimen\dcolxviii
\newdimen\dcolxix
\newdimen\dcolxx
\newdimen\dcolxxi
\newdimen\dcolxxii
\newdimen\dcolxxiii
\newdimen\dcolxxiv
\newdimen\dcolxxv
\newdimen\dcolxxvi
\newdimen\dcolxxvii
\newdimen\dcolxxviii
\newdimen\dcolxxix
\newdimen\dcolxxx
\newdimen\dcolerr   % added for error handling

%    \end{macrocode}
%
% \begin{macro}{\l@dcolwidth}
%  This is a cunning way of storing the columnwidths indexed by 
% the column number \protect\cs{l@dcolcount}, like an array. (was |\Dimenzuordnung|)
%    \begin{macrocode}
\newcommand{\l@dcolwidth}{\ifcase \the\l@dcolcount \dcoli %???
  \or \dcoli \or \dcolii \or \dcoliii
  \or \dcoliv \or \dcolv \or \dcolvi
  \or \dcolvii \or \dcolviii \or \dcolix \or \dcolx
  \or \dcolxi \or \dcolxii \or \dcolxiii
  \or \dcolxiv \or \dcolxv \or \dcolxvi
  \or \dcolxvii \or \dcolxviii \or \dcolxix \or \dcolxx
  \or \dcolxxi \or \dcolxxii \or \dcolxxiii
  \or \dcolxxiv \or \dcolxxv \or \dcolxxvi
  \or \dcolxxvii \or \dcolxxviii \or \dcolxxix \or \dcolxxx
  \else \dcolerr \fi}

%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\stepl@dcolcount}
% This increments the column counter, and issues an error message
% if it is too large.
%    \begin{macrocode}
\newcommand*{\stepl@dcolcount}{\advance\l@dcolcount\@ne
  \ifnum\l@dcolcount>30\relax
    \led@err@TooManyColumns
  \fi}

%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\l@dsetmaxcolwidth}
% Sets the column width to the maximum value seen so far. 
%    \begin{macrocode}
\newcommand{\l@dsetmaxcolwidth}{%
  \ifdim\l@dcolwidth < \wd\hilfsbox
    \l@dcolwidth = \wd\hilfsbox
  \else \relax \fi}

%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\measuremcell}
% Measure (recursively) the width required for a math cell. 
%    \begin{macrocode}
\def\measuremcell #1&{%
    \ifx #1\\ \ifnum\l@dcolcount=0\let\NEXT\relax%  
              \else\l@dcheckcols%
                    \l@dcolcount=0%    
                    \let\NEXT\measuremcell%
              \fi%
    \else\setbox\hilfsbox=\hbox{$\displaystyle{#1}$}%
      \stepl@dcolcount%
      \l@dsetmaxcolwidth%
      \let\NEXT\measuremcell% 
    \fi\NEXT}

%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\measuretcell}
% Measure (recursively) the width required for a text cell. 
%    \begin{macrocode}
\def\measuretcell #1&{%
    \ifx #1\\ \ifnum\l@dcolcount=0\let\NEXT\relax%  
              \else\l@dcheckcols%
                    \l@dcolcount=0%    
                    \let\NEXT\measuretcell%
              \fi%
    \else\setbox\hilfsbox=\hbox{#1}%
      \stepl@dcolcount%
      \l@dsetmaxcolwidth%
      \let\NEXT\measuretcell% 
    \fi\NEXT}

%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\measuremrow}
% Measure (recursively) the width required for a math row. 
%    \begin{macrocode}
\def\measuremrow #1\\{%
   \ifx #1&\let\NEXT\relax% 
   \else\measuremcell #1&\\&\\&%
      \let\NEXT\measuremrow%
   \fi\NEXT}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\measuretrow}
% Measure (recursively) the width required for a text row. 
%    \begin{macrocode}
\def\measuretrow #1\\{%
   \ifx #1&\let\NEXT\relax% 
   \else\measuretcell #1&\\&\\&%
     \let\NEXT\measuretrow%
   \fi\NEXT}

%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\edtabcolsep}
% The length \protect\cs{edtabcolsep} controls the distance between columns.
%    \begin{macrocode}
\newskip\edtabcolsep
\global\edtabcolsep=10pt 

%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\variab}
%    \begin{macrocode}
\newcommand{\variab}{\relax}

%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\l@dcheckcols}
% Check that the number of columns is consistent. 
%    \begin{macrocode}
\newcommand*{\l@dcheckcols}{%
  \ifnum\l@dcolcount=1\relax
  \else
    \ifnum\l@dampcount=1\relax
    \else
      \ifnum\l@dcolcount=\l@dampcount\relax
      \else
        \l@d@err@UnequalColumns
      \fi
    \fi
    \l@dampcount=\l@dcolcount
  \fi}

%    \end{macrocode}
% \end{macro}
%
%
%
% \begin{macro}{\edfilldimen}
% A length. 
%    \begin{macrocode}
\newdimen\edfilldimen
\edfilldimen=0pt

%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\c@addcolcount}
% \begin{macro}{\theaddcolcount}
% A counter to hold the number of a column. We use a roman number so
% that we can grab the column dimension from \protect\cs{dcol}.
% We do not use the \cs{roman} \LaTeX\ command, because some packages, like \package{babel} can override it in some specific cases (Greek, for example).
%    \begin{macrocode}
\newcounter{addcolcount}
  \renewcommand{\theaddcolcount}{\romannumeral \c@addcolcount}
%    \end{macrocode}
% \end{macro}
% \end{macro}
% \subsubsection{Tabular typesetting}
% \begin{macro}{\setmcellright}
% Typeset (recursively) cells of display math right justified. 
%    \begin{macrocode}
\def\setmcellright #1&{\def\edlabel##1{}%
       \let\edindex\nulledindex
       \ifx #1\\ \ifnum\l@dcolcount=0%\removelastskip
                     \let\Next\relax% 
                \else\l@dcolcount=0% 
                      \let\Next=\setmcellright% 
                \fi%
       \else% 
           \disablel@dtabfeet%
           \stepl@dcolcount%
           \disable@notes%
           \setbox\hilfsbox=\hbox{$\displaystyle{#1}$}%
           \restore@notes%
           \letsforverteilen%
           \hskip\hilfsskip$\displaystyle{#1}$%
           \hskip\edtabcolsep%
           \let\Next=\setmcellright% 
       \fi\Next}

%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\settcellright}
% Typeset (recursively) cells of text right justified. 
%    \begin{macrocode}
\def\settcellright #1&{\def\edlabel##1{}%
       \let\edindex\nulledindex
       \ifx #1\\ \ifnum\l@dcolcount=0%\removelastskip
                    \let\Next\relax% 
                \else\l@dcolcount=0% 
                      \let\Next=\settcellright% 
                \fi%
       \else% 
           \disablel@dtabfeet%
           \stepl@dcolcount%
           \disable@notes%
           \setbox\hilfsbox=\hbox{#1}%
           \restore@notes%
           \letsforverteilen%
           \hskip\hilfsskip#1%
           \hskip\edtabcolsep%
           \let\Next=\settcellright% 
       \fi\Next}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\setmcellleft}
% Typeset (recursively) cells of display math left justified. 
%    \begin{macrocode}
\def\setmcellleft #1&{\def\edlabel##1{}%
    \let\edindex\nulledindex
    \ifx #1\\ \ifnum\l@dcolcount=0 \let\Next\relax%
              \else\l@dcolcount=0%
                    \let\Next=\setmcellleft% 
              \fi%
     \else   \disablel@dtabfeet%   
              \stepl@dcolcount%
              \disable@notes%
              \setbox\hilfsbox=\hbox{$\displaystyle{#1}$}%
              \restore@notes%
              \letsforverteilen%
              $\displaystyle{#1}$\hskip\hilfsskip\hskip\edtabcolsep%
              \let\Next=\setmcellleft%
     \fi\Next}

%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\settcellleft}
% Typeset (recursively) cells of text left justified. 
%    \begin{macrocode}
\def\settcellleft #1&{\def\edlabel##1{}%
    \let\edindex\nulledindex
    \ifx #1\\ \ifnum\l@dcolcount=0 \let\Next\relax%
              \else\l@dcolcount=0%
                    \let\Next=\settcellleft% 
              \fi%
     \else   \disablel@dtabfeet%   
              \stepl@dcolcount%
              \disable@notes%
              \setbox\hilfsbox=\hbox{#1}%
              \restore@notes%
              \letsforverteilen%
              #1\hskip\hilfsskip\hskip\edtabcolsep%
              \let\Next=\settcellleft%
     \fi\Next}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\setmcellcenter}
% Typeset (recursively) cells of display math centered. 
%    \begin{macrocode}
\def\setmcellcenter #1&{\def\edlabel##1{}%
    \let\edindex\nulledindex
    \ifx #1\\ \ifnum\l@dcolcount=0\let\Next\relax%
             \else\l@dcolcount=0%
                   \let\Next=\setmcellcenter%
             \fi%
    \else    \disablel@dtabfeet%
             \stepl@dcolcount%
             \disable@notes%
             \setbox\hilfsbox=\hbox{$\displaystyle{#1}$}%
             \restore@notes%
             \letsforverteilen%
             \hskip 0.5\hilfsskip$\displaystyle{#1}$\hskip0.5\hilfsskip%
             \hskip\edtabcolsep%
             \let\Next=\setmcellcenter%
     \fi\Next}

%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\settcellcenter}
% Typeset (recursively) cells of text centered. 
%    \begin{macrocode}
\def\settcellcenter #1&{\def\edlabel##1{}%
    \let\edindex\nulledindex
    \ifx #1\\ \ifnum\l@dcolcount=0 \let\Next\relax%
              \else\l@dcolcount=0%
                    \let\Next=\settcellcenter% 
              \fi%
     \else   \disablel@dtabfeet%   
              \stepl@dcolcount%
              \disable@notes%
              \setbox\hilfsbox=\hbox{#1}%
              \restore@notes%
              \letsforverteilen%
              \hskip 0.5\hilfsskip #1\hskip 0.5\hilfsskip%
              \hskip\edtabcolsep%
              \let\Next=\settcellcenter%
     \fi\Next}

%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\NEXT}
%    \begin{macrocode}
\let\NEXT=\relax

%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\setmrowright}
% Typeset (recursively) rows of right justified math. 
%    \begin{macrocode}
\def\setmrowright #1\\{%
    \ifx #1& \let\NEXT\relax
    \else \centerline{\setmcellright #1&\\&\\&}
          \let\NEXT=\setmrowright
    \fi\NEXT}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\settrowright}
% Typeset (recursively) rows of right justified text. 
%    \begin{macrocode}
\def\settrowright #1\\{%
    \ifx #1& \let\NEXT\relax
    \else \centerline{\settcellright #1&\\&\\&}
          \let\NEXT=\settrowright
    \fi\NEXT}

%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\setmrowleft}
% Typeset (recursively) rows of left justified math. 
%    \begin{macrocode}
\def\setmrowleft #1\\{%
    \ifx #1&\let\NEXT\relax
    \else \centerline{\setmcellleft #1&\\&\\&}
          \let\NEXT=\setmrowleft
    \fi\NEXT}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\settrowleft}
% Typeset (recursively) rows of left justified text. 
%    \begin{macrocode}
\def\settrowleft #1\\{%
    \ifx #1& \let\NEXT\relax
    \else \centerline{\settcellleft #1&\\&\\&}
          \let\NEXT=\settrowleft
    \fi\NEXT}

%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\setmrowcenter}
% Typeset (recursively) rows of centered math. 
%    \begin{macrocode}
\def\setmrowcenter #1\\{%
    \ifx #1& \let\NEXT\relax%
    \else \centerline{\setmcellcenter #1&\\&\\&}
          \let\NEXT=\setmrowcenter
     \fi\NEXT}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\settrowcenter}
% Typeset (recursively) rows of centered text. 
%    \begin{macrocode}
\def\settrowcenter #1\\{%
    \ifx #1& \let\NEXT\relax
    \else \centerline{\settcellcenter #1&\\&\\&}
          \let\NEXT=\settrowcenter
    \fi\NEXT}

%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\nullsetzen}
% 
%    \begin{macrocode}
\newcommand{\nullsetzen}{%
    \stepl@dcolcount%
    \l@dcolwidth=0pt%
    \ifnum\l@dcolcount=30\let\NEXT\relax%
          \l@dcolcount=0\relax
    \else\let\NEXT\nullsetzen%
    \fi\NEXT}

%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\edatleft}
% \protect\cs{edatleft}\oarg{math}\marg{symbol}\marg{len}.
% Left \meta{symbol}, 2\meta{len} high with prepended \meta{math} vertically centered.
%    \begin{macrocode}
\newcommand{\edatleft}[3][\@empty]{%
  \ifx#1\@empty
    \vbox to 10pt{\vss\hbox{$\left#2\vrule width0pt height #3 
                           depth 0pt \right. $\hss}\vfil}
  \else 
    \vbox to 4pt{\vss\hbox{$#1\left#2\vrule width0pt height #3 
                depth 0pt \right. $}\vfil}
  \fi}
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\edatright}
% \protect\cs{edatright}\oarg{math}\marg{symbol}\marg{len}.
% Right \meta{symbol}, 2\meta{len} high with appended \meta{math} vertically centered.
%    \begin{macrocode}
\newcommand{\edatright}[3][\@empty]{%
  \ifx#1\@empty
    \vbox to 10pt{\vss\hbox{$\left.\vrule width0pt height #3
                depth 0pt \right#2 $\hss}\vfil}
  \else
    \vbox to 4pt{\vss\hbox{$\left.\vrule width0pt height #3 
                depth 0pt \right#2 #1 $}\vfil}
  \fi}

%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\edvertline}
% \protect\cs{edvertline}\marg{len} vertical line \meta{len} high. 
%    \begin{macrocode}
\newcommand{\edvertline}[1]{\vbox to 8pt{\vss\hbox{\vrule height #1}\vfil}}

%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\edvertdots}
% \protect\cs{edvertdots}\marg{len} vertical dotted line \meta{len} high. 
%    \begin{macrocode}
\newcommand{\edvertdots}[1]{\vbox to 1pt{\vss\vbox to #1%
         {\cleaders\hbox{$\m@th\hbox{.}\vbox to 0.5em{ }$}\vfil}}}

%    \end{macrocode}
% \end{macro}
%
%
%
% \begin{macro}{\l@dtabaddcols}
%  \protect\cs{l@dtabaddcols}\marg{startcol}\marg{endcol} adds the widths of
% the columns \meta{startcol} through \meta{endcol} to \protect\cs{edfilldimen}.
% It is a \LaTeX\ style 
% reimplementation of the original \protect\cs{@add@}.
%    \begin{macrocode}
\newcommand{\l@dtabaddcols}[2]{%
  \l@dcheckstartend{#1}{#2}%
  \ifl@dstartendok
  \setcounter{addcolcount}{#1}%
  \@whilenum \value{addcolcount}<#2\relax \do
  {\advance\edfilldimen by \the \csname dcol\theaddcolcount\endcsname
   \advance\edfilldimen by \edtabcolsep
   \stepcounter{addcolcount}}%
  \advance\edfilldimen by \the \csname dcol\theaddcolcount\endcsname
  \fi
}

%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\ifl@dstartendok}
% \begin{macro}{\l@dcheckstartend}
% \protect\cs{l@dcheckstartend}\marg{startcol}\marg{endcol} checks that the values 
% of \meta{startcol} and \meta{endcol} are sensible. If they are then
% \protect\cs{ifl@dstartendok} is set TRUE, otherwise it is set FALSE.
%    \begin{macrocode}
\newif\ifl@dstartendok
\newcommand{\l@dcheckstartend}[2]{%
  \l@dstartendoktrue
  \ifnum #1<\@ne
    \l@dstartendokfalse
    \led@err@LowStartColumn
  \fi
  \ifnum #2>30\relax
    \l@dstartendokfalse
    \led@err@HighEndColumn
  \fi
  \ifnum #1>#2\relax
    \l@dstartendokfalse
    \led@err@ReverseColumns
  \fi
}

%    \end{macrocode}
% \end{macro}
% \end{macro}
%
% \begin{macro}{\edrowfill}
% \begin{macro}{\@edrowfill@}
% \begin{macro}{\@EDROWFILL@}
% \protect\cs{edrowfill}\marg{startcol}\marg{endcol}{fill}
% fills columns \meta{startcol} to \meta{endcol} inclusive with
% \meta{fill} (e.g. \protect\cs{hrulefill}, \protect\cs{upbracefill}).
% This is a \LaTeX\ style reimplementation and generalization of the
% original \protect\cs{waklam}, \protect\cs{Waklam}, \protect\cs{waklamec}, \protect\cs{wastricht}
% and \protect\cs{wapunktel} macros.
%    \begin{macrocode}
\newcommand*{\edrowfill}[3]{% 
  \l@dtabaddcols{#1}{#2}%
  \hb@xt@ \the\l@dcolwidth{\hb@xt@ \the\edfilldimen{#3}\hss}}
\let\@edrowfill@=\edrowfill
\def\@EDROWFILL@#1#2#3{\@edrowfill@{#1}{#2}{#3}}

%    \end{macrocode}
% \end{macro}
% \end{macro}
% \end{macro}
% 
%
% \DescribeMacro{\edbeforetab}
% \DescribeMacro{\edaftertab}
% The macro \protect\cs{edbeforetab}\marg{text}\marg{math} puts \meta{text} at
% the left margin before array cell entry \meta{math}. Conversely,
% the macro \protect\cs{edaftertab}\marg{math}\marg{text} puts \meta{text}
% at the right margin after array cell entry \meta{math}.
% \protect\cs{edbeforetab} should be in the first column and \protect\cs{edaftertab} in the
% last column.
% The following macros support these.
%
% \begin{macro}{\leftltab}
% \protect\cs{leftltab}\marg{text} for \protect\cs{edbeforetab} in \protect\cs{ltab}. 
%    \begin{macrocode}
\newcommand{\leftltab}[1]{%   
  \hb@xt@\z@{\vbox{\edtabindent%
  \moveleft\Hilfsskip\hbox{\ #1}}\hss}}

%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\leftrtab}
% \protect\cs{leftrtab}\marg{text}\marg{math} for \protect\cs{edbeforetab} in \protect\cs{rtab}. 
%    \begin{macrocode}
\newcommand{\leftrtab}[2]{%  
  #2\hb@xt@\z@{\vbox{\edtabindent%
    \advance\Hilfsskip by\dcoli%
    \moveleft\Hilfsskip\hbox{\ #1}}\hss}}

%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\leftctab}
% \protect\cs{leftctab}\marg{text}\marg{math} for \protect\cs{edbeforetab} in \protect\cs{ctab}. 
%    \begin{macrocode}
\newcommand{\leftctab}[2]{%   
        \hb@xt@\z@{\vbox{\edtabindent\l@dcolcount=\l@dampcount%
        \advance\Hilfsskip by 0.5\dcoli%
        \setbox\hilfsbox=\hbox{\def\edlabel##1{}%
        \disablel@dtabfeet$\displaystyle{#2}$}%
        \advance\Hilfsskip by -0.5\wd\hilfsbox%
        \moveleft\Hilfsskip\hbox{\ #1}}\hss}%
        #2}

%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\rightctab}
% \protect\cs{rightctab}\marg{math}\marg{text} for \protect\cs{edaftertab} in \protect\cs{ctab}. 
%    \begin{macrocode}
\newcommand{\rightctab}[2]{% 
        \setbox\hilfsbox=\hbox{\def\edlabel##1{}%
        \disablel@dtabfeet#2}\l@dampcount=\l@dcolcount%
        #1\hb@xt@\z@{\vbox{\edtabindent\l@dcolcount=\l@dampcount%
        \advance\Hilfsskip by 0.5\l@dcolwidth%  
        \advance\Hilfsskip by -\wd\hilfsbox%
        \setbox\hilfsbox=\hbox{\def\edlabel##1{}%
        \disablel@dtabfeet$\displaystyle{#1}$}%
        \advance\Hilfsskip by -0.5\wd\hilfsbox%
        \advance\Hilfsskip by \edtabcolsep%
        \moveright\Hilfsskip\hbox{ #2}}\hss}%
        }

%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\rightltab}
% \protect\cs{rightltab}\marg{math}\marg{text} for \protect\cs{edaftertab} in \protect\cs{ltab}. 
%    \begin{macrocode}
\newcommand{\rightltab}[2]{%  
        \setbox\hilfsbox=\hbox{\def\edlabel##1{}%
        \disablel@dtabfeet#2}\l@dampcount=\l@dcolcount%
        #1\hb@xt@\z@{\vbox{\edtabindent\l@dcolcount=\l@dampcount%
        \advance\Hilfsskip by\l@dcolwidth%
        \advance\Hilfsskip by-\wd\hilfsbox%
        \setbox\hilfsbox=\hbox{\def\edlabel##1{}%
        \disablel@dtabfeet$\displaystyle{#1}$}%
        \advance\Hilfsskip by-\wd\hilfsbox%
        \advance\Hilfsskip by\edtabcolsep%
        \moveright\Hilfsskip\hbox{ #2}}\hss}%
        }

%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\rightrtab}
% \protect\cs{rightrtab}\marg{math}\marg{text} for \protect\cs{edaftertab} in \protect\cs{rtab}. 
%    \begin{macrocode}
\newcommand{\rightrtab}[2]{%  
        \setbox\hilfsbox=\hbox{\def\edlabel##1{}%
        \disablel@dtabfeet#2}%
        #1\hb@xt@\z@{\vbox{\edtabindent%
        \advance\Hilfsskip by-\wd\hilfsbox%
        \advance\Hilfsskip by\edtabcolsep%
        \moveright\Hilfsskip\hbox{ #2}}\hss}%
        }

%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\rtab}
% \begin{macro}{\edbeforetab}
% \begin{macro}{\edaftertab}
% \protect\cs{rtab}\marg{body} typesets \meta{body} as an array with the
% entries right justified. 
% 
%
%    The process is first to measure the \meta{body} to get the column
% widths, and then in a second pass to typeset the body.
%    \begin{macrocode}
\newcommand{\rtab}[1]{%
  \l@dnullfills
    \def\edbeforetab##1##2{\leftrtab{##1}{##2}}%
    \def\edaftertab##1##2{\rightrtab{##1}{##2}}%
    \measurembody{#1}%
  \l@drestorefills
    \variab
    \setmrowright #1\\&\\%
    \enablel@dtabfeet}

%    \end{macrocode}
% \end{macro}
% \end{macro}
% \end{macro}
%
% \begin{macro}{\measurembody}
% \protect\cs{measurembody}\marg{body} measures the array \meta{body}.
%    \begin{macrocode}
\newcommand{\measurembody}[1]{%
  \disablel@dtabfeet%
  \l@dcolcount=0%
  \nullsetzen%
  \l@dcolcount=0
  \measuremrow #1\\&\\%
  \global\l@dampcount=1}

%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\rtabtext}
% \protect\cs{rtabtext}\marg{body} typesets \meta{body} as a tabular with the
% entries right justified. 
%    \begin{macrocode}
\newcommand{\rtabtext}[1]{%
 \l@dnullfills
    \measuretbody{#1}%
 \l@drestorefills
    \variab
    \settrowright #1\\&\\%
    \enablel@dtabfeet}

%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\measuretbody}
% \protect\cs{measuretbody}\marg{body} measures the tabular \meta{body}.
%    \begin{macrocode}
\newcommand{\measuretbody}[1]{%
  \disable@notes%
  \disablel@dtabfeet%
  \l@dcolcount=0%
  \nullsetzen%
  \l@dcolcount=0
  \measuretrow #1\\&\\%
  \restore@notes%
  \global\l@dampcount=1}

%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\ltab}
% \begin{macro}{\edbeforetab}
% \begin{macro}{\edaftertab}
% Array with entries left justified. 
%    \begin{macrocode}
\newcommand{\ltab}[1]{%
 \l@dnullfills
    \def\edbeforetab##1##2{\leftltab{##1}{##2}}%
    \def\edaftertab##1##2{\rightltab{##1}{##2}}%
    \measurembody{#1}%
  \l@drestorefills
    \variab
    \setmrowleft #1\\&\\%
    \enablel@dtabfeet}

%    \end{macrocode}
% \end{macro}
% \end{macro}
% \end{macro}
%
% \begin{macro}{\ltabtext}
% Tabular with entries left justified. 
%    \begin{macrocode}
\newcommand{\ltabtext}[1]{%
  \l@dnullfills
    \measuretbody{#1}%
  \l@drestorefills
    \variab
    \settrowleft #1\\&\\%
    \enablel@dtabfeet}

%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\ctab}
% \begin{macro}{\edbeforetab}
% \begin{macro}{\edaftertab}
% Array with centered entries. 
%    \begin{macrocode}
\newcommand{\ctab}[1]{%
  \l@dnullfills
    \def\edbeforetab##1##2{\leftctab{##1}{##2}}%
    \def\edaftertab##1##2{\rightctab{##1}{##2}}%
    \measurembody{#1}%
  \l@drestorefills
    \variab
    \setmrowcenter #1\\&\\%
    \enablel@dtabfeet}

%    \end{macrocode}
% \end{macro}
% \end{macro}
% \end{macro}
%
% \begin{macro}{\ctabtext}
% Tabular with entries centered. 
%    \begin{macrocode}
\newcommand{\ctabtext}[1]{%
  \l@dnullfills
    \measuretbody{#1}%
  \l@drestorefills
    \variab
    \settrowcenter #1\\&\\%
    \enablel@dtabfeet}

%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\spreadtext}
% 
%    \begin{macrocode}
\newcommand{\spreadtext}[1]{%\l@dcolcount=\l@dampcount%
   \hb@xt@ \the\l@dcolwidth{\hbox{#1}\hss}}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\spreadmath}
% 
%    \begin{macrocode}
\newcommand{\spreadmath}[1]{%
  \hb@xt@ \the\l@dcolwidth{\hbox{$\displaystyle{#1}$}\hss}}

%    \end{macrocode}
% \end{macro}
%
%
%
%
% \begin{macro}{\HILFSskip}
% \begin{macro}{\Hilfsskip}
% More helpers.
%    \begin{macrocode}
\newskip\HILFSskip
\newskip\Hilfsskip

%    \end{macrocode}
% \end{macro}
% \end{macro}
%
% \begin{macro}{\EDTABINDENT}
% 
%    \begin{macrocode}
\newcommand{\EDTABINDENT}{%  
    \ifnum\l@dcolcount=30\let\NEXT\relax\l@dcolcount=0%
    \else\stepl@dcolcount%
         \advance\Hilfsskip by\l@dcolwidth% 
         \ifdim\l@dcolwidth=0pt\advance\hilfscount\@ne
         \else\advance\Hilfsskip by \the\hilfscount\edtabcolsep%  
         \hilfscount=1\fi%                                  
         \let\NEXT=\EDTABINDENT%
    \fi\NEXT}%
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\edtabindent}
% (was |\tabindent|)
%    \begin{macrocode}
\newcommand{\edtabindent}{% 
    \l@dcolcount=0\relax
    \Hilfsskip=0pt%
    \hilfscount=1\relax
    \EDTABINDENT%
    \hilfsskip=\hsize% 
    \advance\hilfsskip -\Hilfsskip% 
    \Hilfsskip=0.5\hilfsskip% 
    }%

%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\EDTAB}
% (was |\TAB|)
%    \begin{macrocode}
\def\EDTAB #1|#2|{%
    \setbox\tabhilfbox=\hbox{$\displaystyle{#1}$}%
    \setbox\tabHilfbox=\hbox{$\displaystyle{#2}$}%
    \advance\tabelskip -\wd\tabhilfbox%
    \advance\tabelskip -\wd\tabHilfbox%
    \unhbox\tabhilfbox\hskip\tabelskip%
    \unhbox\tabHilfbox}%

%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\EDTABtext}
% (was |\TABtext|)
%    \begin{macrocode}
\def\EDTABtext #1|#2|{%
    \setbox\tabhilfbox=\hbox{#1}%
    \setbox\tabHilfbox=\hbox{#2}%
    \advance\tabelskip -\wd\tabhilfbox%
    \advance\tabelskip -\wd\tabHilfbox%
    \unhbox\tabhilfbox\hskip\tabelskip%
    \unhbox\tabHilfbox}%
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\tabhilfbox}
% \begin{macro}{\tabHilfbox}
% Further helpers.
%    \begin{macrocode}
\newbox\tabhilfbox
\newbox\tabHilfbox

%    \end{macrocode}
% \end{macro}
% \end{macro}
% \subsubsection{Environments}
% \begin{environment}{edarrayl}
% \begin{environment}{edarrayc}
% \begin{environment}{edarrayr}
% The `environment' forms for \protect\cs{ltab}, \protect\cs{ctab} and \protect\cs{rtab}.
%    \begin{macrocode}
\newenvironment{edarrayl}{\l@dcollect@body\ltab}{}
\newenvironment{edarrayc}{\l@dcollect@body\ctab}{}
\newenvironment{edarrayr}{\l@dcollect@body\rtab}{}

%    \end{macrocode}
% \end{environment}
% \end{environment}
% \end{environment}
%
% \begin{environment}{edtabularl}
% \begin{environment}{edtabularc}
% \begin{environment}{edtabularr}
% The `environment' forms for \protect\cs{ltabtext}, \protect\cs{ctabtext} and \protect\cs{rtabtext}.
%    \begin{macrocode}
\newenvironment{edtabularl}{\l@dcollect@body\ltabtext}{}
\newenvironment{edtabularc}{\l@dcollect@body\ctabtext}{}
\newenvironment{edtabularr}{\l@dcollect@body\rtabtext}{}

%    \end{macrocode}
% \end{environment}
% \end{environment}
% \end{environment}
%
%
% \section{Quotation's commands}
% \begin{macro}{\initnumbering@quote}
% This macro, called at the beginning of any numbered section, locally redefines the \verb+quotation+ and \verb+quote+ environments, in order to allow their use inside of numbered sections.
% \changes{v2.0.0}{2015/07/19}{\protect\cs{initnumbering@sectcmd} becomes \protect\cs{initnumbering@quote}}
% \begin{macro}{\quotation}
% \begin{macro}{\endquotation}
% \begin{macro}{\quote}
% \begin{macro}{\endquote}
% \changes{v1.12.0}{2014/08/05}{\protect\cs{ledxxx} sectioning commands are deprecated and replaced by \protect\cs{eledxxx} commands.}
% \changes{v1.2.0}{2012/10/08}{Compatibility of \protect\cs{ledchapter} with the \emph{memoir} class.}
% \changes{v1.3.0}{2012/11/01}{\emph{Quotation} and {quote} environment inside numbered sections.}
% \changes{v1.4.1}{2012/11/16}{New option \emph{noquotation}.}
% \changes{v1.4.7}{2012/06/07}{Compatibility of sectioning commands with \protect\cs{autopar}.}
% \changes{v1.8.0}{2013/12/13}{Correction of sectioning commands in parallel texts.}
% \changes{v1.10.0}{2014/02/27}{Correction of sectioning commands in parallel texts.}
% \protect\cs{initnumbering@quote} defines  quotation environment. 
%    \begin{macrocode}
\newcommand{\initnumbering@quote}{
    \ifnoquotation@\else
    \renewcommand{\quotation}{\par\leavevmode%
                                \parindent=1.5em%
                                \skipnumbering%
                                \ifautopar%
                                    \vskip-\parskip%
                                \else%
                                    \vskip\topsep%
                                \fi%
                                \global\leftskip=\leftmargin%
                                \global\rightskip=\leftmargin%
                            }
    \renewcommand{\endquotation}{\par%
                             \global\leftskip=0pt%
                                \global\rightskip=0pt%
                                \leavevmode%
                                \skipnumbering%
                                \ifautopar%
                                    \vskip-\parskip%
                                \else%
                                    \vskip\topsep%
                                \fi%
                                }
    \renewcommand{\quote}{\par\leavevmode%
                                \parindent=0pt%
                                \skipnumbering%
                                \ifautopar%
                                    \vskip-\parskip%
                                \else%
                                    \vskip\topsep%
                                \fi%
                                \global\leftskip=\leftmargin%
                                \global\rightskip=\leftmargin%
    }
    \renewcommand{\endquote}{\par%
                                \global\leftskip=0pt%
                                \global\rightskip=0pt%
                                \leavevmode%
                                \skipnumbering%
                                \ifautopar%
                                    \vskip-\parskip%
                                \else%
                                    \vskip\topsep%
                                \fi%
                                }
    \fi
}
%    \end{macrocode}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \section{Section's title commands}
% \subsection{Commands to disable some feature}
% \begin{macro}{\ledsectnotoc}
% The \protect\cs{ledsectnotoc} only disables the \protect\cs{addcontentsline} macro.
%    \begin{macrocode}
\newcommand{\ledsectnotoc}{\let\addcontentsline\@gobblethree}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\ledsectnomark}
% The \protect\cs{ledsectnomark} only disables the \protect\cs{chaptermark}, \protect\cs{sectionmark} and \protect\cs{subsectionmark} macros.
%    \begin{macrocode}
\newcommand{\ledsectnomark}{%
  \let\chaptermark\@gobble%
  \let\sectionmark\@gobble%
  \let\subsectionmark\@gobble%
}
%    \end{macrocode}
% \end{macro}
% \subsection{General overview}
% The system of \protect\cs{eledxxxx} commands to section text work like this:
% \begin{enumerate}
%     \item When one of these commands is called, \macpackage  writes to an auxiliary files:
%      \begin{itemize}
%           \item The section level.
%           \item The section title.
%           \item The side (when \protect\package{eledpar} is used).
%           \item The pstart where the command is called.
%           \item If we have starred version or not.
%      \end{itemize}
%   \item \macpackage adds the title of the section to pstart, as  normal content. This is to enable critical notes.
%   \item When \LaTeX\ is run a other time, this file is read. That:
%     \begin{itemize}
%         \item Adds the pstart number to a list of pstarts where a sectioning command is used.
%         \item Defines a command, the name of which contains the pstart number, and which calls the normal \LaTeX\ sectioning command.
%     \end{itemize}
%   \item This last command is called when the pstart is effectively printed.
% \end{enumerate}
% \subsection{\protect\cs{beforeeledchapter} command} 
% We do not define commands for \protect\cs{eledsection} and related if the \verb+noeledsec+ option is loaded.
% We use \protect\package{etoolbox} tests and not the \protect\cs{ifxxx}\ldots\protect\cs{else}\ldots\protect\cs{fi} structure to prevent problem of expansions with command after the \protect\cs{ifxxx} which contains \protect\cs{fi}.
% As we patch command inside this test, we need to change the category code of \# character \emph{before} \protect\cs{notbool} statement, because the second argument is read with the standard catcode (read \thetexbook to understand when the catcode's change has effect). 
%    \begin{macrocode}
\catcode`\#=12
\notbool{@noeled@sec}{%
%    \end{macrocode}
% \begin{macro}{\beforeeledchapter}
% For technical reasons, not yet solved, page-breaking before chapters can't be made automatically by eledmac. Users have to use \protect\cs{beforeeledchapter}.
%    \begin{macrocode}
\ifl@dmemoir
  \newcommand\beforeeledchapter{%
  \clearforchapter%
}
\else
  \newcommand\beforeeledchapter{%
  \if@openright%
   \cleardoublepage%
  \else%
   \clearpage%
  \fi%
}
\fi
%    \end{macrocode}
% \end{macro}
% \subsection{Auxiliary commands}
% \begin{macro}{\if@eled@sectioning}
% The boolean \protect\cs{if@eled@sectioning} is set to true when a sectioning command is called by a \protect\cs{eledxxx} command, and set to false after. It is used to enable/disable line number printing.
%    \begin{macrocode}
\newif\if@eled@sectioning
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\print@leftmargin@eledsection}
% \begin{macro}{\print@rightmargin@eledsection}
% \protect\cs{print@leftmargin@eledsection} and \protect\cs{print@rightmargin@eledsection} are added by \macpackage inside the code of sectioning command, in order to affix lines numbers.
% They include tests for RTL languages. 
%    \begin{macrocode}
\def\print@rightmargin@eledsection{%
  \if@eled@sectioning%
    \begingroup%
    \if@RTL%  
        \let\llap\rlap%
        \let\leftlinenum\rightlinenum%
        \let\leftlinenumR\rightlinenumR%
        \let\l@drd@ta\l@dld@ta%
        \let\l@drsn@te\l@dlsn@te%
    \fi%
    \hfill\l@drd@ta \csuse{LR}{\l@drsn@te}%
    \endgroup%
  \fi%
}%

\def\print@leftmargin@eledsection{%
  \if@eled@sectioning%
    \leavevmode%
    \begingroup%
    \if@RTL%
        \let\rlap\llap%
        \let\rightlinenum\leftlinenum%
        \let\rightlinenumR\leftlinenumR%
        \let\l@dld@ta\l@drd@ta%
        \let\l@dlsn@te\l@drsn@te%
    \fi%
    \l@dld@ta\csuse{LR}{\l@dlsn@te}%
    \endgroup%
  \fi%
}%

%    \end{macrocode}
% \end{macro}
% \end{macro}
% \subsection{Patching standard commands}
% \begin{macro}{\chapter}
% \begin{macro}{\M@sect}
% \begin{macro}{\@mem@old@ssect}
% \begin{macro}{\@makechapterhead}
% \begin{macro}{\@makechapterhead}
% \begin{macro}{\@makeschapterhead}
% \begin{macro}{\@sect}
% \begin{macro}{\@ssect}
% \changes{v1.12.5}{2014/08/28}{Debug \protect\cs{eledchapter} in parallel with \protect\package{memoir}}
% \changes{v1.14.2}{2014/12/17}{Debug \protect\cs{edtext} after starred sectioning commands when using \protect\ltxclass{memoir} class.}
% We have to patch \LaTeX, \protect\ltxclass{book} and \protect\ltxclass{memoir} sectioning commands in order to:
% \begin{itemize}
%  \item Disable \protect\cs{edtext} inside.
%  \item Disable page breaking (for \protect\cs{chapter}).
%  \item Add line numbers and sidenotes. 
% \end{itemize}
% Unfortunately, Maïeul Rouquette was not able to try if \protect\ltxclass{memoir} is loaded. That is why \protect\package{eledmac} tries to define for both standard class and \protect\ltxclass{memoir} class.
%
%   
%    \begin{macrocode}
\AtBeginDocument{%
\patchcmd{\chapter}{\clearforchapter}{%
  \if@eled@sectioning\else%
    \ifl@dprintingpages\else%
      \clearforchapter%
    \fi%
  \fi%
  }
  {}
  {}


\pretocmd{\M@sect}
  {\let\old@edtext=\edtext%
  \let\edtext=\dummy@edtext@showlemma%
  }
  {}
  {}

\apptocmd{\M@sect}
  {\let\edtext=\old@edtext}
  {}
  {}

\patchcmd{\M@sect}
  { #9}
  { #9%
  \print@rightmargin@eledsection%
  }
  {}
  {}

\patchcmd{\M@sect}
  {\hskip #3\relax}
  {\hskip #3\relax%
  \print@leftmargin@eledsection%
  }
  {}
  {}

\patchcmd{\@mem@old@ssect}
  {#5}
  {#5%
  \print@leftmargin@eledsection%
  }
  {}
  {}

\patchcmd{\@mem@old@ssect}
  {\hskip #1}
  {\hskip #1%
  \print@rightmargin@eledsection%
  }
  {}
  {}

\patchcmd{\chapter}{\if@openright\cleardoublepage\else\clearpage\fi}{%
  \if@eled@sectioning\else%
    \ifl@dprintingpages\else%
      \if@openright\cleardoublepage\else\clearpage\fi%No clearpage inside a \Pages: will keep critical notes from printing on the title page. Here for classical  classes
    \fi%
  \fi%
  }%
  {}%
  {}%

\patchcmd{\scr@startchapter}{\if@openright\cleardoublepage\else\clearpage\fi}{%
  \if@eled@sectioning\else%
    \ifl@dprintingpages\else%
      \if@openright\cleardoublepage\else\clearpage\fi%No clearpage inside a \Pages: will keep critical notes from printing on the title page. Here for scrbook.
    \fi%
  \fi%
  }
  {}
  {}

\patchcmd{\@makechapterhead}
  {#1}
  {\print@leftmargin@eledsection%
    #1%
  \print@rightmargin@eledsection%
  }
  {}
  {}

\patchcmd{\@makechapterhead}% For BIDI
  {\if@RTL\raggedleft\else\raggedright\fi}%
  {\if@eled@sectioning\else%
    \if@RTL\raggedleft\else\raggedright\fi%
  \fi%
  }%
  {}%
  {}%

\patchcmd{\@makeschapterhead}
  {#1}
  {\print@leftmargin@eledsection%
    #1%
   \print@rightmargin@eledsection%
  }
  {}
  {}

\pretocmd{\@sect}
  {\let\old@edtext=\edtext
  \let\edtext=\dummy@edtext@showlemma%
  }
  {}
  {}

\apptocmd{\@sect}
  {\let\edtext=\old@edtext}
  {}
  {}

\pretocmd{\@ssect}
  {\let\old@edtext=\edtext%
  \let\edtext=\dummy@edtext@showlemma%
  }
  {}
  {}

\apptocmd{\@ssect}
  {\let\edtext=\old@edtext}
  {}
  {}
  
%    \end{macrocode}
% \changes{v1.14.1}{2014/12/15}{Debug sectioning commands when using both \protect\package{handout} and \protect\package{hyperref} package.}
% \protect\package{hyperref} also redefines  \protect\cs{@sect}. That is why, when manipulating arguments, we patch \protect\cs{@sect} and the same only if \protect\package{hyperref} is not used. If it is, we patch the \protect\cs{NR} commands.
%    \begin{macrocode}
\@ifpackageloaded{nameref}{

  \patchcmd{\NR@sect}
    {#8}
    {#8%
    \print@rightmargin@eledsection%
    }
    {}
    {}
  
  \patchcmd{\NR@sect}
    {\hskip #3\relax}
    {\hskip #3\relax%
    \print@leftmargin@eledsection%
    }
    {}
    {}
  
  \patchcmd{\NR@ssect}
    {#5}
    {#5%
    \print@rightmargin@eledsection%
    }
    {}
    {}
  
  \patchcmd{\NR@ssect}
    {\hskip #1}
    {\hskip #1%
    \print@leftmargin@eledsection%
    }
    {}
    {}
  }%
  {
  \patchcmd{\@sect}
    {#8}
    {#8%
    \print@rightmargin@eledsection%
    }
    {}
    {}
  
  \patchcmd{\@sect}
    {\hskip #3\relax}
    {\hskip #3\relax%
    \print@leftmargin@eledsection%
    }
    {}
    {}
  
  \patchcmd{\@ssect}
    {#5}
    {#5%
    \print@rightmargin@eledsection%
    }
    {}
    {}
  
  \patchcmd{\@ssect}
    {\hskip #1}
    {\hskip #1%
    \print@leftmargin@eledsection%
    }
    {}
    {}
  }%
}
%    \end{macrocode}
% Now, we have finished to patch the commands, using \# with a catcode equals to 12. We close the \verb+\notbool{@noeled@sec}+ statement, restore the normal catcode for \# and reopen a new \verb+\notbool{@noeled@sec}+ statement. 
%    \begin{macrocode}
{}}%
\protect\catcode`\#=6 %Space NEEDS by \catcode
\notbool{@noeled@sec}{%
%    \end{macrocode}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \subsection{Main code of \protect\cs{eledxxx} commands} 
% \begin{macro}{\eled@sectioning@out}
% \protect\cs{eled@sectioning@out} is the output file, to dump the pstarts where a sectioning command is used.
%    \begin{macrocode}
\newwrite\eled@sectioning@out
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\eledchapter}
% \begin{macro}{\eledsection}
% \begin{macro}{\eledsubsection}
% \begin{macro}{\eledsubsubsection}
% \begin{macro}{\eledchapter*}
% \begin{macro}{\eledsection*}
% \begin{macro}{\eledsubsection*}
% \begin{macro}{\eledsubsubsection*}
% And now, the user sectioning commands, which write to the file, and also add content as a ``normal'' line.
%    \begin{macrocode}
\newcommand{\eledchapter}[2][]{%
  #2% 
  \ifledRcol%
    \immediate\write\eled@sectioningR@out{%
      \string\eled@chapter{#1}{\unexpanded{#2}}{\the\l@dnumpstartsR}{}{R}
      }%
  \else%
    \immediate\write\eled@sectioning@out{%
      \string\eled@chapter{#1}{\unexpanded{#2}}{\the\l@dnumpstartsL}{}{}
      }%
  \fi%
}

\newcommand{\eledsection}[2][]{%
  #2%
  \ifledRcol%
    \immediate\write\eled@sectioningR@out{%
      \string\eled@section{#1}{\unexpanded{#2}}{\the\l@dnumpstartsR}{}{R}
      }%
  \else%
    \immediate\write\eled@sectioning@out{%
      \string\eled@section{#1}{\unexpanded{#2}}{\the\l@dnumpstartsL}{}{}
      }%
  \fi%
}

\newcommand{\eledsubsection}[2][]{%
  #2%
  \ifledRcol%
    \immediate\write\eled@sectioningR@out{%
      \string\eled@subsection{#1}{\unexpanded{#2}}{\the\l@dnumpstartsR}{}{R}
      }%
  \else%
    \immediate\write\eled@sectioning@out{%
      \string\eled@subsection{#1}{\unexpanded{#2}}{\the\l@dnumpstartsL}{}{}
      }%
  \fi%
}
\newcommand{\eledsubsubsection}[2][]{%
  #2%
  \ifledRcol%
    \immediate\write\eled@sectioningR@out{%
      \string\eled@subsubsection{#1}{\unexpanded{#2}}{\the\l@dnumpstartsR}{}{R}
      }%
  \else%
    \immediate\write\eled@sectioning@out{%
      \string\eled@subsubsection{#1}{\unexpanded{#2}}{\the\l@dnumpstartsL}{}{}
      }%
  \fi%
}
 

\WithSuffix\newcommand\eledchapter*[2][]{%
  #2%
  \ifledRcol%
    \immediate\write\eled@sectioningR@out{%
      \string\eled@chapter{#1}{\unexpanded{#2}}{\the\l@dnumpstartsR}{*}{R}
      }%
  \else%
    \immediate\write\eled@sectioning@out{%
      \string\eled@chapter{#1}{\unexpanded{#2}}{\the\l@dnumpstartsL}{*}{}
      }%
  \fi%
}
 
\WithSuffix\newcommand\eledsection*[2][]{%
  #2%
  \ifledRcol%
    \immediate\write\eled@sectioningR@out{%
      \string\eled@section{#1}{\unexpanded{#2}}{\the\l@dnumpstartsR}{*}{R}
      }%
  \else%
    \immediate\write\eled@sectioning@out{%
      \string\eled@section{#1}{\unexpanded{#2}}{\the\l@dnumpstartsL}{*}{}
      }%
  \fi%
}
  
\WithSuffix\newcommand\eledsubsection*[2][]{%
  #2%
  \ifledRcol%
    \immediate\write\eled@sectioningR@out{%
      \string\eled@subsection{#1}{\unexpanded{#2}}{\the\l@dnumpstartsR}{*}{R}
      }%
  \else%
    \immediate\write\eled@sectioning@out{%
      \string\eled@subsection{#1}{\unexpanded{#2}}{\the\l@dnumpstartsL}{*}{}
      }%
  \fi%
}
  
\WithSuffix\newcommand\eledsubsubsection*[2][]{%
  #2%
  \ifledRcol%
    \immediate\write\eled@sectioningR@out{%
      \string\eled@subsubsection{#1}{\unexpanded{#2}}{\the\l@dnumpstartsR}{*}{R}
      }%
  \else%
    \immediate\write\eled@sectioning@out{%
      \string\eled@subsubsection{#1}{\unexpanded{#2}}{\the\l@dnumpstartsL}{*}{}
      }%
  \fi%
}
%    \end{macrocode}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \subsection{Macros written in the auxiliary file}
% \begin{macro}{\eled@chapter}
% \begin{macro}{\eled@section}
% \begin{macro}{\eled@subsection}
% \begin{macro}{\eled@subsubsection}
% The sectioning macros, called in the auxiliary file. They have five arguments:
% \begin{enumerate}
%   \item Optional arguments of \LaTeX\ sectioning command.
%   \item Mandatory arguments of \LaTeX\ sectioning command.
%   \item Pstart number.
%   \item Side: \verb+R+ if right, nothing if left.
%   \item Starred or not.
% \end{enumerate}
%    \begin{macrocode}
\def\eled@chapter#1#2#3#4#5{%
    \ifstrempty{#4}%
      {%
      \ifstrempty{#1}%
        {%
        \global\csdef{eled@sectioning@#3#5}{\let\edtext=\dummy@edtext@showlemma\chapter{#2}}%
        \global\csdef{eled@sectmark@#3#5}{\let\edtext=\dummy@edtext{}\chaptermark{#2}}%
        }%Need for \pairs, because of using parbox.
        {%
        \global\csdef{eled@sectioning@#3#5}{\let\edtext=\dummy@edtext@showlemma\chapter[#1]{#2}}%
        \global\csdef{eled@sectmark@#3#5}{\let\edtext=\dummy@edtext{}\chaptermark{#2}}%Need for \pairs, because of using parbox.
        }%
      }%
      {%
      \ifstrempty{#1}%
        {\global\csdef{eled@sectioning@#3#5}{\let\edtext=\dummy@edtext@showlemma\chapter*{#2}}}%
        {\global\csdef{eled@sectioning@#3#5}{\let\edtext=\dummy@edtext@showlemma\chapter*[#1]{#2}}}%Bug in LaTeX!
      }%
  \listcsgadd{eled@sections#5@@}{#3}%
    }
\def\eled@section#1#2#3#4#5{%
    \ifstrempty{#4}%
      {\ifstrempty{#1}%
        {%
        \global\csdef{eled@sectioning@#3#5}{\section{#2}}%
        \global\csdef{eled@sectmark@#3#5}{\let\edtext=\dummy@edtext{}\sectionmark{#2}}%Need for \pairs, because of using parbox.
        }%
        {%
        \global\csdef{eled@sectioning@#3#5}{\section[#1]{#2}}%
        \global\csdef{eled@sectmark@#3#5}{\let\edtext=\dummy@edtext{}\sectionmark{#1}}%Need for \pairs, because of using parbox.        
        }%
      }%
      {\ifstrempty{#1}%
        {\global\csdef{eled@sectioning@#3#5}{\section*{#2}}}%
        {\global\csdef{eled@sectioning@#3#5}{\section*[#1]{#2}}}%Bug in LaTeX!
      }
  \listcsgadd{eled@sections#5@@}{#3}%
    }
\def\eled@subsection#1#2#3#4#5{%
    \ifstrempty{#4}%
      {\ifstrempty{#1}%
        {%
        \global\csdef{eled@sectioning@#3#5}{\subsection{#2}}%
        \global\csdef{eled@sectmark@#3#5}{\let\edtext=\dummy@edtext{}\csuse{subsectionmark}{#2}}%Need for \pairs, because of using parbox. \csuse in case of \subsectionmark is not defined (book)    
        }%
        {%
        \global\csdef{eled@sectioning@#3#5}{\subsection[#1]{#2}}%
        \global\csdef{eled@sectmark@#3#5}{\let\edtext=\dummy@edtext{}\csuse{subsectionmark}{#1}}%Need for \pairs, because of using parbox. \csuse in case of \subsectionmark is not defined (book)    
        }%
      }%
      {\ifstrempty{#1}%
        {\global\csdef{eled@sectioning@#3#5}{\subsection*{#2}}}%
        {\global\csdef{eled@sectioning@#3#5}{\subsection*[#1]{#2}}}%Bug in LaTeX!
      }
  \listcsgadd{eled@sections#5@@}{#3}%
    }
\def\eled@subsubsection#1#2#3#4#5{%
    \ifstrempty{#4}%
      {\ifstrempty{#1}%
        {\global\csdef{eled@sectioning@#3#5}{\subsubsection{#2}}}%
        {\global\csdef{eled@sectioning@#3#5}{\subsubsection[#1]{#2}}}%
      }%
      {\ifstrempty{#1}%
        {\global\csdef{eled@sectioning@#3#5}{\subsubsection*{#2}}}%
        {\global\csdef{eled@sectioning@#3#5}{\subsubsection*[#1]{#2}}}%Bug in LaTeX!
      }
  \listcsgadd{eled@sections#5@@}{#3}%
    }

%    \end{macrocode}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% End of the conditional test about \verb+noeledsec+ option.
%    \begin{macrocode}
}{}
%    \end{macrocode}
% \section{Page breaking or no page breaking depending of specific lines}
% By default, page breaks are automatic.  However, the user can define lines which will force page breaks, or prevent page breaks around one specific line.
% On the first run, the line-list file records the line number of where the page break is being changed (either forced, or prevented).
% On the next run, page breaks occur either before or after this line, depending on how the user sets the command.  The default setting is after the line.
% \begin{macro}{\normal@page@break}
% \protect\cs{normal@page@break} is an \protect\package{etoolbox} list which contains the absolute line number of the last line, for each page.
%    \begin{macrocode}
\def\normal@page@break{}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\prev@pb}
% \begin{macro}{\prev@nopb}
% The \protect\cs{l@prev@pb} macro is a \protect\package{etoolbox} list, which contains the lines in which page breaks occur (before or after).
% The \protect\cs{l@prev@nopb} macro is a \protect\package{etoolbox} list, which contains the lines with NO page break before or after.
%    \begin{macrocode}
\def\l@prev@pb{}
\def\l@prev@nopb{}
%    \end{macrocode}
% \end{macro}
% \end{macro}
% \begin{macro}{\ledpb}
% \begin{macro}{\ledpbnum}
% \begin{macro}{\lednopb}
% \begin{macro}{\lednopbnum}
% The \protect\cs{ledpb} macro writes the call to \protect\cs{led@pb} in line-list file.
% The \protect\cs{ledpbnum} macro writes the call to \protect\cs{led@pbnum} in line-list file.
% The \protect\cs{lednopb} macro writes the call to \protect\cs{led@nopb} in line-list file.
% The \protect\cs{lednopbnum} macro writes the call to \protect\cs{led@nopbnum} in line-list file.
%    \begin{macrocode}
\newcommand{\ledpb}{\write\linenum@out{\string\led@pb}}
\newcommand{\ledpbnum}[1]{\write\linenum@out{\string\led@pbnum{#1}}}
\newcommand{\lednopb}{\write\linenum@out{\string\led@nopb}}
\newcommand{\lednopbnum}[1]{\write\linenum@out{\string\led@nopbnum{#1}}}
%    \end{macrocode}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \begin{macro}{\led@pb}
% \begin{macro}{\led@pbnum}
% \begin{macro}{\led@nopb}
% \begin{macro}{\led@nopbnum}
% The \protect\cs{led@pb} adds the absolute line number in the \protect\cs{prev@pb} list.
% The \protect\cs{led@pbnum} adds the argument in the \protect\cs{prev@pb} list.
% The \protect\cs{led@nopb} adds the absolute line number in the \protect\cs{prev@nopb} list.
% The \protect\cs{led@nopbnum} adds the argument in the \protect\cs{prev@nopb} list.
%    \begin{macrocode}
\newcommand{\led@pb}{\listxadd{\l@prev@pb}{\the\absline@num}}
\newcommand{\led@pbnum}[1]{\listxadd{\l@prev@pb}{#1}}
\newcommand{\led@nopb}{\listxadd{\l@prev@nopb}{\the\absline@num}}
\newcommand{\led@nopbnum}[1]{\listxadd{\l@prev@nopb}{#1}}
%    \end{macrocode}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \begin{macro}{\ledpbsetting}
% \begin{macro}{\led@pb@setting}
% The \protect\cs{ledpbsetting} macro only changes the value of \protect\cs{led@pb@macro}, for which the default value is \verb+before+.
%    \begin{macrocode}
\def\led@pb@setting{before}
\newcommand{\ledpbsetting}[1]{\gdef\led@pb@setting{#1}}
%    \end{macrocode}
% \end{macro}
% \end{macro}
% \begin{macro}{\led@check@pb}
% \begin{macro}{\led@check@nopb}
% The \protect\cs{led@check@pb} and \protect\cs{led@check@nopb} are called before or after each line. 
% They check if a page break must occur, depending on the current line and on the content of \protect\cs{l@pb}.
%    \begin{macrocode}
\newcommand{\led@check@pb}{\xifinlist{\the\absline@num}{\l@prev@pb}{\pagebreak[4]}{}}
\newcommand{\led@check@nopb}{%
    \IfStrEq{\led@pb@setting}{before}{%
      \xifinlist{\the\absline@num}{\l@prev@nopb}%
         {\numdef{\abs@prevline}{\the\absline@num-1}%
         \xifinlist{\abs@prevline}{\normal@page@break}%
           {\nopagebreak[4]\enlargethispage{\baselineskip}}%
           {}}%
         {}}%
       {}%
     {}%
    \IfStrEq{\led@pb@setting}{after}{%
      \xifinlist{\the\absline@num}{\l@prev@nopb}{%
        \xifinlist{\the\absline@num}{\normal@page@break}%
          {\nopagebreak[4]\enlargethispage{\baselineskip}}%
            {}%
}%
         {}}%
       {}%
     {}%
}
%    \end{macrocode}
% \end{macro}
% \end{macro}
% \section{Long verse: prevents being separated by a page break}
% \begin{macro}{\iflednopbinverse}
% The \protect\cs{lednopbinverse} boolean is set to false by default.
% If set to true, \macpackage will automatically prevent page breaks inside verse.
% The declaration is made at the beginning of the file, because it is used as a package option.
% \end{macro}
% \begin{macro}{\check@pb@in@verse}
% The \protect\cs{check@pb@in@verse} checks if a verse is broken in two page. 
% If true, it adds:
% \begin{itemize}
%  \item The absolute line number of the first line of the verse -1  in the \protect\cs{led@pb} list, if the page break must occur before the verse.
%  \item The absolute line number of the first line of the verse -1  in the \protect\cs{led@nopb} list, if the page break must occur after the verse.
% \end{itemize}
%    \begin{macrocode}
\newcommand{\check@pb@in@verse}{%
    \ifinstanza\iflednopbinverse\ifinserthangingsymbol% Using stanzas and enabling page breaks in verse control, while on a hanging verse.
        \ifnum\page@num=\last@page@num\else%If we have change page
          \IfStrEq{\led@pb@setting}{before}{%
              \numgdef{\abs@line@verse}{\the\absline@num-1}%
              \ledpbnum{\abs@line@verse}%
            }{}%
          \IfStrEq{\led@pb@setting}{after}{%
              \numgdef{\abs@line@verse}{\the\absline@num-1}%
              \lednopbnum{\abs@line@verse}%
          }{}%
        \fi%
    \fi\fi\fi%
}
%    \end{macrocode}
% \end{macro}
% \section{Tools for \package{hyperrer} package}}
% \begin{macro}{\Hy@raisedlink@left}
% The \package{hyperref} package provides a \cs{Hy@raisedlink} command, to be used to add anchor to the top of a line and not on the bottom.\footcite{\url{http://tex.stackexchange.com/a/17138/7712}.}
%
% However, this command disturbs line breaking when called before any word.
% That is why \macpackage defines a \cs{Hy@raisedlink@left} be called at the left of a word, for the begin of an \cs{edtext} or for using inside the  \cs{edlabel} command.\footnote{The code ins inspired by an answer of @unbonpetit.
% Thanks to him.
% \url{http://texnique.fr:80/osqa/questions/781/hyraisedlink-perturbe-la-maniere-dont-se-fait-la-coupure-de-ligne/801}.} 
% 
%    \begin{macrocode}
\def\Hy@raisedlink@left#1{%
    \ifvmode
        #1%
    \else
        \Hy@SaveSpaceFactor
        \llap{\smash{% 
        \begingroup
            \let\HyperRaiseLinkLength\@tempdima
            \setlength\HyperRaiseLinkLength\HyperRaiseLinkDefault
            \HyperRaiseLinkHook
        \expandafter\endgroup
        \expandafter\raise\the\HyperRaiseLinkLength\hbox{%
            \Hy@RestoreSpaceFactor
            #1%
            \Hy@SaveSpaceFactor
        }%
        }}% 
        \Hy@RestoreSpaceFactor
        \penalty\@M\hskip\z@
    \fi
}
%    \end{macrocode}
% \end{macro}
% \section{Compatibility with \eledmac}
%
% Here, we define some command for the \verb+eledmac-compat+ option.
% 
%    \begin{macrocode}
\ifeledmaccompat@%

	\newcommand{\footnormalX}[1]{\arrangementX[#1]{normal}}%
	\newcommand{\footparagraphX}[1]{\arrangementX[#1]{paragraph}}%
	\newcommand{\foottwocolX}[1]{\arrangementX[#1]{twocol}}%
	\newcommand{\footthreecolX}[1]{\XarrangementX[#1]{threecol}}%
	
	\unless\ifnocritical@
	  \newcommand{\footnormal}[1]{\Xarrangement[#1]{normal}}%
	  \newcommand{\footparagraph}[1]{\Xarrangement[#1]{paragraph}}%
	  \newcommand{\foottwocol}[1]{\Xarrangement[#1]{twocol}}%
	  \newcommand{\footthreecol}[1]{\Xarrangement[#1]{threecol}}%
	  \let\hsizetwocol\Xhsizetwocol
	  \let\hsizethreecol\Xhsizethreecol
	  \let\bhookXnote\Xbhooknote
	  \let\boxsymlinenum\Xboxsymlinenum
	  \let\symlinenum\Xsymlinenum
	  \let\beforenumberinfootnote\Xbeforenumber
	  \let\afternumberinfootnote\Xafternumber
	  \let\beforeXsymlinenum\Xbeforesymlinenum
	  \let\afterXsymlinenum\Xaftersymlinenum
	  \let\inplaceofnumber\Xinplaceofnumber
	  \let\Xlemmaseparator\lemmaseparator
	  \let\afterlemmaseparator\Xafterlemmaseparator
	  \let\beforelemmaseparator\Xbeforelemmaseparator
	  \let\inplaceoflemmaseparator\Xinplaceoflemmaseparator
	  \let\txtbeforeXnotes\Xtxtbeforenotes
	  \let\afterXrule\Xafterrule
	  \let\numberonlyfirstinline\Xnumberonlyfirstinline
	  \let\numberonlyfirstintwolines\Xnumberonlyfirstintwolines
	  \let\nonumberinfootnote\Xnonumberinfootnote
	  \let\pstartinfootnote\Xpstart
	  \let\pstartinfootnoteeverytime\Xpstarteverytime
	  \let\onlyXpstart\Xonlypstart
	  \let\Xnonumberinfootnote\Xnonumber
	  \let\nonbreakableafternumber\Xnonbreakableafternumber
	  \let\maxhXnotes\Xmaxhnotes
	  \let\beforeXnotes\Xbeforenotes
	  \let\boxlinenum\Xboxlinenum
	  \let\boxlinenumalign\Xboxlinenumaligm
	  \let\boxstartlinenum\Xboxstartlinenum
	  \let\boxendlinenum\Xboxendlinenum
	  \let\twolines\Xtwolines
	  \let\morethantwolines\Xmorethantwolines
	  \let\twolinesbutnotmore\Xtwolinesbutnotmore
	  \let\twolinesonlyinsamepage\Xtwolinesonlyinsamepage
	\fi
	
	\unless\ifnofamiliar@
	  \let\notesXwidthliketwocolumns\noteswidthliketwocolumnsX
	\fi
	\newcommandx{\parafootsep}[2][1,usedefault]{%
	    \Xparafootsep[#1]{#2}%
	    \parafootsepX[#1]{#2}
	}%
	
	\newcommandx{\afternote}[2][1,usedefault]{%
	    \Xafternote[#1]{#2}%
	    \afternoteX[#1]{#2}%
	}%
	
	\unless\ifnoend@
	  \let\XendXtwolines\Xendtwolines
	  \let\XendXmorethantwolines\Xendmorethantwolines
	  \let\bhookXendnote\Xendbhooknote
	  \let\boxXendlinenum\Xendboxlinenum%
	  \let\boxXendlinenumalign\Xendboxlinenumalign%
	  \let\boxXendstartlinenum\Xendboxstartlinenum%
	  \let\boxXendendlinenum\Xendboxendlinenum% 
	  \let\XendXlemmaseparator\Xendlemmaseparator
	  \let\XendXbeforelemmaseparator\Xendbeforelemmaseparator
	  \let\XendXafterlemmaseparator\Xendafterlemmaseparator
	  \let\XendXinplaceoflemmaseparator\Xendinplaceoflemmaseparator
	\fi
	
	\AtBeginDocument{%
	  \ifdef\lineref{}{\let\lineref\edlineref}%
	}%


\fi%
%    \end{macrocode}
% 
%</code>
% \newpage
% \appendix
% \let\oldthesection\thesection
% \renewcommand{\thesection}{Appendix \oldthesection}
% \section{Some things to do when changing version}
% \input{doc-include/migrate-mac.dtx}
% \clearpage
% \bibliographystyle{alpha}
% \phantomsection
% \addcontentsline{toc}{section}{References}
% \begin{thebibliography}{WWW99}
%
% \bibitem[Bre96]{TABMAC}
% Herbert Breger.
% \newblock \tabmac.
% \newblock October 1996.
% \newblock (Available from CTAN in
%          \texttt{macros/plain/contrib/tabmac})
%
% \bibitem[Bur01]{POEMSCOLTUG}
% John Burt.
% \newblock `Typesetting critical editions of poetry'.
% \newblock \emph{TUGboat}, \textbf{22}, 4, pp 353--361, December 2001.
% \newblock (Code available from CTAN in
%          \texttt{macros/latex/contrib/poemscol})
%
% \bibitem[Eck03]{PARALLEL}
% Matthias Eckermann.
% \newblock \emph{The \protect\package{Parallel}-Package}.
% \newblock April 2003.
% \newblock (Available from CTAN in
%          \texttt{macros/latex/contrib/parallel})
%
% \bibitem[Fai03]{FOOTMISC}
% Robin Fairbairns.
% \newblock \emph{\protect\package{footmisc}\,---\,a portmanteau package for 
%          customising footnotes in \LaTeX}.
% \newblock February 2003.
% \newblock (Available from CTAN in
%          \texttt{macros/latex/contrib/footmisc})
%
%
% \bibitem[LW90]{EDMACTUG}
% John Lavagnino and Dominik Wujastyk.
% \newblock `An overview of \edmac: a \textsc{Plain} TeX format for
%          critical editions'.
% \newblock \emph{TUGboat}, \textbf{11}, 4, pp. 623--643, November 1990.
% \newblock (Code available from CTAN in
%          \texttt{macros/plain/contrib/edmac})
%
% \bibitem[L\"{u}c03]{EDNOTES}
% Uwe L\"{u}ck.
% \newblock `\textsf{ednotes}\,---\,critical edition typesetting with LaTeX'.
% \newblock \emph{TUGboat}, \textbf{24}, 2, pp. 224--236, 2003.
% \newblock (Code available from CTAN in
%          \texttt{macros/latex/contrib/ednotes})
%
% \bibitem[Sul92]{EDSTANZA}
% Wayne G.~Sullivan.
% \newblock \emph{The file \texttt{edstanza.doc}}.
% \newblock June 1992.
% \newblock (Available from CTAN in
%          \texttt{macros/plain/contrib/edmac})
%
% \bibitem[Wil02]{MEMOIR}
% Peter Wilson.
% \newblock \emph{The \protect\package{memoir} class for configurable typesetting}.
% \newblock November 2002.
% \newblock (Available from CTAN in
%          \texttt{macros/latex/contrib/memoir})
%
% \bibitem[Wil04]{ELEDPAR}
% Peter Wilson and Maïeul Rouquette.
% \newblock \emph{Parallel typesetting for critical editions: 
%               the \protect\package{eledpar} package}.
% \newblock December 2004.
% \newblock (Available from CTAN in
%          \texttt{macros/latex/contrib/ledmmac})
%
% \end{thebibliography}
%
% \Finale
% \phantomsection
% \addcontentsline{toc}{section}{Index}
% \PrintIndex
%
% \phantomsection
% \addcontentsline{toc}{section}{Change History}
% \PrintChanges
% \endinput
\endinput

% \CharacterTable
%  {Upper-case    \A\B\C\D\E\F\G\H\I\J\K\L\M\N\O\P\Q\R\S\T\U\V\W\X\Y\Z
%   Lower-case    \a\b\c\d\e\f\g\h\i\j\k\l\m\n\o\p\q\r\s\t\u\v\w\x\y\z
%   Digits        \0\1\2\3\4\5\6\7\8\9
%   Exclamation   \!     Double quote  \"     Hash (number) \#
%   Dollar        \$     Percent       \%    Ampersand     \&
%   Acute accent  \'     Left paren    \(     Right paren   \)
%   Asterisk      \*     Plus          \+     Comma         \,
%   Minus         \-     Point         \.     Solidus       \/
%   Colon         \:     Semicolon     \;     Less than     \<
%   Equals        \=     Greater than  \>     Question mark \?
%   Commercial at \@     Left bracket  \[     Backslash     \\
%   Right bracket \]     Circumflex    \^     Underscore    \_
%   Grave accent  \`     Left brace    \{     Vertical bar  \|
%   Right brace   \}     Tilde         \~}
%
